
SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003984  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003b5c  08003b5c  00004b5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b9c  08003b9c  00005010  2**0
                  CONTENTS
  4 .ARM          00000008  08003b9c  08003b9c  00004b9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ba4  08003ba4  00005010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ba4  08003ba4  00004ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003ba8  08003ba8  00004ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08003bac  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000130  20000010  08003bbc  00005010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000140  08003bbc  00005140  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f004  00000000  00000000  00005040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002040  00000000  00000000  00014044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c00  00000000  00000000  00016088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000948  00000000  00000000  00016c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024681  00000000  00000000  000175d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eda6  00000000  00000000  0003bc51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e7e2f  00000000  00000000  0004a9f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00132826  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000310c  00000000  00000000  0013286c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  00135978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003b44 	.word	0x08003b44

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	08003b44 	.word	0x08003b44

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050c:	f000 fb49 	bl	8000ba2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000510:	f000 f80d 	bl	800052e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000514:	f000 f8de 	bl	80006d4 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000518:	f000 f854 	bl	80005c4 <MX_LPUART1_UART_Init>
  MX_SPI3_Init();
 800051c:	f000 f89c 	bl	8000658 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  SPITxRx_Setup();
 8000520:	f000 f968 	bl	80007f4 <SPITxRx_Setup>
  IODIRB_Init();
 8000524:	f000 f97c 	bl	8000820 <IODIRB_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SPITxRx_readIO();
 8000528:	f000 f99e 	bl	8000868 <SPITxRx_readIO>
 800052c:	e7fc      	b.n	8000528 <main+0x20>

0800052e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800052e:	b580      	push	{r7, lr}
 8000530:	b094      	sub	sp, #80	@ 0x50
 8000532:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000534:	f107 0318 	add.w	r3, r7, #24
 8000538:	2238      	movs	r2, #56	@ 0x38
 800053a:	2100      	movs	r1, #0
 800053c:	4618      	mov	r0, r3
 800053e:	f003 fad5 	bl	8003aec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000542:	1d3b      	adds	r3, r7, #4
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	605a      	str	r2, [r3, #4]
 800054a:	609a      	str	r2, [r3, #8]
 800054c:	60da      	str	r2, [r3, #12]
 800054e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000550:	2000      	movs	r0, #0
 8000552:	f000 ff05 	bl	8001360 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000556:	2302      	movs	r3, #2
 8000558:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800055a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800055e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000560:	2340      	movs	r3, #64	@ 0x40
 8000562:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000564:	2302      	movs	r3, #2
 8000566:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000568:	2302      	movs	r3, #2
 800056a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800056c:	2304      	movs	r3, #4
 800056e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000570:	2355      	movs	r3, #85	@ 0x55
 8000572:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000574:	2302      	movs	r3, #2
 8000576:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000578:	2302      	movs	r3, #2
 800057a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800057c:	2302      	movs	r3, #2
 800057e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000580:	f107 0318 	add.w	r3, r7, #24
 8000584:	4618      	mov	r0, r3
 8000586:	f000 ff9f 	bl	80014c8 <HAL_RCC_OscConfig>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000590:	f000 f9bc 	bl	800090c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000594:	230f      	movs	r3, #15
 8000596:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000598:	2303      	movs	r3, #3
 800059a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800059c:	2300      	movs	r3, #0
 800059e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005a0:	2300      	movs	r3, #0
 80005a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a4:	2300      	movs	r3, #0
 80005a6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005a8:	1d3b      	adds	r3, r7, #4
 80005aa:	2104      	movs	r1, #4
 80005ac:	4618      	mov	r0, r3
 80005ae:	f001 fa9d 	bl	8001aec <HAL_RCC_ClockConfig>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80005b8:	f000 f9a8 	bl	800090c <Error_Handler>
  }
}
 80005bc:	bf00      	nop
 80005be:	3750      	adds	r7, #80	@ 0x50
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}

080005c4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80005c8:	4b21      	ldr	r3, [pc, #132]	@ (8000650 <MX_LPUART1_UART_Init+0x8c>)
 80005ca:	4a22      	ldr	r2, [pc, #136]	@ (8000654 <MX_LPUART1_UART_Init+0x90>)
 80005cc:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80005ce:	4b20      	ldr	r3, [pc, #128]	@ (8000650 <MX_LPUART1_UART_Init+0x8c>)
 80005d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80005d4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005d6:	4b1e      	ldr	r3, [pc, #120]	@ (8000650 <MX_LPUART1_UART_Init+0x8c>)
 80005d8:	2200      	movs	r2, #0
 80005da:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80005dc:	4b1c      	ldr	r3, [pc, #112]	@ (8000650 <MX_LPUART1_UART_Init+0x8c>)
 80005de:	2200      	movs	r2, #0
 80005e0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80005e2:	4b1b      	ldr	r3, [pc, #108]	@ (8000650 <MX_LPUART1_UART_Init+0x8c>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80005e8:	4b19      	ldr	r3, [pc, #100]	@ (8000650 <MX_LPUART1_UART_Init+0x8c>)
 80005ea:	220c      	movs	r2, #12
 80005ec:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005ee:	4b18      	ldr	r3, [pc, #96]	@ (8000650 <MX_LPUART1_UART_Init+0x8c>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005f4:	4b16      	ldr	r3, [pc, #88]	@ (8000650 <MX_LPUART1_UART_Init+0x8c>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80005fa:	4b15      	ldr	r3, [pc, #84]	@ (8000650 <MX_LPUART1_UART_Init+0x8c>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000600:	4b13      	ldr	r3, [pc, #76]	@ (8000650 <MX_LPUART1_UART_Init+0x8c>)
 8000602:	2200      	movs	r2, #0
 8000604:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000606:	4812      	ldr	r0, [pc, #72]	@ (8000650 <MX_LPUART1_UART_Init+0x8c>)
 8000608:	f002 fc02 	bl	8002e10 <HAL_UART_Init>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000612:	f000 f97b 	bl	800090c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000616:	2100      	movs	r1, #0
 8000618:	480d      	ldr	r0, [pc, #52]	@ (8000650 <MX_LPUART1_UART_Init+0x8c>)
 800061a:	f003 f99d 	bl	8003958 <HAL_UARTEx_SetTxFifoThreshold>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000624:	f000 f972 	bl	800090c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000628:	2100      	movs	r1, #0
 800062a:	4809      	ldr	r0, [pc, #36]	@ (8000650 <MX_LPUART1_UART_Init+0x8c>)
 800062c:	f003 f9d2 	bl	80039d4 <HAL_UARTEx_SetRxFifoThreshold>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000636:	f000 f969 	bl	800090c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800063a:	4805      	ldr	r0, [pc, #20]	@ (8000650 <MX_LPUART1_UART_Init+0x8c>)
 800063c:	f003 f953 	bl	80038e6 <HAL_UARTEx_DisableFifoMode>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000646:	f000 f961 	bl	800090c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800064a:	bf00      	nop
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	2000002c 	.word	0x2000002c
 8000654:	40008000 	.word	0x40008000

08000658 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800065c:	4b1b      	ldr	r3, [pc, #108]	@ (80006cc <MX_SPI3_Init+0x74>)
 800065e:	4a1c      	ldr	r2, [pc, #112]	@ (80006d0 <MX_SPI3_Init+0x78>)
 8000660:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000662:	4b1a      	ldr	r3, [pc, #104]	@ (80006cc <MX_SPI3_Init+0x74>)
 8000664:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000668:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800066a:	4b18      	ldr	r3, [pc, #96]	@ (80006cc <MX_SPI3_Init+0x74>)
 800066c:	2200      	movs	r2, #0
 800066e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000670:	4b16      	ldr	r3, [pc, #88]	@ (80006cc <MX_SPI3_Init+0x74>)
 8000672:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000676:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000678:	4b14      	ldr	r3, [pc, #80]	@ (80006cc <MX_SPI3_Init+0x74>)
 800067a:	2200      	movs	r2, #0
 800067c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800067e:	4b13      	ldr	r3, [pc, #76]	@ (80006cc <MX_SPI3_Init+0x74>)
 8000680:	2200      	movs	r2, #0
 8000682:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000684:	4b11      	ldr	r3, [pc, #68]	@ (80006cc <MX_SPI3_Init+0x74>)
 8000686:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800068a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800068c:	4b0f      	ldr	r3, [pc, #60]	@ (80006cc <MX_SPI3_Init+0x74>)
 800068e:	2228      	movs	r2, #40	@ 0x28
 8000690:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000692:	4b0e      	ldr	r3, [pc, #56]	@ (80006cc <MX_SPI3_Init+0x74>)
 8000694:	2200      	movs	r2, #0
 8000696:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000698:	4b0c      	ldr	r3, [pc, #48]	@ (80006cc <MX_SPI3_Init+0x74>)
 800069a:	2200      	movs	r2, #0
 800069c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800069e:	4b0b      	ldr	r3, [pc, #44]	@ (80006cc <MX_SPI3_Init+0x74>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80006a4:	4b09      	ldr	r3, [pc, #36]	@ (80006cc <MX_SPI3_Init+0x74>)
 80006a6:	2207      	movs	r2, #7
 80006a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80006aa:	4b08      	ldr	r3, [pc, #32]	@ (80006cc <MX_SPI3_Init+0x74>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80006b0:	4b06      	ldr	r3, [pc, #24]	@ (80006cc <MX_SPI3_Init+0x74>)
 80006b2:	2208      	movs	r2, #8
 80006b4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80006b6:	4805      	ldr	r0, [pc, #20]	@ (80006cc <MX_SPI3_Init+0x74>)
 80006b8:	f001 fe82 	bl	80023c0 <HAL_SPI_Init>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80006c2:	f000 f923 	bl	800090c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80006c6:	bf00      	nop
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	200000c0 	.word	0x200000c0
 80006d0:	40003c00 	.word	0x40003c00

080006d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b08a      	sub	sp, #40	@ 0x28
 80006d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006da:	f107 0314 	add.w	r3, r7, #20
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	605a      	str	r2, [r3, #4]
 80006e4:	609a      	str	r2, [r3, #8]
 80006e6:	60da      	str	r2, [r3, #12]
 80006e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ea:	4b3f      	ldr	r3, [pc, #252]	@ (80007e8 <MX_GPIO_Init+0x114>)
 80006ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ee:	4a3e      	ldr	r2, [pc, #248]	@ (80007e8 <MX_GPIO_Init+0x114>)
 80006f0:	f043 0304 	orr.w	r3, r3, #4
 80006f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006f6:	4b3c      	ldr	r3, [pc, #240]	@ (80007e8 <MX_GPIO_Init+0x114>)
 80006f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006fa:	f003 0304 	and.w	r3, r3, #4
 80006fe:	613b      	str	r3, [r7, #16]
 8000700:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000702:	4b39      	ldr	r3, [pc, #228]	@ (80007e8 <MX_GPIO_Init+0x114>)
 8000704:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000706:	4a38      	ldr	r2, [pc, #224]	@ (80007e8 <MX_GPIO_Init+0x114>)
 8000708:	f043 0320 	orr.w	r3, r3, #32
 800070c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800070e:	4b36      	ldr	r3, [pc, #216]	@ (80007e8 <MX_GPIO_Init+0x114>)
 8000710:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000712:	f003 0320 	and.w	r3, r3, #32
 8000716:	60fb      	str	r3, [r7, #12]
 8000718:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800071a:	4b33      	ldr	r3, [pc, #204]	@ (80007e8 <MX_GPIO_Init+0x114>)
 800071c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800071e:	4a32      	ldr	r2, [pc, #200]	@ (80007e8 <MX_GPIO_Init+0x114>)
 8000720:	f043 0301 	orr.w	r3, r3, #1
 8000724:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000726:	4b30      	ldr	r3, [pc, #192]	@ (80007e8 <MX_GPIO_Init+0x114>)
 8000728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800072a:	f003 0301 	and.w	r3, r3, #1
 800072e:	60bb      	str	r3, [r7, #8]
 8000730:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000732:	4b2d      	ldr	r3, [pc, #180]	@ (80007e8 <MX_GPIO_Init+0x114>)
 8000734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000736:	4a2c      	ldr	r2, [pc, #176]	@ (80007e8 <MX_GPIO_Init+0x114>)
 8000738:	f043 0308 	orr.w	r3, r3, #8
 800073c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800073e:	4b2a      	ldr	r3, [pc, #168]	@ (80007e8 <MX_GPIO_Init+0x114>)
 8000740:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000742:	f003 0308 	and.w	r3, r3, #8
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800074a:	4b27      	ldr	r3, [pc, #156]	@ (80007e8 <MX_GPIO_Init+0x114>)
 800074c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800074e:	4a26      	ldr	r2, [pc, #152]	@ (80007e8 <MX_GPIO_Init+0x114>)
 8000750:	f043 0302 	orr.w	r3, r3, #2
 8000754:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000756:	4b24      	ldr	r3, [pc, #144]	@ (80007e8 <MX_GPIO_Init+0x114>)
 8000758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800075a:	f003 0302 	and.w	r3, r3, #2
 800075e:	603b      	str	r3, [r7, #0]
 8000760:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000762:	2200      	movs	r2, #0
 8000764:	2120      	movs	r1, #32
 8000766:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800076a:	f000 fdbd 	bl	80012e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 800076e:	2201      	movs	r2, #1
 8000770:	2104      	movs	r1, #4
 8000772:	481e      	ldr	r0, [pc, #120]	@ (80007ec <MX_GPIO_Init+0x118>)
 8000774:	f000 fdb8 	bl	80012e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000778:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800077c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800077e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000782:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000784:	2300      	movs	r3, #0
 8000786:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000788:	f107 0314 	add.w	r3, r7, #20
 800078c:	4619      	mov	r1, r3
 800078e:	4818      	ldr	r0, [pc, #96]	@ (80007f0 <MX_GPIO_Init+0x11c>)
 8000790:	f000 fc10 	bl	8000fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000794:	2320      	movs	r3, #32
 8000796:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000798:	2301      	movs	r3, #1
 800079a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079c:	2300      	movs	r3, #0
 800079e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a0:	2300      	movs	r3, #0
 80007a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007a4:	f107 0314 	add.w	r3, r7, #20
 80007a8:	4619      	mov	r1, r3
 80007aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007ae:	f000 fc01 	bl	8000fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80007b2:	2304      	movs	r3, #4
 80007b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b6:	2301      	movs	r3, #1
 80007b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ba:	2300      	movs	r3, #0
 80007bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007be:	2300      	movs	r3, #0
 80007c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007c2:	f107 0314 	add.w	r3, r7, #20
 80007c6:	4619      	mov	r1, r3
 80007c8:	4808      	ldr	r0, [pc, #32]	@ (80007ec <MX_GPIO_Init+0x118>)
 80007ca:	f000 fbf3 	bl	8000fb4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80007ce:	2200      	movs	r2, #0
 80007d0:	2100      	movs	r1, #0
 80007d2:	2028      	movs	r0, #40	@ 0x28
 80007d4:	f000 fb53 	bl	8000e7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007d8:	2028      	movs	r0, #40	@ 0x28
 80007da:	f000 fb6a 	bl	8000eb2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007de:	bf00      	nop
 80007e0:	3728      	adds	r7, #40	@ 0x28
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	40021000 	.word	0x40021000
 80007ec:	48000c00 	.word	0x48000c00
 80007f0:	48000800 	.word	0x48000800

080007f4 <SPITxRx_Setup>:

/* USER CODE BEGIN 4 */
void SPITxRx_Setup()
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
//CS pulse
HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0); // CS Select
 80007f8:	2200      	movs	r2, #0
 80007fa:	2104      	movs	r1, #4
 80007fc:	4807      	ldr	r0, [pc, #28]	@ (800081c <SPITxRx_Setup+0x28>)
 80007fe:	f000 fd73 	bl	80012e8 <HAL_GPIO_WritePin>
HAL_Delay(1);
 8000802:	2001      	movs	r0, #1
 8000804:	f000 fa3e 	bl	8000c84 <HAL_Delay>
HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1); // CS deSelect
 8000808:	2201      	movs	r2, #1
 800080a:	2104      	movs	r1, #4
 800080c:	4803      	ldr	r0, [pc, #12]	@ (800081c <SPITxRx_Setup+0x28>)
 800080e:	f000 fd6b 	bl	80012e8 <HAL_GPIO_WritePin>
HAL_Delay(1);
 8000812:	2001      	movs	r0, #1
 8000814:	f000 fa36 	bl	8000c84 <HAL_Delay>
}
 8000818:	bf00      	nop
 800081a:	bd80      	pop	{r7, pc}
 800081c:	48000c00 	.word	0x48000c00

08000820 <IODIRB_Init>:

void IODIRB_Init(){
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);
 8000824:	2200      	movs	r2, #0
 8000826:	2104      	movs	r1, #4
 8000828:	480b      	ldr	r0, [pc, #44]	@ (8000858 <IODIRB_Init+0x38>)
 800082a:	f000 fd5d 	bl	80012e8 <HAL_GPIO_WritePin>
	SPITx[0] = 0b01000000;
 800082e:	4b0b      	ldr	r3, [pc, #44]	@ (800085c <IODIRB_Init+0x3c>)
 8000830:	2240      	movs	r2, #64	@ 0x40
 8000832:	701a      	strb	r2, [r3, #0]
	SPITx[1] = 0x01;
 8000834:	4b09      	ldr	r3, [pc, #36]	@ (800085c <IODIRB_Init+0x3c>)
 8000836:	2201      	movs	r2, #1
 8000838:	705a      	strb	r2, [r3, #1]
	SPITx[2] = 0b11111111;
 800083a:	4b08      	ldr	r3, [pc, #32]	@ (800085c <IODIRB_Init+0x3c>)
 800083c:	22ff      	movs	r2, #255	@ 0xff
 800083e:	709a      	strb	r2, [r3, #2]
	SPITx[3] = 0;
 8000840:	4b06      	ldr	r3, [pc, #24]	@ (800085c <IODIRB_Init+0x3c>)
 8000842:	2200      	movs	r2, #0
 8000844:	70da      	strb	r2, [r3, #3]
	HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 4);
 8000846:	2304      	movs	r3, #4
 8000848:	4a05      	ldr	r2, [pc, #20]	@ (8000860 <IODIRB_Init+0x40>)
 800084a:	4904      	ldr	r1, [pc, #16]	@ (800085c <IODIRB_Init+0x3c>)
 800084c:	4805      	ldr	r0, [pc, #20]	@ (8000864 <IODIRB_Init+0x44>)
 800084e:	f001 fe63 	bl	8002518 <HAL_SPI_TransmitReceive_IT>

}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	48000c00 	.word	0x48000c00
 800085c:	20000130 	.word	0x20000130
 8000860:	20000124 	.word	0x20000124
 8000864:	200000c0 	.word	0x200000c0

08000868 <SPITxRx_readIO>:

void SPITxRx_readIO()
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_2))
 800086c:	2104      	movs	r1, #4
 800086e:	481a      	ldr	r0, [pc, #104]	@ (80008d8 <SPITxRx_readIO+0x70>)
 8000870:	f000 fd22 	bl	80012b8 <HAL_GPIO_ReadPin>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d02b      	beq.n	80008d2 <SPITxRx_readIO+0x6a>
{
HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0); // CS Select
 800087a:	2200      	movs	r2, #0
 800087c:	2104      	movs	r1, #4
 800087e:	4816      	ldr	r0, [pc, #88]	@ (80008d8 <SPITxRx_readIO+0x70>)
 8000880:	f000 fd32 	bl	80012e8 <HAL_GPIO_WritePin>
if(mode == 1){
 8000884:	4b15      	ldr	r3, [pc, #84]	@ (80008dc <SPITxRx_readIO+0x74>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	2b01      	cmp	r3, #1
 800088a:	d10c      	bne.n	80008a6 <SPITxRx_readIO+0x3e>
	SPITx[0] = 0b01000001;
 800088c:	4b14      	ldr	r3, [pc, #80]	@ (80008e0 <SPITxRx_readIO+0x78>)
 800088e:	2241      	movs	r2, #65	@ 0x41
 8000890:	701a      	strb	r2, [r3, #0]
	SPITx[1] = 0x12;
 8000892:	4b13      	ldr	r3, [pc, #76]	@ (80008e0 <SPITxRx_readIO+0x78>)
 8000894:	2212      	movs	r2, #18
 8000896:	705a      	strb	r2, [r3, #1]
	SPITx[2] = 0;
 8000898:	4b11      	ldr	r3, [pc, #68]	@ (80008e0 <SPITxRx_readIO+0x78>)
 800089a:	2200      	movs	r2, #0
 800089c:	709a      	strb	r2, [r3, #2]
	SPITx[3] = 0;
 800089e:	4b10      	ldr	r3, [pc, #64]	@ (80008e0 <SPITxRx_readIO+0x78>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	70da      	strb	r2, [r3, #3]
 80008a4:	e00f      	b.n	80008c6 <SPITxRx_readIO+0x5e>
}else if(mode ==2){
 80008a6:	4b0d      	ldr	r3, [pc, #52]	@ (80008dc <SPITxRx_readIO+0x74>)
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	2b02      	cmp	r3, #2
 80008ac:	d10b      	bne.n	80008c6 <SPITxRx_readIO+0x5e>
	SPITx[0] = 0b01000000;
 80008ae:	4b0c      	ldr	r3, [pc, #48]	@ (80008e0 <SPITxRx_readIO+0x78>)
 80008b0:	2240      	movs	r2, #64	@ 0x40
 80008b2:	701a      	strb	r2, [r3, #0]
	SPITx[1] = 0x01;
 80008b4:	4b0a      	ldr	r3, [pc, #40]	@ (80008e0 <SPITxRx_readIO+0x78>)
 80008b6:	2201      	movs	r2, #1
 80008b8:	705a      	strb	r2, [r3, #1]
	SPITx[2] = 0b00000101;
 80008ba:	4b09      	ldr	r3, [pc, #36]	@ (80008e0 <SPITxRx_readIO+0x78>)
 80008bc:	2205      	movs	r2, #5
 80008be:	709a      	strb	r2, [r3, #2]
	SPITx[3] = 0;
 80008c0:	4b07      	ldr	r3, [pc, #28]	@ (80008e0 <SPITxRx_readIO+0x78>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	70da      	strb	r2, [r3, #3]
}

HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 4);
 80008c6:	2304      	movs	r3, #4
 80008c8:	4a06      	ldr	r2, [pc, #24]	@ (80008e4 <SPITxRx_readIO+0x7c>)
 80008ca:	4905      	ldr	r1, [pc, #20]	@ (80008e0 <SPITxRx_readIO+0x78>)
 80008cc:	4806      	ldr	r0, [pc, #24]	@ (80008e8 <SPITxRx_readIO+0x80>)
 80008ce:	f001 fe23 	bl	8002518 <HAL_SPI_TransmitReceive_IT>
}
}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	48000c00 	.word	0x48000c00
 80008dc:	20000000 	.word	0x20000000
 80008e0:	20000130 	.word	0x20000130
 80008e4:	20000124 	.word	0x20000124
 80008e8:	200000c0 	.word	0x200000c0

080008ec <HAL_SPI_TxRxCpltCallback>:


void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1); //CS dnSelect
 80008f4:	2201      	movs	r2, #1
 80008f6:	2104      	movs	r1, #4
 80008f8:	4803      	ldr	r0, [pc, #12]	@ (8000908 <HAL_SPI_TxRxCpltCallback+0x1c>)
 80008fa:	f000 fcf5 	bl	80012e8 <HAL_GPIO_WritePin>
}
 80008fe:	bf00      	nop
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	48000c00 	.word	0x48000c00

0800090c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000910:	b672      	cpsid	i
}
 8000912:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000914:	bf00      	nop
 8000916:	e7fd      	b.n	8000914 <Error_Handler+0x8>

08000918 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800091e:	4b0f      	ldr	r3, [pc, #60]	@ (800095c <HAL_MspInit+0x44>)
 8000920:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000922:	4a0e      	ldr	r2, [pc, #56]	@ (800095c <HAL_MspInit+0x44>)
 8000924:	f043 0301 	orr.w	r3, r3, #1
 8000928:	6613      	str	r3, [r2, #96]	@ 0x60
 800092a:	4b0c      	ldr	r3, [pc, #48]	@ (800095c <HAL_MspInit+0x44>)
 800092c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800092e:	f003 0301 	and.w	r3, r3, #1
 8000932:	607b      	str	r3, [r7, #4]
 8000934:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000936:	4b09      	ldr	r3, [pc, #36]	@ (800095c <HAL_MspInit+0x44>)
 8000938:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800093a:	4a08      	ldr	r2, [pc, #32]	@ (800095c <HAL_MspInit+0x44>)
 800093c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000940:	6593      	str	r3, [r2, #88]	@ 0x58
 8000942:	4b06      	ldr	r3, [pc, #24]	@ (800095c <HAL_MspInit+0x44>)
 8000944:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000946:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800094a:	603b      	str	r3, [r7, #0]
 800094c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800094e:	f000 fdab 	bl	80014a8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000952:	bf00      	nop
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40021000 	.word	0x40021000

08000960 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b09e      	sub	sp, #120	@ 0x78
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000968:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	605a      	str	r2, [r3, #4]
 8000972:	609a      	str	r2, [r3, #8]
 8000974:	60da      	str	r2, [r3, #12]
 8000976:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000978:	f107 0310 	add.w	r3, r7, #16
 800097c:	2254      	movs	r2, #84	@ 0x54
 800097e:	2100      	movs	r1, #0
 8000980:	4618      	mov	r0, r3
 8000982:	f003 f8b3 	bl	8003aec <memset>
  if(huart->Instance==LPUART1)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4a1f      	ldr	r2, [pc, #124]	@ (8000a08 <HAL_UART_MspInit+0xa8>)
 800098c:	4293      	cmp	r3, r2
 800098e:	d136      	bne.n	80009fe <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000990:	2320      	movs	r3, #32
 8000992:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000994:	2300      	movs	r3, #0
 8000996:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000998:	f107 0310 	add.w	r3, r7, #16
 800099c:	4618      	mov	r0, r3
 800099e:	f001 fac1 	bl	8001f24 <HAL_RCCEx_PeriphCLKConfig>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80009a8:	f7ff ffb0 	bl	800090c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80009ac:	4b17      	ldr	r3, [pc, #92]	@ (8000a0c <HAL_UART_MspInit+0xac>)
 80009ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80009b0:	4a16      	ldr	r2, [pc, #88]	@ (8000a0c <HAL_UART_MspInit+0xac>)
 80009b2:	f043 0301 	orr.w	r3, r3, #1
 80009b6:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80009b8:	4b14      	ldr	r3, [pc, #80]	@ (8000a0c <HAL_UART_MspInit+0xac>)
 80009ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80009bc:	f003 0301 	and.w	r3, r3, #1
 80009c0:	60fb      	str	r3, [r7, #12]
 80009c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c4:	4b11      	ldr	r3, [pc, #68]	@ (8000a0c <HAL_UART_MspInit+0xac>)
 80009c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009c8:	4a10      	ldr	r2, [pc, #64]	@ (8000a0c <HAL_UART_MspInit+0xac>)
 80009ca:	f043 0301 	orr.w	r3, r3, #1
 80009ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009d0:	4b0e      	ldr	r3, [pc, #56]	@ (8000a0c <HAL_UART_MspInit+0xac>)
 80009d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009d4:	f003 0301 	and.w	r3, r3, #1
 80009d8:	60bb      	str	r3, [r7, #8]
 80009da:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80009dc:	230c      	movs	r3, #12
 80009de:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e0:	2302      	movs	r3, #2
 80009e2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e8:	2300      	movs	r3, #0
 80009ea:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80009ec:	230c      	movs	r3, #12
 80009ee:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80009f4:	4619      	mov	r1, r3
 80009f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009fa:	f000 fadb 	bl	8000fb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80009fe:	bf00      	nop
 8000a00:	3778      	adds	r7, #120	@ 0x78
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40008000 	.word	0x40008000
 8000a0c:	40021000 	.word	0x40021000

08000a10 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b08a      	sub	sp, #40	@ 0x28
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a18:	f107 0314 	add.w	r3, r7, #20
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
 8000a26:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a1b      	ldr	r2, [pc, #108]	@ (8000a9c <HAL_SPI_MspInit+0x8c>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d130      	bne.n	8000a94 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000a32:	4b1b      	ldr	r3, [pc, #108]	@ (8000aa0 <HAL_SPI_MspInit+0x90>)
 8000a34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a36:	4a1a      	ldr	r2, [pc, #104]	@ (8000aa0 <HAL_SPI_MspInit+0x90>)
 8000a38:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000a3c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a3e:	4b18      	ldr	r3, [pc, #96]	@ (8000aa0 <HAL_SPI_MspInit+0x90>)
 8000a40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a42:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000a46:	613b      	str	r3, [r7, #16]
 8000a48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a4a:	4b15      	ldr	r3, [pc, #84]	@ (8000aa0 <HAL_SPI_MspInit+0x90>)
 8000a4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a4e:	4a14      	ldr	r2, [pc, #80]	@ (8000aa0 <HAL_SPI_MspInit+0x90>)
 8000a50:	f043 0304 	orr.w	r3, r3, #4
 8000a54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a56:	4b12      	ldr	r3, [pc, #72]	@ (8000aa0 <HAL_SPI_MspInit+0x90>)
 8000a58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a5a:	f003 0304 	and.w	r3, r3, #4
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000a62:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000a66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a70:	2300      	movs	r3, #0
 8000a72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a74:	2306      	movs	r3, #6
 8000a76:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a78:	f107 0314 	add.w	r3, r7, #20
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4809      	ldr	r0, [pc, #36]	@ (8000aa4 <HAL_SPI_MspInit+0x94>)
 8000a80:	f000 fa98 	bl	8000fb4 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8000a84:	2200      	movs	r2, #0
 8000a86:	2100      	movs	r1, #0
 8000a88:	2033      	movs	r0, #51	@ 0x33
 8000a8a:	f000 f9f8 	bl	8000e7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8000a8e:	2033      	movs	r0, #51	@ 0x33
 8000a90:	f000 fa0f 	bl	8000eb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000a94:	bf00      	nop
 8000a96:	3728      	adds	r7, #40	@ 0x28
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	40003c00 	.word	0x40003c00
 8000aa0:	40021000 	.word	0x40021000
 8000aa4:	48000800 	.word	0x48000800

08000aa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000aac:	bf00      	nop
 8000aae:	e7fd      	b.n	8000aac <NMI_Handler+0x4>

08000ab0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ab4:	bf00      	nop
 8000ab6:	e7fd      	b.n	8000ab4 <HardFault_Handler+0x4>

08000ab8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000abc:	bf00      	nop
 8000abe:	e7fd      	b.n	8000abc <MemManage_Handler+0x4>

08000ac0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ac4:	bf00      	nop
 8000ac6:	e7fd      	b.n	8000ac4 <BusFault_Handler+0x4>

08000ac8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000acc:	bf00      	nop
 8000ace:	e7fd      	b.n	8000acc <UsageFault_Handler+0x4>

08000ad0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr

08000ade <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr

08000aec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000af0:	bf00      	nop
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr

08000afa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000afa:	b580      	push	{r7, lr}
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000afe:	f000 f8a3 	bl	8000c48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}

08000b06 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b06:	b580      	push	{r7, lr}
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000b0a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000b0e:	f000 fc03 	bl	8001318 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
	...

08000b18 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8000b1c:	4802      	ldr	r0, [pc, #8]	@ (8000b28 <SPI3_IRQHandler+0x10>)
 8000b1e:	f001 fda9 	bl	8002674 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	200000c0 	.word	0x200000c0

08000b2c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b30:	4b06      	ldr	r3, [pc, #24]	@ (8000b4c <SystemInit+0x20>)
 8000b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b36:	4a05      	ldr	r2, [pc, #20]	@ (8000b4c <SystemInit+0x20>)
 8000b38:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b3c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	e000ed00 	.word	0xe000ed00

08000b50 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b50:	480d      	ldr	r0, [pc, #52]	@ (8000b88 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b52:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b54:	f7ff ffea 	bl	8000b2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b58:	480c      	ldr	r0, [pc, #48]	@ (8000b8c <LoopForever+0x6>)
  ldr r1, =_edata
 8000b5a:	490d      	ldr	r1, [pc, #52]	@ (8000b90 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b5c:	4a0d      	ldr	r2, [pc, #52]	@ (8000b94 <LoopForever+0xe>)
  movs r3, #0
 8000b5e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000b60:	e002      	b.n	8000b68 <LoopCopyDataInit>

08000b62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b66:	3304      	adds	r3, #4

08000b68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b6c:	d3f9      	bcc.n	8000b62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b6e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b98 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b70:	4c0a      	ldr	r4, [pc, #40]	@ (8000b9c <LoopForever+0x16>)
  movs r3, #0
 8000b72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b74:	e001      	b.n	8000b7a <LoopFillZerobss>

08000b76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b78:	3204      	adds	r2, #4

08000b7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b7c:	d3fb      	bcc.n	8000b76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b7e:	f002 ffbd 	bl	8003afc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b82:	f7ff fcc1 	bl	8000508 <main>

08000b86 <LoopForever>:

LoopForever:
    b LoopForever
 8000b86:	e7fe      	b.n	8000b86 <LoopForever>
  ldr   r0, =_estack
 8000b88:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b90:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000b94:	08003bac 	.word	0x08003bac
  ldr r2, =_sbss
 8000b98:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000b9c:	20000140 	.word	0x20000140

08000ba0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ba0:	e7fe      	b.n	8000ba0 <ADC1_2_IRQHandler>

08000ba2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	b082      	sub	sp, #8
 8000ba6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bac:	2003      	movs	r0, #3
 8000bae:	f000 f95b 	bl	8000e68 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bb2:	2000      	movs	r0, #0
 8000bb4:	f000 f80e 	bl	8000bd4 <HAL_InitTick>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d002      	beq.n	8000bc4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	71fb      	strb	r3, [r7, #7]
 8000bc2:	e001      	b.n	8000bc8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bc4:	f7ff fea8 	bl	8000918 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bc8:	79fb      	ldrb	r3, [r7, #7]

}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
	...

08000bd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000be0:	4b16      	ldr	r3, [pc, #88]	@ (8000c3c <HAL_InitTick+0x68>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d022      	beq.n	8000c2e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000be8:	4b15      	ldr	r3, [pc, #84]	@ (8000c40 <HAL_InitTick+0x6c>)
 8000bea:	681a      	ldr	r2, [r3, #0]
 8000bec:	4b13      	ldr	r3, [pc, #76]	@ (8000c3c <HAL_InitTick+0x68>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000bf4:	fbb1 f3f3 	udiv	r3, r1, r3
 8000bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f000 f966 	bl	8000ece <HAL_SYSTICK_Config>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d10f      	bne.n	8000c28 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	2b0f      	cmp	r3, #15
 8000c0c:	d809      	bhi.n	8000c22 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	6879      	ldr	r1, [r7, #4]
 8000c12:	f04f 30ff 	mov.w	r0, #4294967295
 8000c16:	f000 f932 	bl	8000e7e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c1a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c44 <HAL_InitTick+0x70>)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	6013      	str	r3, [r2, #0]
 8000c20:	e007      	b.n	8000c32 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000c22:	2301      	movs	r3, #1
 8000c24:	73fb      	strb	r3, [r7, #15]
 8000c26:	e004      	b.n	8000c32 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	73fb      	strb	r3, [r7, #15]
 8000c2c:	e001      	b.n	8000c32 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c32:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	3710      	adds	r7, #16
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	2000000c 	.word	0x2000000c
 8000c40:	20000004 	.word	0x20000004
 8000c44:	20000008 	.word	0x20000008

08000c48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c4c:	4b05      	ldr	r3, [pc, #20]	@ (8000c64 <HAL_IncTick+0x1c>)
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	4b05      	ldr	r3, [pc, #20]	@ (8000c68 <HAL_IncTick+0x20>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4413      	add	r3, r2
 8000c56:	4a03      	ldr	r2, [pc, #12]	@ (8000c64 <HAL_IncTick+0x1c>)
 8000c58:	6013      	str	r3, [r2, #0]
}
 8000c5a:	bf00      	nop
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr
 8000c64:	2000013c 	.word	0x2000013c
 8000c68:	2000000c 	.word	0x2000000c

08000c6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c70:	4b03      	ldr	r3, [pc, #12]	@ (8000c80 <HAL_GetTick+0x14>)
 8000c72:	681b      	ldr	r3, [r3, #0]
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	2000013c 	.word	0x2000013c

08000c84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c8c:	f7ff ffee 	bl	8000c6c <HAL_GetTick>
 8000c90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c9c:	d004      	beq.n	8000ca8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c9e:	4b09      	ldr	r3, [pc, #36]	@ (8000cc4 <HAL_Delay+0x40>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	68fa      	ldr	r2, [r7, #12]
 8000ca4:	4413      	add	r3, r2
 8000ca6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ca8:	bf00      	nop
 8000caa:	f7ff ffdf 	bl	8000c6c <HAL_GetTick>
 8000cae:	4602      	mov	r2, r0
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	1ad3      	subs	r3, r2, r3
 8000cb4:	68fa      	ldr	r2, [r7, #12]
 8000cb6:	429a      	cmp	r2, r3
 8000cb8:	d8f7      	bhi.n	8000caa <HAL_Delay+0x26>
  {
  }
}
 8000cba:	bf00      	nop
 8000cbc:	bf00      	nop
 8000cbe:	3710      	adds	r7, #16
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	2000000c 	.word	0x2000000c

08000cc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b085      	sub	sp, #20
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	f003 0307 	and.w	r3, r3, #7
 8000cd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cd8:	4b0c      	ldr	r3, [pc, #48]	@ (8000d0c <__NVIC_SetPriorityGrouping+0x44>)
 8000cda:	68db      	ldr	r3, [r3, #12]
 8000cdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cde:	68ba      	ldr	r2, [r7, #8]
 8000ce0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cf0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000cf4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cfa:	4a04      	ldr	r2, [pc, #16]	@ (8000d0c <__NVIC_SetPriorityGrouping+0x44>)
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	60d3      	str	r3, [r2, #12]
}
 8000d00:	bf00      	nop
 8000d02:	3714      	adds	r7, #20
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr
 8000d0c:	e000ed00 	.word	0xe000ed00

08000d10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d14:	4b04      	ldr	r3, [pc, #16]	@ (8000d28 <__NVIC_GetPriorityGrouping+0x18>)
 8000d16:	68db      	ldr	r3, [r3, #12]
 8000d18:	0a1b      	lsrs	r3, r3, #8
 8000d1a:	f003 0307 	and.w	r3, r3, #7
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr
 8000d28:	e000ed00 	.word	0xe000ed00

08000d2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	db0b      	blt.n	8000d56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d3e:	79fb      	ldrb	r3, [r7, #7]
 8000d40:	f003 021f 	and.w	r2, r3, #31
 8000d44:	4907      	ldr	r1, [pc, #28]	@ (8000d64 <__NVIC_EnableIRQ+0x38>)
 8000d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4a:	095b      	lsrs	r3, r3, #5
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d56:	bf00      	nop
 8000d58:	370c      	adds	r7, #12
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	e000e100 	.word	0xe000e100

08000d68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	4603      	mov	r3, r0
 8000d70:	6039      	str	r1, [r7, #0]
 8000d72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	db0a      	blt.n	8000d92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	b2da      	uxtb	r2, r3
 8000d80:	490c      	ldr	r1, [pc, #48]	@ (8000db4 <__NVIC_SetPriority+0x4c>)
 8000d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d86:	0112      	lsls	r2, r2, #4
 8000d88:	b2d2      	uxtb	r2, r2
 8000d8a:	440b      	add	r3, r1
 8000d8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d90:	e00a      	b.n	8000da8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	b2da      	uxtb	r2, r3
 8000d96:	4908      	ldr	r1, [pc, #32]	@ (8000db8 <__NVIC_SetPriority+0x50>)
 8000d98:	79fb      	ldrb	r3, [r7, #7]
 8000d9a:	f003 030f 	and.w	r3, r3, #15
 8000d9e:	3b04      	subs	r3, #4
 8000da0:	0112      	lsls	r2, r2, #4
 8000da2:	b2d2      	uxtb	r2, r2
 8000da4:	440b      	add	r3, r1
 8000da6:	761a      	strb	r2, [r3, #24]
}
 8000da8:	bf00      	nop
 8000daa:	370c      	adds	r7, #12
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	e000e100 	.word	0xe000e100
 8000db8:	e000ed00 	.word	0xe000ed00

08000dbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b089      	sub	sp, #36	@ 0x24
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	60f8      	str	r0, [r7, #12]
 8000dc4:	60b9      	str	r1, [r7, #8]
 8000dc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	f003 0307 	and.w	r3, r3, #7
 8000dce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dd0:	69fb      	ldr	r3, [r7, #28]
 8000dd2:	f1c3 0307 	rsb	r3, r3, #7
 8000dd6:	2b04      	cmp	r3, #4
 8000dd8:	bf28      	it	cs
 8000dda:	2304      	movcs	r3, #4
 8000ddc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	3304      	adds	r3, #4
 8000de2:	2b06      	cmp	r3, #6
 8000de4:	d902      	bls.n	8000dec <NVIC_EncodePriority+0x30>
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	3b03      	subs	r3, #3
 8000dea:	e000      	b.n	8000dee <NVIC_EncodePriority+0x32>
 8000dec:	2300      	movs	r3, #0
 8000dee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df0:	f04f 32ff 	mov.w	r2, #4294967295
 8000df4:	69bb      	ldr	r3, [r7, #24]
 8000df6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfa:	43da      	mvns	r2, r3
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	401a      	ands	r2, r3
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e04:	f04f 31ff 	mov.w	r1, #4294967295
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e0e:	43d9      	mvns	r1, r3
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e14:	4313      	orrs	r3, r2
         );
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3724      	adds	r7, #36	@ 0x24
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
	...

08000e24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	3b01      	subs	r3, #1
 8000e30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e34:	d301      	bcc.n	8000e3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e36:	2301      	movs	r3, #1
 8000e38:	e00f      	b.n	8000e5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e64 <SysTick_Config+0x40>)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	3b01      	subs	r3, #1
 8000e40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e42:	210f      	movs	r1, #15
 8000e44:	f04f 30ff 	mov.w	r0, #4294967295
 8000e48:	f7ff ff8e 	bl	8000d68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e4c:	4b05      	ldr	r3, [pc, #20]	@ (8000e64 <SysTick_Config+0x40>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e52:	4b04      	ldr	r3, [pc, #16]	@ (8000e64 <SysTick_Config+0x40>)
 8000e54:	2207      	movs	r2, #7
 8000e56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e58:	2300      	movs	r3, #0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	e000e010 	.word	0xe000e010

08000e68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e70:	6878      	ldr	r0, [r7, #4]
 8000e72:	f7ff ff29 	bl	8000cc8 <__NVIC_SetPriorityGrouping>
}
 8000e76:	bf00      	nop
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}

08000e7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	b086      	sub	sp, #24
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	4603      	mov	r3, r0
 8000e86:	60b9      	str	r1, [r7, #8]
 8000e88:	607a      	str	r2, [r7, #4]
 8000e8a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e8c:	f7ff ff40 	bl	8000d10 <__NVIC_GetPriorityGrouping>
 8000e90:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e92:	687a      	ldr	r2, [r7, #4]
 8000e94:	68b9      	ldr	r1, [r7, #8]
 8000e96:	6978      	ldr	r0, [r7, #20]
 8000e98:	f7ff ff90 	bl	8000dbc <NVIC_EncodePriority>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ea2:	4611      	mov	r1, r2
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff ff5f 	bl	8000d68 <__NVIC_SetPriority>
}
 8000eaa:	bf00      	nop
 8000eac:	3718      	adds	r7, #24
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b082      	sub	sp, #8
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	4603      	mov	r3, r0
 8000eba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff ff33 	bl	8000d2c <__NVIC_EnableIRQ>
}
 8000ec6:	bf00      	nop
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}

08000ece <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	b082      	sub	sp, #8
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ed6:	6878      	ldr	r0, [r7, #4]
 8000ed8:	f7ff ffa4 	bl	8000e24 <SysTick_Config>
 8000edc:	4603      	mov	r3, r0
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b084      	sub	sp, #16
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	2b02      	cmp	r3, #2
 8000efc:	d00d      	beq.n	8000f1a <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2204      	movs	r2, #4
 8000f02:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2201      	movs	r2, #1
 8000f08:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2200      	movs	r2, #0
 8000f10:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8000f14:	2301      	movs	r3, #1
 8000f16:	73fb      	strb	r3, [r7, #15]
 8000f18:	e047      	b.n	8000faa <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f022 020e 	bic.w	r2, r2, #14
 8000f28:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f022 0201 	bic.w	r2, r2, #1
 8000f38:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f44:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000f48:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f4e:	f003 021f 	and.w	r2, r3, #31
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f56:	2101      	movs	r1, #1
 8000f58:	fa01 f202 	lsl.w	r2, r1, r2
 8000f5c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f62:	687a      	ldr	r2, [r7, #4]
 8000f64:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8000f66:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d00c      	beq.n	8000f8a <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f7a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000f7e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f84:	687a      	ldr	r2, [r7, #4]
 8000f86:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8000f88:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2200      	movs	r2, #0
 8000f96:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d003      	beq.n	8000faa <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	4798      	blx	r3
    }
  }
  return status;
 8000faa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3710      	adds	r7, #16
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b087      	sub	sp, #28
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000fc2:	e15a      	b.n	800127a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	2101      	movs	r1, #1
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	f000 814c 	beq.w	8001274 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f003 0303 	and.w	r3, r3, #3
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d005      	beq.n	8000ff4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ff0:	2b02      	cmp	r3, #2
 8000ff2:	d130      	bne.n	8001056 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	2203      	movs	r2, #3
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	43db      	mvns	r3, r3
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	4013      	ands	r3, r2
 800100a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	68da      	ldr	r2, [r3, #12]
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	693a      	ldr	r2, [r7, #16]
 800101a:	4313      	orrs	r3, r2
 800101c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	693a      	ldr	r2, [r7, #16]
 8001022:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800102a:	2201      	movs	r2, #1
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	43db      	mvns	r3, r3
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	4013      	ands	r3, r2
 8001038:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	091b      	lsrs	r3, r3, #4
 8001040:	f003 0201 	and.w	r2, r3, #1
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	4313      	orrs	r3, r2
 800104e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f003 0303 	and.w	r3, r3, #3
 800105e:	2b03      	cmp	r3, #3
 8001060:	d017      	beq.n	8001092 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	68db      	ldr	r3, [r3, #12]
 8001066:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	2203      	movs	r2, #3
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	43db      	mvns	r3, r3
 8001074:	693a      	ldr	r2, [r7, #16]
 8001076:	4013      	ands	r3, r2
 8001078:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	689a      	ldr	r2, [r3, #8]
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	4313      	orrs	r3, r2
 800108a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f003 0303 	and.w	r3, r3, #3
 800109a:	2b02      	cmp	r3, #2
 800109c:	d123      	bne.n	80010e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	08da      	lsrs	r2, r3, #3
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	3208      	adds	r2, #8
 80010a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	f003 0307 	and.w	r3, r3, #7
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	220f      	movs	r2, #15
 80010b6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ba:	43db      	mvns	r3, r3
 80010bc:	693a      	ldr	r2, [r7, #16]
 80010be:	4013      	ands	r3, r2
 80010c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	691a      	ldr	r2, [r3, #16]
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	f003 0307 	and.w	r3, r3, #7
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	08da      	lsrs	r2, r3, #3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	3208      	adds	r2, #8
 80010e0:	6939      	ldr	r1, [r7, #16]
 80010e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	2203      	movs	r2, #3
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	43db      	mvns	r3, r3
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	4013      	ands	r3, r2
 80010fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f003 0203 	and.w	r2, r3, #3
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	4313      	orrs	r3, r2
 8001112:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001122:	2b00      	cmp	r3, #0
 8001124:	f000 80a6 	beq.w	8001274 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001128:	4b5b      	ldr	r3, [pc, #364]	@ (8001298 <HAL_GPIO_Init+0x2e4>)
 800112a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800112c:	4a5a      	ldr	r2, [pc, #360]	@ (8001298 <HAL_GPIO_Init+0x2e4>)
 800112e:	f043 0301 	orr.w	r3, r3, #1
 8001132:	6613      	str	r3, [r2, #96]	@ 0x60
 8001134:	4b58      	ldr	r3, [pc, #352]	@ (8001298 <HAL_GPIO_Init+0x2e4>)
 8001136:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001138:	f003 0301 	and.w	r3, r3, #1
 800113c:	60bb      	str	r3, [r7, #8]
 800113e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001140:	4a56      	ldr	r2, [pc, #344]	@ (800129c <HAL_GPIO_Init+0x2e8>)
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	089b      	lsrs	r3, r3, #2
 8001146:	3302      	adds	r3, #2
 8001148:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800114c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	f003 0303 	and.w	r3, r3, #3
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	220f      	movs	r2, #15
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	43db      	mvns	r3, r3
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	4013      	ands	r3, r2
 8001162:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800116a:	d01f      	beq.n	80011ac <HAL_GPIO_Init+0x1f8>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	4a4c      	ldr	r2, [pc, #304]	@ (80012a0 <HAL_GPIO_Init+0x2ec>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d019      	beq.n	80011a8 <HAL_GPIO_Init+0x1f4>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4a4b      	ldr	r2, [pc, #300]	@ (80012a4 <HAL_GPIO_Init+0x2f0>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d013      	beq.n	80011a4 <HAL_GPIO_Init+0x1f0>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	4a4a      	ldr	r2, [pc, #296]	@ (80012a8 <HAL_GPIO_Init+0x2f4>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d00d      	beq.n	80011a0 <HAL_GPIO_Init+0x1ec>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	4a49      	ldr	r2, [pc, #292]	@ (80012ac <HAL_GPIO_Init+0x2f8>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d007      	beq.n	800119c <HAL_GPIO_Init+0x1e8>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	4a48      	ldr	r2, [pc, #288]	@ (80012b0 <HAL_GPIO_Init+0x2fc>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d101      	bne.n	8001198 <HAL_GPIO_Init+0x1e4>
 8001194:	2305      	movs	r3, #5
 8001196:	e00a      	b.n	80011ae <HAL_GPIO_Init+0x1fa>
 8001198:	2306      	movs	r3, #6
 800119a:	e008      	b.n	80011ae <HAL_GPIO_Init+0x1fa>
 800119c:	2304      	movs	r3, #4
 800119e:	e006      	b.n	80011ae <HAL_GPIO_Init+0x1fa>
 80011a0:	2303      	movs	r3, #3
 80011a2:	e004      	b.n	80011ae <HAL_GPIO_Init+0x1fa>
 80011a4:	2302      	movs	r3, #2
 80011a6:	e002      	b.n	80011ae <HAL_GPIO_Init+0x1fa>
 80011a8:	2301      	movs	r3, #1
 80011aa:	e000      	b.n	80011ae <HAL_GPIO_Init+0x1fa>
 80011ac:	2300      	movs	r3, #0
 80011ae:	697a      	ldr	r2, [r7, #20]
 80011b0:	f002 0203 	and.w	r2, r2, #3
 80011b4:	0092      	lsls	r2, r2, #2
 80011b6:	4093      	lsls	r3, r2
 80011b8:	693a      	ldr	r2, [r7, #16]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011be:	4937      	ldr	r1, [pc, #220]	@ (800129c <HAL_GPIO_Init+0x2e8>)
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	089b      	lsrs	r3, r3, #2
 80011c4:	3302      	adds	r3, #2
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011cc:	4b39      	ldr	r3, [pc, #228]	@ (80012b4 <HAL_GPIO_Init+0x300>)
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	43db      	mvns	r3, r3
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	4013      	ands	r3, r2
 80011da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d003      	beq.n	80011f0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80011f0:	4a30      	ldr	r2, [pc, #192]	@ (80012b4 <HAL_GPIO_Init+0x300>)
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80011f6:	4b2f      	ldr	r3, [pc, #188]	@ (80012b4 <HAL_GPIO_Init+0x300>)
 80011f8:	68db      	ldr	r3, [r3, #12]
 80011fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	43db      	mvns	r3, r3
 8001200:	693a      	ldr	r2, [r7, #16]
 8001202:	4013      	ands	r3, r2
 8001204:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d003      	beq.n	800121a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	4313      	orrs	r3, r2
 8001218:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800121a:	4a26      	ldr	r2, [pc, #152]	@ (80012b4 <HAL_GPIO_Init+0x300>)
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001220:	4b24      	ldr	r3, [pc, #144]	@ (80012b4 <HAL_GPIO_Init+0x300>)
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	43db      	mvns	r3, r3
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	4013      	ands	r3, r2
 800122e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001238:	2b00      	cmp	r3, #0
 800123a:	d003      	beq.n	8001244 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800123c:	693a      	ldr	r2, [r7, #16]
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	4313      	orrs	r3, r2
 8001242:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001244:	4a1b      	ldr	r2, [pc, #108]	@ (80012b4 <HAL_GPIO_Init+0x300>)
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800124a:	4b1a      	ldr	r3, [pc, #104]	@ (80012b4 <HAL_GPIO_Init+0x300>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	43db      	mvns	r3, r3
 8001254:	693a      	ldr	r2, [r7, #16]
 8001256:	4013      	ands	r3, r2
 8001258:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d003      	beq.n	800126e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	4313      	orrs	r3, r2
 800126c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800126e:	4a11      	ldr	r2, [pc, #68]	@ (80012b4 <HAL_GPIO_Init+0x300>)
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	3301      	adds	r3, #1
 8001278:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	fa22 f303 	lsr.w	r3, r2, r3
 8001284:	2b00      	cmp	r3, #0
 8001286:	f47f ae9d 	bne.w	8000fc4 <HAL_GPIO_Init+0x10>
  }
}
 800128a:	bf00      	nop
 800128c:	bf00      	nop
 800128e:	371c      	adds	r7, #28
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr
 8001298:	40021000 	.word	0x40021000
 800129c:	40010000 	.word	0x40010000
 80012a0:	48000400 	.word	0x48000400
 80012a4:	48000800 	.word	0x48000800
 80012a8:	48000c00 	.word	0x48000c00
 80012ac:	48001000 	.word	0x48001000
 80012b0:	48001400 	.word	0x48001400
 80012b4:	40010400 	.word	0x40010400

080012b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b085      	sub	sp, #20
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	460b      	mov	r3, r1
 80012c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	691a      	ldr	r2, [r3, #16]
 80012c8:	887b      	ldrh	r3, [r7, #2]
 80012ca:	4013      	ands	r3, r2
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d002      	beq.n	80012d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80012d0:	2301      	movs	r3, #1
 80012d2:	73fb      	strb	r3, [r7, #15]
 80012d4:	e001      	b.n	80012da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80012d6:	2300      	movs	r3, #0
 80012d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80012da:	7bfb      	ldrb	r3, [r7, #15]
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3714      	adds	r7, #20
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr

080012e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	460b      	mov	r3, r1
 80012f2:	807b      	strh	r3, [r7, #2]
 80012f4:	4613      	mov	r3, r2
 80012f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012f8:	787b      	ldrb	r3, [r7, #1]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d003      	beq.n	8001306 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012fe:	887a      	ldrh	r2, [r7, #2]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001304:	e002      	b.n	800130c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001306:	887a      	ldrh	r2, [r7, #2]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800130c:	bf00      	nop
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	4603      	mov	r3, r0
 8001320:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001322:	4b08      	ldr	r3, [pc, #32]	@ (8001344 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001324:	695a      	ldr	r2, [r3, #20]
 8001326:	88fb      	ldrh	r3, [r7, #6]
 8001328:	4013      	ands	r3, r2
 800132a:	2b00      	cmp	r3, #0
 800132c:	d006      	beq.n	800133c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800132e:	4a05      	ldr	r2, [pc, #20]	@ (8001344 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001330:	88fb      	ldrh	r3, [r7, #6]
 8001332:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001334:	88fb      	ldrh	r3, [r7, #6]
 8001336:	4618      	mov	r0, r3
 8001338:	f000 f806 	bl	8001348 <HAL_GPIO_EXTI_Callback>
  }
}
 800133c:	bf00      	nop
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	40010400 	.word	0x40010400

08001348 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001352:	bf00      	nop
 8001354:	370c      	adds	r7, #12
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
	...

08001360 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001360:	b480      	push	{r7}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d141      	bne.n	80013f2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800136e:	4b4b      	ldr	r3, [pc, #300]	@ (800149c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001376:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800137a:	d131      	bne.n	80013e0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800137c:	4b47      	ldr	r3, [pc, #284]	@ (800149c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800137e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001382:	4a46      	ldr	r2, [pc, #280]	@ (800149c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001384:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001388:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800138c:	4b43      	ldr	r3, [pc, #268]	@ (800149c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001394:	4a41      	ldr	r2, [pc, #260]	@ (800149c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001396:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800139a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800139c:	4b40      	ldr	r3, [pc, #256]	@ (80014a0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2232      	movs	r2, #50	@ 0x32
 80013a2:	fb02 f303 	mul.w	r3, r2, r3
 80013a6:	4a3f      	ldr	r2, [pc, #252]	@ (80014a4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80013a8:	fba2 2303 	umull	r2, r3, r2, r3
 80013ac:	0c9b      	lsrs	r3, r3, #18
 80013ae:	3301      	adds	r3, #1
 80013b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013b2:	e002      	b.n	80013ba <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	3b01      	subs	r3, #1
 80013b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013ba:	4b38      	ldr	r3, [pc, #224]	@ (800149c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013bc:	695b      	ldr	r3, [r3, #20]
 80013be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013c6:	d102      	bne.n	80013ce <HAL_PWREx_ControlVoltageScaling+0x6e>
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d1f2      	bne.n	80013b4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013ce:	4b33      	ldr	r3, [pc, #204]	@ (800149c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013d0:	695b      	ldr	r3, [r3, #20]
 80013d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013da:	d158      	bne.n	800148e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80013dc:	2303      	movs	r3, #3
 80013de:	e057      	b.n	8001490 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80013e0:	4b2e      	ldr	r3, [pc, #184]	@ (800149c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80013e6:	4a2d      	ldr	r2, [pc, #180]	@ (800149c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80013ec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80013f0:	e04d      	b.n	800148e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80013f8:	d141      	bne.n	800147e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80013fa:	4b28      	ldr	r3, [pc, #160]	@ (800149c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001402:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001406:	d131      	bne.n	800146c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001408:	4b24      	ldr	r3, [pc, #144]	@ (800149c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800140a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800140e:	4a23      	ldr	r2, [pc, #140]	@ (800149c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001410:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001414:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001418:	4b20      	ldr	r3, [pc, #128]	@ (800149c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001420:	4a1e      	ldr	r2, [pc, #120]	@ (800149c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001422:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001426:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001428:	4b1d      	ldr	r3, [pc, #116]	@ (80014a0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	2232      	movs	r2, #50	@ 0x32
 800142e:	fb02 f303 	mul.w	r3, r2, r3
 8001432:	4a1c      	ldr	r2, [pc, #112]	@ (80014a4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001434:	fba2 2303 	umull	r2, r3, r2, r3
 8001438:	0c9b      	lsrs	r3, r3, #18
 800143a:	3301      	adds	r3, #1
 800143c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800143e:	e002      	b.n	8001446 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	3b01      	subs	r3, #1
 8001444:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001446:	4b15      	ldr	r3, [pc, #84]	@ (800149c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001448:	695b      	ldr	r3, [r3, #20]
 800144a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800144e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001452:	d102      	bne.n	800145a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d1f2      	bne.n	8001440 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800145a:	4b10      	ldr	r3, [pc, #64]	@ (800149c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800145c:	695b      	ldr	r3, [r3, #20]
 800145e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001462:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001466:	d112      	bne.n	800148e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001468:	2303      	movs	r3, #3
 800146a:	e011      	b.n	8001490 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800146c:	4b0b      	ldr	r3, [pc, #44]	@ (800149c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800146e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001472:	4a0a      	ldr	r2, [pc, #40]	@ (800149c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001474:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001478:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800147c:	e007      	b.n	800148e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800147e:	4b07      	ldr	r3, [pc, #28]	@ (800149c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001486:	4a05      	ldr	r2, [pc, #20]	@ (800149c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001488:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800148c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800148e:	2300      	movs	r3, #0
}
 8001490:	4618      	mov	r0, r3
 8001492:	3714      	adds	r7, #20
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr
 800149c:	40007000 	.word	0x40007000
 80014a0:	20000004 	.word	0x20000004
 80014a4:	431bde83 	.word	0x431bde83

080014a8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80014ac:	4b05      	ldr	r3, [pc, #20]	@ (80014c4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	4a04      	ldr	r2, [pc, #16]	@ (80014c4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80014b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014b6:	6093      	str	r3, [r2, #8]
}
 80014b8:	bf00      	nop
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	40007000 	.word	0x40007000

080014c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b088      	sub	sp, #32
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d101      	bne.n	80014da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e2fe      	b.n	8001ad8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d075      	beq.n	80015d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014e6:	4b97      	ldr	r3, [pc, #604]	@ (8001744 <HAL_RCC_OscConfig+0x27c>)
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	f003 030c 	and.w	r3, r3, #12
 80014ee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014f0:	4b94      	ldr	r3, [pc, #592]	@ (8001744 <HAL_RCC_OscConfig+0x27c>)
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	f003 0303 	and.w	r3, r3, #3
 80014f8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	2b0c      	cmp	r3, #12
 80014fe:	d102      	bne.n	8001506 <HAL_RCC_OscConfig+0x3e>
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	2b03      	cmp	r3, #3
 8001504:	d002      	beq.n	800150c <HAL_RCC_OscConfig+0x44>
 8001506:	69bb      	ldr	r3, [r7, #24]
 8001508:	2b08      	cmp	r3, #8
 800150a:	d10b      	bne.n	8001524 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800150c:	4b8d      	ldr	r3, [pc, #564]	@ (8001744 <HAL_RCC_OscConfig+0x27c>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001514:	2b00      	cmp	r3, #0
 8001516:	d05b      	beq.n	80015d0 <HAL_RCC_OscConfig+0x108>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d157      	bne.n	80015d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	e2d9      	b.n	8001ad8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800152c:	d106      	bne.n	800153c <HAL_RCC_OscConfig+0x74>
 800152e:	4b85      	ldr	r3, [pc, #532]	@ (8001744 <HAL_RCC_OscConfig+0x27c>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a84      	ldr	r2, [pc, #528]	@ (8001744 <HAL_RCC_OscConfig+0x27c>)
 8001534:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001538:	6013      	str	r3, [r2, #0]
 800153a:	e01d      	b.n	8001578 <HAL_RCC_OscConfig+0xb0>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001544:	d10c      	bne.n	8001560 <HAL_RCC_OscConfig+0x98>
 8001546:	4b7f      	ldr	r3, [pc, #508]	@ (8001744 <HAL_RCC_OscConfig+0x27c>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a7e      	ldr	r2, [pc, #504]	@ (8001744 <HAL_RCC_OscConfig+0x27c>)
 800154c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001550:	6013      	str	r3, [r2, #0]
 8001552:	4b7c      	ldr	r3, [pc, #496]	@ (8001744 <HAL_RCC_OscConfig+0x27c>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a7b      	ldr	r2, [pc, #492]	@ (8001744 <HAL_RCC_OscConfig+0x27c>)
 8001558:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800155c:	6013      	str	r3, [r2, #0]
 800155e:	e00b      	b.n	8001578 <HAL_RCC_OscConfig+0xb0>
 8001560:	4b78      	ldr	r3, [pc, #480]	@ (8001744 <HAL_RCC_OscConfig+0x27c>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a77      	ldr	r2, [pc, #476]	@ (8001744 <HAL_RCC_OscConfig+0x27c>)
 8001566:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800156a:	6013      	str	r3, [r2, #0]
 800156c:	4b75      	ldr	r3, [pc, #468]	@ (8001744 <HAL_RCC_OscConfig+0x27c>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a74      	ldr	r2, [pc, #464]	@ (8001744 <HAL_RCC_OscConfig+0x27c>)
 8001572:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001576:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d013      	beq.n	80015a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001580:	f7ff fb74 	bl	8000c6c <HAL_GetTick>
 8001584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001586:	e008      	b.n	800159a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001588:	f7ff fb70 	bl	8000c6c <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	2b64      	cmp	r3, #100	@ 0x64
 8001594:	d901      	bls.n	800159a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e29e      	b.n	8001ad8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800159a:	4b6a      	ldr	r3, [pc, #424]	@ (8001744 <HAL_RCC_OscConfig+0x27c>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d0f0      	beq.n	8001588 <HAL_RCC_OscConfig+0xc0>
 80015a6:	e014      	b.n	80015d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015a8:	f7ff fb60 	bl	8000c6c <HAL_GetTick>
 80015ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015ae:	e008      	b.n	80015c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015b0:	f7ff fb5c 	bl	8000c6c <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	2b64      	cmp	r3, #100	@ 0x64
 80015bc:	d901      	bls.n	80015c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e28a      	b.n	8001ad8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015c2:	4b60      	ldr	r3, [pc, #384]	@ (8001744 <HAL_RCC_OscConfig+0x27c>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d1f0      	bne.n	80015b0 <HAL_RCC_OscConfig+0xe8>
 80015ce:	e000      	b.n	80015d2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 0302 	and.w	r3, r3, #2
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d075      	beq.n	80016ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015de:	4b59      	ldr	r3, [pc, #356]	@ (8001744 <HAL_RCC_OscConfig+0x27c>)
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	f003 030c 	and.w	r3, r3, #12
 80015e6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015e8:	4b56      	ldr	r3, [pc, #344]	@ (8001744 <HAL_RCC_OscConfig+0x27c>)
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	f003 0303 	and.w	r3, r3, #3
 80015f0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80015f2:	69bb      	ldr	r3, [r7, #24]
 80015f4:	2b0c      	cmp	r3, #12
 80015f6:	d102      	bne.n	80015fe <HAL_RCC_OscConfig+0x136>
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d002      	beq.n	8001604 <HAL_RCC_OscConfig+0x13c>
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	2b04      	cmp	r3, #4
 8001602:	d11f      	bne.n	8001644 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001604:	4b4f      	ldr	r3, [pc, #316]	@ (8001744 <HAL_RCC_OscConfig+0x27c>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800160c:	2b00      	cmp	r3, #0
 800160e:	d005      	beq.n	800161c <HAL_RCC_OscConfig+0x154>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d101      	bne.n	800161c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	e25d      	b.n	8001ad8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800161c:	4b49      	ldr	r3, [pc, #292]	@ (8001744 <HAL_RCC_OscConfig+0x27c>)
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	691b      	ldr	r3, [r3, #16]
 8001628:	061b      	lsls	r3, r3, #24
 800162a:	4946      	ldr	r1, [pc, #280]	@ (8001744 <HAL_RCC_OscConfig+0x27c>)
 800162c:	4313      	orrs	r3, r2
 800162e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001630:	4b45      	ldr	r3, [pc, #276]	@ (8001748 <HAL_RCC_OscConfig+0x280>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff facd 	bl	8000bd4 <HAL_InitTick>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d043      	beq.n	80016c8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e249      	b.n	8001ad8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d023      	beq.n	8001694 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800164c:	4b3d      	ldr	r3, [pc, #244]	@ (8001744 <HAL_RCC_OscConfig+0x27c>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a3c      	ldr	r2, [pc, #240]	@ (8001744 <HAL_RCC_OscConfig+0x27c>)
 8001652:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001656:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001658:	f7ff fb08 	bl	8000c6c <HAL_GetTick>
 800165c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800165e:	e008      	b.n	8001672 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001660:	f7ff fb04 	bl	8000c6c <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b02      	cmp	r3, #2
 800166c:	d901      	bls.n	8001672 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e232      	b.n	8001ad8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001672:	4b34      	ldr	r3, [pc, #208]	@ (8001744 <HAL_RCC_OscConfig+0x27c>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800167a:	2b00      	cmp	r3, #0
 800167c:	d0f0      	beq.n	8001660 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800167e:	4b31      	ldr	r3, [pc, #196]	@ (8001744 <HAL_RCC_OscConfig+0x27c>)
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	691b      	ldr	r3, [r3, #16]
 800168a:	061b      	lsls	r3, r3, #24
 800168c:	492d      	ldr	r1, [pc, #180]	@ (8001744 <HAL_RCC_OscConfig+0x27c>)
 800168e:	4313      	orrs	r3, r2
 8001690:	604b      	str	r3, [r1, #4]
 8001692:	e01a      	b.n	80016ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001694:	4b2b      	ldr	r3, [pc, #172]	@ (8001744 <HAL_RCC_OscConfig+0x27c>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a2a      	ldr	r2, [pc, #168]	@ (8001744 <HAL_RCC_OscConfig+0x27c>)
 800169a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800169e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a0:	f7ff fae4 	bl	8000c6c <HAL_GetTick>
 80016a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016a6:	e008      	b.n	80016ba <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016a8:	f7ff fae0 	bl	8000c6c <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d901      	bls.n	80016ba <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e20e      	b.n	8001ad8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016ba:	4b22      	ldr	r3, [pc, #136]	@ (8001744 <HAL_RCC_OscConfig+0x27c>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d1f0      	bne.n	80016a8 <HAL_RCC_OscConfig+0x1e0>
 80016c6:	e000      	b.n	80016ca <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016c8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0308 	and.w	r3, r3, #8
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d041      	beq.n	800175a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	695b      	ldr	r3, [r3, #20]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d01c      	beq.n	8001718 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016de:	4b19      	ldr	r3, [pc, #100]	@ (8001744 <HAL_RCC_OscConfig+0x27c>)
 80016e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016e4:	4a17      	ldr	r2, [pc, #92]	@ (8001744 <HAL_RCC_OscConfig+0x27c>)
 80016e6:	f043 0301 	orr.w	r3, r3, #1
 80016ea:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ee:	f7ff fabd 	bl	8000c6c <HAL_GetTick>
 80016f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016f4:	e008      	b.n	8001708 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016f6:	f7ff fab9 	bl	8000c6c <HAL_GetTick>
 80016fa:	4602      	mov	r2, r0
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	2b02      	cmp	r3, #2
 8001702:	d901      	bls.n	8001708 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001704:	2303      	movs	r3, #3
 8001706:	e1e7      	b.n	8001ad8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001708:	4b0e      	ldr	r3, [pc, #56]	@ (8001744 <HAL_RCC_OscConfig+0x27c>)
 800170a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800170e:	f003 0302 	and.w	r3, r3, #2
 8001712:	2b00      	cmp	r3, #0
 8001714:	d0ef      	beq.n	80016f6 <HAL_RCC_OscConfig+0x22e>
 8001716:	e020      	b.n	800175a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001718:	4b0a      	ldr	r3, [pc, #40]	@ (8001744 <HAL_RCC_OscConfig+0x27c>)
 800171a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800171e:	4a09      	ldr	r2, [pc, #36]	@ (8001744 <HAL_RCC_OscConfig+0x27c>)
 8001720:	f023 0301 	bic.w	r3, r3, #1
 8001724:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001728:	f7ff faa0 	bl	8000c6c <HAL_GetTick>
 800172c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800172e:	e00d      	b.n	800174c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001730:	f7ff fa9c 	bl	8000c6c <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	2b02      	cmp	r3, #2
 800173c:	d906      	bls.n	800174c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e1ca      	b.n	8001ad8 <HAL_RCC_OscConfig+0x610>
 8001742:	bf00      	nop
 8001744:	40021000 	.word	0x40021000
 8001748:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800174c:	4b8c      	ldr	r3, [pc, #560]	@ (8001980 <HAL_RCC_OscConfig+0x4b8>)
 800174e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001752:	f003 0302 	and.w	r3, r3, #2
 8001756:	2b00      	cmp	r3, #0
 8001758:	d1ea      	bne.n	8001730 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0304 	and.w	r3, r3, #4
 8001762:	2b00      	cmp	r3, #0
 8001764:	f000 80a6 	beq.w	80018b4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001768:	2300      	movs	r3, #0
 800176a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800176c:	4b84      	ldr	r3, [pc, #528]	@ (8001980 <HAL_RCC_OscConfig+0x4b8>)
 800176e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001770:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001774:	2b00      	cmp	r3, #0
 8001776:	d101      	bne.n	800177c <HAL_RCC_OscConfig+0x2b4>
 8001778:	2301      	movs	r3, #1
 800177a:	e000      	b.n	800177e <HAL_RCC_OscConfig+0x2b6>
 800177c:	2300      	movs	r3, #0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d00d      	beq.n	800179e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001782:	4b7f      	ldr	r3, [pc, #508]	@ (8001980 <HAL_RCC_OscConfig+0x4b8>)
 8001784:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001786:	4a7e      	ldr	r2, [pc, #504]	@ (8001980 <HAL_RCC_OscConfig+0x4b8>)
 8001788:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800178c:	6593      	str	r3, [r2, #88]	@ 0x58
 800178e:	4b7c      	ldr	r3, [pc, #496]	@ (8001980 <HAL_RCC_OscConfig+0x4b8>)
 8001790:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001792:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001796:	60fb      	str	r3, [r7, #12]
 8001798:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800179a:	2301      	movs	r3, #1
 800179c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800179e:	4b79      	ldr	r3, [pc, #484]	@ (8001984 <HAL_RCC_OscConfig+0x4bc>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d118      	bne.n	80017dc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80017aa:	4b76      	ldr	r3, [pc, #472]	@ (8001984 <HAL_RCC_OscConfig+0x4bc>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a75      	ldr	r2, [pc, #468]	@ (8001984 <HAL_RCC_OscConfig+0x4bc>)
 80017b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017b6:	f7ff fa59 	bl	8000c6c <HAL_GetTick>
 80017ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017bc:	e008      	b.n	80017d0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017be:	f7ff fa55 	bl	8000c6c <HAL_GetTick>
 80017c2:	4602      	mov	r2, r0
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d901      	bls.n	80017d0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80017cc:	2303      	movs	r3, #3
 80017ce:	e183      	b.n	8001ad8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017d0:	4b6c      	ldr	r3, [pc, #432]	@ (8001984 <HAL_RCC_OscConfig+0x4bc>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d0f0      	beq.n	80017be <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d108      	bne.n	80017f6 <HAL_RCC_OscConfig+0x32e>
 80017e4:	4b66      	ldr	r3, [pc, #408]	@ (8001980 <HAL_RCC_OscConfig+0x4b8>)
 80017e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017ea:	4a65      	ldr	r2, [pc, #404]	@ (8001980 <HAL_RCC_OscConfig+0x4b8>)
 80017ec:	f043 0301 	orr.w	r3, r3, #1
 80017f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017f4:	e024      	b.n	8001840 <HAL_RCC_OscConfig+0x378>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	2b05      	cmp	r3, #5
 80017fc:	d110      	bne.n	8001820 <HAL_RCC_OscConfig+0x358>
 80017fe:	4b60      	ldr	r3, [pc, #384]	@ (8001980 <HAL_RCC_OscConfig+0x4b8>)
 8001800:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001804:	4a5e      	ldr	r2, [pc, #376]	@ (8001980 <HAL_RCC_OscConfig+0x4b8>)
 8001806:	f043 0304 	orr.w	r3, r3, #4
 800180a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800180e:	4b5c      	ldr	r3, [pc, #368]	@ (8001980 <HAL_RCC_OscConfig+0x4b8>)
 8001810:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001814:	4a5a      	ldr	r2, [pc, #360]	@ (8001980 <HAL_RCC_OscConfig+0x4b8>)
 8001816:	f043 0301 	orr.w	r3, r3, #1
 800181a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800181e:	e00f      	b.n	8001840 <HAL_RCC_OscConfig+0x378>
 8001820:	4b57      	ldr	r3, [pc, #348]	@ (8001980 <HAL_RCC_OscConfig+0x4b8>)
 8001822:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001826:	4a56      	ldr	r2, [pc, #344]	@ (8001980 <HAL_RCC_OscConfig+0x4b8>)
 8001828:	f023 0301 	bic.w	r3, r3, #1
 800182c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001830:	4b53      	ldr	r3, [pc, #332]	@ (8001980 <HAL_RCC_OscConfig+0x4b8>)
 8001832:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001836:	4a52      	ldr	r2, [pc, #328]	@ (8001980 <HAL_RCC_OscConfig+0x4b8>)
 8001838:	f023 0304 	bic.w	r3, r3, #4
 800183c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d016      	beq.n	8001876 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001848:	f7ff fa10 	bl	8000c6c <HAL_GetTick>
 800184c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800184e:	e00a      	b.n	8001866 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001850:	f7ff fa0c 	bl	8000c6c <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800185e:	4293      	cmp	r3, r2
 8001860:	d901      	bls.n	8001866 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	e138      	b.n	8001ad8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001866:	4b46      	ldr	r3, [pc, #280]	@ (8001980 <HAL_RCC_OscConfig+0x4b8>)
 8001868:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800186c:	f003 0302 	and.w	r3, r3, #2
 8001870:	2b00      	cmp	r3, #0
 8001872:	d0ed      	beq.n	8001850 <HAL_RCC_OscConfig+0x388>
 8001874:	e015      	b.n	80018a2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001876:	f7ff f9f9 	bl	8000c6c <HAL_GetTick>
 800187a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800187c:	e00a      	b.n	8001894 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800187e:	f7ff f9f5 	bl	8000c6c <HAL_GetTick>
 8001882:	4602      	mov	r2, r0
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	f241 3288 	movw	r2, #5000	@ 0x1388
 800188c:	4293      	cmp	r3, r2
 800188e:	d901      	bls.n	8001894 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001890:	2303      	movs	r3, #3
 8001892:	e121      	b.n	8001ad8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001894:	4b3a      	ldr	r3, [pc, #232]	@ (8001980 <HAL_RCC_OscConfig+0x4b8>)
 8001896:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d1ed      	bne.n	800187e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80018a2:	7ffb      	ldrb	r3, [r7, #31]
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d105      	bne.n	80018b4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018a8:	4b35      	ldr	r3, [pc, #212]	@ (8001980 <HAL_RCC_OscConfig+0x4b8>)
 80018aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018ac:	4a34      	ldr	r2, [pc, #208]	@ (8001980 <HAL_RCC_OscConfig+0x4b8>)
 80018ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80018b2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0320 	and.w	r3, r3, #32
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d03c      	beq.n	800193a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	699b      	ldr	r3, [r3, #24]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d01c      	beq.n	8001902 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80018c8:	4b2d      	ldr	r3, [pc, #180]	@ (8001980 <HAL_RCC_OscConfig+0x4b8>)
 80018ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80018ce:	4a2c      	ldr	r2, [pc, #176]	@ (8001980 <HAL_RCC_OscConfig+0x4b8>)
 80018d0:	f043 0301 	orr.w	r3, r3, #1
 80018d4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018d8:	f7ff f9c8 	bl	8000c6c <HAL_GetTick>
 80018dc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80018de:	e008      	b.n	80018f2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018e0:	f7ff f9c4 	bl	8000c6c <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e0f2      	b.n	8001ad8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80018f2:	4b23      	ldr	r3, [pc, #140]	@ (8001980 <HAL_RCC_OscConfig+0x4b8>)
 80018f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80018f8:	f003 0302 	and.w	r3, r3, #2
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d0ef      	beq.n	80018e0 <HAL_RCC_OscConfig+0x418>
 8001900:	e01b      	b.n	800193a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001902:	4b1f      	ldr	r3, [pc, #124]	@ (8001980 <HAL_RCC_OscConfig+0x4b8>)
 8001904:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001908:	4a1d      	ldr	r2, [pc, #116]	@ (8001980 <HAL_RCC_OscConfig+0x4b8>)
 800190a:	f023 0301 	bic.w	r3, r3, #1
 800190e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001912:	f7ff f9ab 	bl	8000c6c <HAL_GetTick>
 8001916:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001918:	e008      	b.n	800192c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800191a:	f7ff f9a7 	bl	8000c6c <HAL_GetTick>
 800191e:	4602      	mov	r2, r0
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	2b02      	cmp	r3, #2
 8001926:	d901      	bls.n	800192c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001928:	2303      	movs	r3, #3
 800192a:	e0d5      	b.n	8001ad8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800192c:	4b14      	ldr	r3, [pc, #80]	@ (8001980 <HAL_RCC_OscConfig+0x4b8>)
 800192e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001932:	f003 0302 	and.w	r3, r3, #2
 8001936:	2b00      	cmp	r3, #0
 8001938:	d1ef      	bne.n	800191a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	69db      	ldr	r3, [r3, #28]
 800193e:	2b00      	cmp	r3, #0
 8001940:	f000 80c9 	beq.w	8001ad6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001944:	4b0e      	ldr	r3, [pc, #56]	@ (8001980 <HAL_RCC_OscConfig+0x4b8>)
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	f003 030c 	and.w	r3, r3, #12
 800194c:	2b0c      	cmp	r3, #12
 800194e:	f000 8083 	beq.w	8001a58 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	69db      	ldr	r3, [r3, #28]
 8001956:	2b02      	cmp	r3, #2
 8001958:	d15e      	bne.n	8001a18 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800195a:	4b09      	ldr	r3, [pc, #36]	@ (8001980 <HAL_RCC_OscConfig+0x4b8>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a08      	ldr	r2, [pc, #32]	@ (8001980 <HAL_RCC_OscConfig+0x4b8>)
 8001960:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001964:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001966:	f7ff f981 	bl	8000c6c <HAL_GetTick>
 800196a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800196c:	e00c      	b.n	8001988 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800196e:	f7ff f97d 	bl	8000c6c <HAL_GetTick>
 8001972:	4602      	mov	r2, r0
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	2b02      	cmp	r3, #2
 800197a:	d905      	bls.n	8001988 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800197c:	2303      	movs	r3, #3
 800197e:	e0ab      	b.n	8001ad8 <HAL_RCC_OscConfig+0x610>
 8001980:	40021000 	.word	0x40021000
 8001984:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001988:	4b55      	ldr	r3, [pc, #340]	@ (8001ae0 <HAL_RCC_OscConfig+0x618>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d1ec      	bne.n	800196e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001994:	4b52      	ldr	r3, [pc, #328]	@ (8001ae0 <HAL_RCC_OscConfig+0x618>)
 8001996:	68da      	ldr	r2, [r3, #12]
 8001998:	4b52      	ldr	r3, [pc, #328]	@ (8001ae4 <HAL_RCC_OscConfig+0x61c>)
 800199a:	4013      	ands	r3, r2
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	6a11      	ldr	r1, [r2, #32]
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80019a4:	3a01      	subs	r2, #1
 80019a6:	0112      	lsls	r2, r2, #4
 80019a8:	4311      	orrs	r1, r2
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80019ae:	0212      	lsls	r2, r2, #8
 80019b0:	4311      	orrs	r1, r2
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80019b6:	0852      	lsrs	r2, r2, #1
 80019b8:	3a01      	subs	r2, #1
 80019ba:	0552      	lsls	r2, r2, #21
 80019bc:	4311      	orrs	r1, r2
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80019c2:	0852      	lsrs	r2, r2, #1
 80019c4:	3a01      	subs	r2, #1
 80019c6:	0652      	lsls	r2, r2, #25
 80019c8:	4311      	orrs	r1, r2
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80019ce:	06d2      	lsls	r2, r2, #27
 80019d0:	430a      	orrs	r2, r1
 80019d2:	4943      	ldr	r1, [pc, #268]	@ (8001ae0 <HAL_RCC_OscConfig+0x618>)
 80019d4:	4313      	orrs	r3, r2
 80019d6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019d8:	4b41      	ldr	r3, [pc, #260]	@ (8001ae0 <HAL_RCC_OscConfig+0x618>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a40      	ldr	r2, [pc, #256]	@ (8001ae0 <HAL_RCC_OscConfig+0x618>)
 80019de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019e2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019e4:	4b3e      	ldr	r3, [pc, #248]	@ (8001ae0 <HAL_RCC_OscConfig+0x618>)
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	4a3d      	ldr	r2, [pc, #244]	@ (8001ae0 <HAL_RCC_OscConfig+0x618>)
 80019ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019ee:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f0:	f7ff f93c 	bl	8000c6c <HAL_GetTick>
 80019f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019f6:	e008      	b.n	8001a0a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019f8:	f7ff f938 	bl	8000c6c <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e066      	b.n	8001ad8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a0a:	4b35      	ldr	r3, [pc, #212]	@ (8001ae0 <HAL_RCC_OscConfig+0x618>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d0f0      	beq.n	80019f8 <HAL_RCC_OscConfig+0x530>
 8001a16:	e05e      	b.n	8001ad6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a18:	4b31      	ldr	r3, [pc, #196]	@ (8001ae0 <HAL_RCC_OscConfig+0x618>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a30      	ldr	r2, [pc, #192]	@ (8001ae0 <HAL_RCC_OscConfig+0x618>)
 8001a1e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a24:	f7ff f922 	bl	8000c6c <HAL_GetTick>
 8001a28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a2a:	e008      	b.n	8001a3e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a2c:	f7ff f91e 	bl	8000c6c <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d901      	bls.n	8001a3e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e04c      	b.n	8001ad8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a3e:	4b28      	ldr	r3, [pc, #160]	@ (8001ae0 <HAL_RCC_OscConfig+0x618>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d1f0      	bne.n	8001a2c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001a4a:	4b25      	ldr	r3, [pc, #148]	@ (8001ae0 <HAL_RCC_OscConfig+0x618>)
 8001a4c:	68da      	ldr	r2, [r3, #12]
 8001a4e:	4924      	ldr	r1, [pc, #144]	@ (8001ae0 <HAL_RCC_OscConfig+0x618>)
 8001a50:	4b25      	ldr	r3, [pc, #148]	@ (8001ae8 <HAL_RCC_OscConfig+0x620>)
 8001a52:	4013      	ands	r3, r2
 8001a54:	60cb      	str	r3, [r1, #12]
 8001a56:	e03e      	b.n	8001ad6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	69db      	ldr	r3, [r3, #28]
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d101      	bne.n	8001a64 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e039      	b.n	8001ad8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001a64:	4b1e      	ldr	r3, [pc, #120]	@ (8001ae0 <HAL_RCC_OscConfig+0x618>)
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	f003 0203 	and.w	r2, r3, #3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6a1b      	ldr	r3, [r3, #32]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d12c      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a82:	3b01      	subs	r3, #1
 8001a84:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d123      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a94:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d11b      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aa4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d113      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab4:	085b      	lsrs	r3, r3, #1
 8001ab6:	3b01      	subs	r3, #1
 8001ab8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d109      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ac8:	085b      	lsrs	r3, r3, #1
 8001aca:	3b01      	subs	r3, #1
 8001acc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d001      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e000      	b.n	8001ad8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001ad6:	2300      	movs	r3, #0
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3720      	adds	r7, #32
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	40021000 	.word	0x40021000
 8001ae4:	019f800c 	.word	0x019f800c
 8001ae8:	feeefffc 	.word	0xfeeefffc

08001aec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b086      	sub	sp, #24
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001af6:	2300      	movs	r3, #0
 8001af8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d101      	bne.n	8001b04 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e11e      	b.n	8001d42 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b04:	4b91      	ldr	r3, [pc, #580]	@ (8001d4c <HAL_RCC_ClockConfig+0x260>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 030f 	and.w	r3, r3, #15
 8001b0c:	683a      	ldr	r2, [r7, #0]
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d910      	bls.n	8001b34 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b12:	4b8e      	ldr	r3, [pc, #568]	@ (8001d4c <HAL_RCC_ClockConfig+0x260>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f023 020f 	bic.w	r2, r3, #15
 8001b1a:	498c      	ldr	r1, [pc, #560]	@ (8001d4c <HAL_RCC_ClockConfig+0x260>)
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b22:	4b8a      	ldr	r3, [pc, #552]	@ (8001d4c <HAL_RCC_ClockConfig+0x260>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 030f 	and.w	r3, r3, #15
 8001b2a:	683a      	ldr	r2, [r7, #0]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d001      	beq.n	8001b34 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e106      	b.n	8001d42 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 0301 	and.w	r3, r3, #1
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d073      	beq.n	8001c28 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	2b03      	cmp	r3, #3
 8001b46:	d129      	bne.n	8001b9c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b48:	4b81      	ldr	r3, [pc, #516]	@ (8001d50 <HAL_RCC_ClockConfig+0x264>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d101      	bne.n	8001b58 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e0f4      	b.n	8001d42 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001b58:	f000 f99e 	bl	8001e98 <RCC_GetSysClockFreqFromPLLSource>
 8001b5c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	4a7c      	ldr	r2, [pc, #496]	@ (8001d54 <HAL_RCC_ClockConfig+0x268>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d93f      	bls.n	8001be6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001b66:	4b7a      	ldr	r3, [pc, #488]	@ (8001d50 <HAL_RCC_ClockConfig+0x264>)
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d009      	beq.n	8001b86 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d033      	beq.n	8001be6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d12f      	bne.n	8001be6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001b86:	4b72      	ldr	r3, [pc, #456]	@ (8001d50 <HAL_RCC_ClockConfig+0x264>)
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001b8e:	4a70      	ldr	r2, [pc, #448]	@ (8001d50 <HAL_RCC_ClockConfig+0x264>)
 8001b90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b94:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001b96:	2380      	movs	r3, #128	@ 0x80
 8001b98:	617b      	str	r3, [r7, #20]
 8001b9a:	e024      	b.n	8001be6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d107      	bne.n	8001bb4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ba4:	4b6a      	ldr	r3, [pc, #424]	@ (8001d50 <HAL_RCC_ClockConfig+0x264>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d109      	bne.n	8001bc4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e0c6      	b.n	8001d42 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bb4:	4b66      	ldr	r3, [pc, #408]	@ (8001d50 <HAL_RCC_ClockConfig+0x264>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d101      	bne.n	8001bc4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e0be      	b.n	8001d42 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001bc4:	f000 f8ce 	bl	8001d64 <HAL_RCC_GetSysClockFreq>
 8001bc8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	4a61      	ldr	r2, [pc, #388]	@ (8001d54 <HAL_RCC_ClockConfig+0x268>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d909      	bls.n	8001be6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001bd2:	4b5f      	ldr	r3, [pc, #380]	@ (8001d50 <HAL_RCC_ClockConfig+0x264>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001bda:	4a5d      	ldr	r2, [pc, #372]	@ (8001d50 <HAL_RCC_ClockConfig+0x264>)
 8001bdc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001be0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001be2:	2380      	movs	r3, #128	@ 0x80
 8001be4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001be6:	4b5a      	ldr	r3, [pc, #360]	@ (8001d50 <HAL_RCC_ClockConfig+0x264>)
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	f023 0203 	bic.w	r2, r3, #3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	4957      	ldr	r1, [pc, #348]	@ (8001d50 <HAL_RCC_ClockConfig+0x264>)
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001bf8:	f7ff f838 	bl	8000c6c <HAL_GetTick>
 8001bfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bfe:	e00a      	b.n	8001c16 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c00:	f7ff f834 	bl	8000c6c <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e095      	b.n	8001d42 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c16:	4b4e      	ldr	r3, [pc, #312]	@ (8001d50 <HAL_RCC_ClockConfig+0x264>)
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	f003 020c 	and.w	r2, r3, #12
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d1eb      	bne.n	8001c00 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0302 	and.w	r3, r3, #2
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d023      	beq.n	8001c7c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0304 	and.w	r3, r3, #4
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d005      	beq.n	8001c4c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c40:	4b43      	ldr	r3, [pc, #268]	@ (8001d50 <HAL_RCC_ClockConfig+0x264>)
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	4a42      	ldr	r2, [pc, #264]	@ (8001d50 <HAL_RCC_ClockConfig+0x264>)
 8001c46:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001c4a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0308 	and.w	r3, r3, #8
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d007      	beq.n	8001c68 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001c58:	4b3d      	ldr	r3, [pc, #244]	@ (8001d50 <HAL_RCC_ClockConfig+0x264>)
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001c60:	4a3b      	ldr	r2, [pc, #236]	@ (8001d50 <HAL_RCC_ClockConfig+0x264>)
 8001c62:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001c66:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c68:	4b39      	ldr	r3, [pc, #228]	@ (8001d50 <HAL_RCC_ClockConfig+0x264>)
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	4936      	ldr	r1, [pc, #216]	@ (8001d50 <HAL_RCC_ClockConfig+0x264>)
 8001c76:	4313      	orrs	r3, r2
 8001c78:	608b      	str	r3, [r1, #8]
 8001c7a:	e008      	b.n	8001c8e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	2b80      	cmp	r3, #128	@ 0x80
 8001c80:	d105      	bne.n	8001c8e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001c82:	4b33      	ldr	r3, [pc, #204]	@ (8001d50 <HAL_RCC_ClockConfig+0x264>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	4a32      	ldr	r2, [pc, #200]	@ (8001d50 <HAL_RCC_ClockConfig+0x264>)
 8001c88:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001c8c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c8e:	4b2f      	ldr	r3, [pc, #188]	@ (8001d4c <HAL_RCC_ClockConfig+0x260>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 030f 	and.w	r3, r3, #15
 8001c96:	683a      	ldr	r2, [r7, #0]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d21d      	bcs.n	8001cd8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c9c:	4b2b      	ldr	r3, [pc, #172]	@ (8001d4c <HAL_RCC_ClockConfig+0x260>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f023 020f 	bic.w	r2, r3, #15
 8001ca4:	4929      	ldr	r1, [pc, #164]	@ (8001d4c <HAL_RCC_ClockConfig+0x260>)
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001cac:	f7fe ffde 	bl	8000c6c <HAL_GetTick>
 8001cb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cb2:	e00a      	b.n	8001cca <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cb4:	f7fe ffda 	bl	8000c6c <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d901      	bls.n	8001cca <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e03b      	b.n	8001d42 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cca:	4b20      	ldr	r3, [pc, #128]	@ (8001d4c <HAL_RCC_ClockConfig+0x260>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 030f 	and.w	r3, r3, #15
 8001cd2:	683a      	ldr	r2, [r7, #0]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d1ed      	bne.n	8001cb4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0304 	and.w	r3, r3, #4
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d008      	beq.n	8001cf6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ce4:	4b1a      	ldr	r3, [pc, #104]	@ (8001d50 <HAL_RCC_ClockConfig+0x264>)
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	4917      	ldr	r1, [pc, #92]	@ (8001d50 <HAL_RCC_ClockConfig+0x264>)
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0308 	and.w	r3, r3, #8
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d009      	beq.n	8001d16 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d02:	4b13      	ldr	r3, [pc, #76]	@ (8001d50 <HAL_RCC_ClockConfig+0x264>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	691b      	ldr	r3, [r3, #16]
 8001d0e:	00db      	lsls	r3, r3, #3
 8001d10:	490f      	ldr	r1, [pc, #60]	@ (8001d50 <HAL_RCC_ClockConfig+0x264>)
 8001d12:	4313      	orrs	r3, r2
 8001d14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d16:	f000 f825 	bl	8001d64 <HAL_RCC_GetSysClockFreq>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	4b0c      	ldr	r3, [pc, #48]	@ (8001d50 <HAL_RCC_ClockConfig+0x264>)
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	091b      	lsrs	r3, r3, #4
 8001d22:	f003 030f 	and.w	r3, r3, #15
 8001d26:	490c      	ldr	r1, [pc, #48]	@ (8001d58 <HAL_RCC_ClockConfig+0x26c>)
 8001d28:	5ccb      	ldrb	r3, [r1, r3]
 8001d2a:	f003 031f 	and.w	r3, r3, #31
 8001d2e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d32:	4a0a      	ldr	r2, [pc, #40]	@ (8001d5c <HAL_RCC_ClockConfig+0x270>)
 8001d34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001d36:	4b0a      	ldr	r3, [pc, #40]	@ (8001d60 <HAL_RCC_ClockConfig+0x274>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7fe ff4a 	bl	8000bd4 <HAL_InitTick>
 8001d40:	4603      	mov	r3, r0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3718      	adds	r7, #24
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	40022000 	.word	0x40022000
 8001d50:	40021000 	.word	0x40021000
 8001d54:	04c4b400 	.word	0x04c4b400
 8001d58:	08003b5c 	.word	0x08003b5c
 8001d5c:	20000004 	.word	0x20000004
 8001d60:	20000008 	.word	0x20000008

08001d64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b087      	sub	sp, #28
 8001d68:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001d6a:	4b2c      	ldr	r3, [pc, #176]	@ (8001e1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f003 030c 	and.w	r3, r3, #12
 8001d72:	2b04      	cmp	r3, #4
 8001d74:	d102      	bne.n	8001d7c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d76:	4b2a      	ldr	r3, [pc, #168]	@ (8001e20 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d78:	613b      	str	r3, [r7, #16]
 8001d7a:	e047      	b.n	8001e0c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001d7c:	4b27      	ldr	r3, [pc, #156]	@ (8001e1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	f003 030c 	and.w	r3, r3, #12
 8001d84:	2b08      	cmp	r3, #8
 8001d86:	d102      	bne.n	8001d8e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d88:	4b26      	ldr	r3, [pc, #152]	@ (8001e24 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d8a:	613b      	str	r3, [r7, #16]
 8001d8c:	e03e      	b.n	8001e0c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001d8e:	4b23      	ldr	r3, [pc, #140]	@ (8001e1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	f003 030c 	and.w	r3, r3, #12
 8001d96:	2b0c      	cmp	r3, #12
 8001d98:	d136      	bne.n	8001e08 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d9a:	4b20      	ldr	r3, [pc, #128]	@ (8001e1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d9c:	68db      	ldr	r3, [r3, #12]
 8001d9e:	f003 0303 	and.w	r3, r3, #3
 8001da2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001da4:	4b1d      	ldr	r3, [pc, #116]	@ (8001e1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	091b      	lsrs	r3, r3, #4
 8001daa:	f003 030f 	and.w	r3, r3, #15
 8001dae:	3301      	adds	r3, #1
 8001db0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2b03      	cmp	r3, #3
 8001db6:	d10c      	bne.n	8001dd2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001db8:	4a1a      	ldr	r2, [pc, #104]	@ (8001e24 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc0:	4a16      	ldr	r2, [pc, #88]	@ (8001e1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dc2:	68d2      	ldr	r2, [r2, #12]
 8001dc4:	0a12      	lsrs	r2, r2, #8
 8001dc6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001dca:	fb02 f303 	mul.w	r3, r2, r3
 8001dce:	617b      	str	r3, [r7, #20]
      break;
 8001dd0:	e00c      	b.n	8001dec <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001dd2:	4a13      	ldr	r2, [pc, #76]	@ (8001e20 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dda:	4a10      	ldr	r2, [pc, #64]	@ (8001e1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ddc:	68d2      	ldr	r2, [r2, #12]
 8001dde:	0a12      	lsrs	r2, r2, #8
 8001de0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001de4:	fb02 f303 	mul.w	r3, r2, r3
 8001de8:	617b      	str	r3, [r7, #20]
      break;
 8001dea:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001dec:	4b0b      	ldr	r3, [pc, #44]	@ (8001e1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	0e5b      	lsrs	r3, r3, #25
 8001df2:	f003 0303 	and.w	r3, r3, #3
 8001df6:	3301      	adds	r3, #1
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001dfc:	697a      	ldr	r2, [r7, #20]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e04:	613b      	str	r3, [r7, #16]
 8001e06:	e001      	b.n	8001e0c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001e0c:	693b      	ldr	r3, [r7, #16]
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	371c      	adds	r7, #28
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	40021000 	.word	0x40021000
 8001e20:	00f42400 	.word	0x00f42400
 8001e24:	016e3600 	.word	0x016e3600

08001e28 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e2c:	4b03      	ldr	r3, [pc, #12]	@ (8001e3c <HAL_RCC_GetHCLKFreq+0x14>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	20000004 	.word	0x20000004

08001e40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001e44:	f7ff fff0 	bl	8001e28 <HAL_RCC_GetHCLKFreq>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	4b06      	ldr	r3, [pc, #24]	@ (8001e64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	0a1b      	lsrs	r3, r3, #8
 8001e50:	f003 0307 	and.w	r3, r3, #7
 8001e54:	4904      	ldr	r1, [pc, #16]	@ (8001e68 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e56:	5ccb      	ldrb	r3, [r1, r3]
 8001e58:	f003 031f 	and.w	r3, r3, #31
 8001e5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	40021000 	.word	0x40021000
 8001e68:	08003b6c 	.word	0x08003b6c

08001e6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001e70:	f7ff ffda 	bl	8001e28 <HAL_RCC_GetHCLKFreq>
 8001e74:	4602      	mov	r2, r0
 8001e76:	4b06      	ldr	r3, [pc, #24]	@ (8001e90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	0adb      	lsrs	r3, r3, #11
 8001e7c:	f003 0307 	and.w	r3, r3, #7
 8001e80:	4904      	ldr	r1, [pc, #16]	@ (8001e94 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e82:	5ccb      	ldrb	r3, [r1, r3]
 8001e84:	f003 031f 	and.w	r3, r3, #31
 8001e88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	40021000 	.word	0x40021000
 8001e94:	08003b6c 	.word	0x08003b6c

08001e98 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b087      	sub	sp, #28
 8001e9c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e9e:	4b1e      	ldr	r3, [pc, #120]	@ (8001f18 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	f003 0303 	and.w	r3, r3, #3
 8001ea6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ea8:	4b1b      	ldr	r3, [pc, #108]	@ (8001f18 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	091b      	lsrs	r3, r3, #4
 8001eae:	f003 030f 	and.w	r3, r3, #15
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	2b03      	cmp	r3, #3
 8001eba:	d10c      	bne.n	8001ed6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ebc:	4a17      	ldr	r2, [pc, #92]	@ (8001f1c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ec4:	4a14      	ldr	r2, [pc, #80]	@ (8001f18 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001ec6:	68d2      	ldr	r2, [r2, #12]
 8001ec8:	0a12      	lsrs	r2, r2, #8
 8001eca:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001ece:	fb02 f303 	mul.w	r3, r2, r3
 8001ed2:	617b      	str	r3, [r7, #20]
    break;
 8001ed4:	e00c      	b.n	8001ef0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ed6:	4a12      	ldr	r2, [pc, #72]	@ (8001f20 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ede:	4a0e      	ldr	r2, [pc, #56]	@ (8001f18 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001ee0:	68d2      	ldr	r2, [r2, #12]
 8001ee2:	0a12      	lsrs	r2, r2, #8
 8001ee4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001ee8:	fb02 f303 	mul.w	r3, r2, r3
 8001eec:	617b      	str	r3, [r7, #20]
    break;
 8001eee:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ef0:	4b09      	ldr	r3, [pc, #36]	@ (8001f18 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	0e5b      	lsrs	r3, r3, #25
 8001ef6:	f003 0303 	and.w	r3, r3, #3
 8001efa:	3301      	adds	r3, #1
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001f00:	697a      	ldr	r2, [r7, #20]
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f08:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001f0a:	687b      	ldr	r3, [r7, #4]
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	371c      	adds	r7, #28
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	016e3600 	.word	0x016e3600
 8001f20:	00f42400 	.word	0x00f42400

08001f24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b086      	sub	sp, #24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f30:	2300      	movs	r3, #0
 8001f32:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	f000 8098 	beq.w	8002072 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f42:	2300      	movs	r3, #0
 8001f44:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f46:	4b43      	ldr	r3, [pc, #268]	@ (8002054 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d10d      	bne.n	8001f6e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f52:	4b40      	ldr	r3, [pc, #256]	@ (8002054 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f56:	4a3f      	ldr	r2, [pc, #252]	@ (8002054 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f5c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f5e:	4b3d      	ldr	r3, [pc, #244]	@ (8002054 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f66:	60bb      	str	r3, [r7, #8]
 8001f68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f6e:	4b3a      	ldr	r3, [pc, #232]	@ (8002058 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a39      	ldr	r2, [pc, #228]	@ (8002058 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001f74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f78:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f7a:	f7fe fe77 	bl	8000c6c <HAL_GetTick>
 8001f7e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f80:	e009      	b.n	8001f96 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f82:	f7fe fe73 	bl	8000c6c <HAL_GetTick>
 8001f86:	4602      	mov	r2, r0
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d902      	bls.n	8001f96 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001f90:	2303      	movs	r3, #3
 8001f92:	74fb      	strb	r3, [r7, #19]
        break;
 8001f94:	e005      	b.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f96:	4b30      	ldr	r3, [pc, #192]	@ (8002058 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d0ef      	beq.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001fa2:	7cfb      	ldrb	r3, [r7, #19]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d159      	bne.n	800205c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001fa8:	4b2a      	ldr	r3, [pc, #168]	@ (8002054 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001fb2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d01e      	beq.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fbe:	697a      	ldr	r2, [r7, #20]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d019      	beq.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001fc4:	4b23      	ldr	r3, [pc, #140]	@ (8002054 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001fce:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001fd0:	4b20      	ldr	r3, [pc, #128]	@ (8002054 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fd6:	4a1f      	ldr	r2, [pc, #124]	@ (8002054 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fdc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001fe0:	4b1c      	ldr	r3, [pc, #112]	@ (8002054 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fe6:	4a1b      	ldr	r2, [pc, #108]	@ (8002054 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fe8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001ff0:	4a18      	ldr	r2, [pc, #96]	@ (8002054 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d016      	beq.n	8002030 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002002:	f7fe fe33 	bl	8000c6c <HAL_GetTick>
 8002006:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002008:	e00b      	b.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800200a:	f7fe fe2f 	bl	8000c6c <HAL_GetTick>
 800200e:	4602      	mov	r2, r0
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002018:	4293      	cmp	r3, r2
 800201a:	d902      	bls.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800201c:	2303      	movs	r3, #3
 800201e:	74fb      	strb	r3, [r7, #19]
            break;
 8002020:	e006      	b.n	8002030 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002022:	4b0c      	ldr	r3, [pc, #48]	@ (8002054 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002024:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002028:	f003 0302 	and.w	r3, r3, #2
 800202c:	2b00      	cmp	r3, #0
 800202e:	d0ec      	beq.n	800200a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002030:	7cfb      	ldrb	r3, [r7, #19]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d10b      	bne.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002036:	4b07      	ldr	r3, [pc, #28]	@ (8002054 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002038:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800203c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002044:	4903      	ldr	r1, [pc, #12]	@ (8002054 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002046:	4313      	orrs	r3, r2
 8002048:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800204c:	e008      	b.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800204e:	7cfb      	ldrb	r3, [r7, #19]
 8002050:	74bb      	strb	r3, [r7, #18]
 8002052:	e005      	b.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002054:	40021000 	.word	0x40021000
 8002058:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800205c:	7cfb      	ldrb	r3, [r7, #19]
 800205e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002060:	7c7b      	ldrb	r3, [r7, #17]
 8002062:	2b01      	cmp	r3, #1
 8002064:	d105      	bne.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002066:	4ba7      	ldr	r3, [pc, #668]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002068:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800206a:	4aa6      	ldr	r2, [pc, #664]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800206c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002070:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0301 	and.w	r3, r3, #1
 800207a:	2b00      	cmp	r3, #0
 800207c:	d00a      	beq.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800207e:	4ba1      	ldr	r3, [pc, #644]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002080:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002084:	f023 0203 	bic.w	r2, r3, #3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	499d      	ldr	r1, [pc, #628]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800208e:	4313      	orrs	r3, r2
 8002090:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0302 	and.w	r3, r3, #2
 800209c:	2b00      	cmp	r3, #0
 800209e:	d00a      	beq.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80020a0:	4b98      	ldr	r3, [pc, #608]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020a6:	f023 020c 	bic.w	r2, r3, #12
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	4995      	ldr	r1, [pc, #596]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020b0:	4313      	orrs	r3, r2
 80020b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0304 	and.w	r3, r3, #4
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d00a      	beq.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80020c2:	4b90      	ldr	r3, [pc, #576]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020c8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	498c      	ldr	r1, [pc, #560]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020d2:	4313      	orrs	r3, r2
 80020d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0308 	and.w	r3, r3, #8
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d00a      	beq.n	80020fa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80020e4:	4b87      	ldr	r3, [pc, #540]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020ea:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	4984      	ldr	r1, [pc, #528]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020f4:	4313      	orrs	r3, r2
 80020f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0310 	and.w	r3, r3, #16
 8002102:	2b00      	cmp	r3, #0
 8002104:	d00a      	beq.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002106:	4b7f      	ldr	r3, [pc, #508]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002108:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800210c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	695b      	ldr	r3, [r3, #20]
 8002114:	497b      	ldr	r1, [pc, #492]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002116:	4313      	orrs	r3, r2
 8002118:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0320 	and.w	r3, r3, #32
 8002124:	2b00      	cmp	r3, #0
 8002126:	d00a      	beq.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002128:	4b76      	ldr	r3, [pc, #472]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800212a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800212e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	699b      	ldr	r3, [r3, #24]
 8002136:	4973      	ldr	r1, [pc, #460]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002138:	4313      	orrs	r3, r2
 800213a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002146:	2b00      	cmp	r3, #0
 8002148:	d00a      	beq.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800214a:	4b6e      	ldr	r3, [pc, #440]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800214c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002150:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	69db      	ldr	r3, [r3, #28]
 8002158:	496a      	ldr	r1, [pc, #424]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800215a:	4313      	orrs	r3, r2
 800215c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002168:	2b00      	cmp	r3, #0
 800216a:	d00a      	beq.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800216c:	4b65      	ldr	r3, [pc, #404]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800216e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002172:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a1b      	ldr	r3, [r3, #32]
 800217a:	4962      	ldr	r1, [pc, #392]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800217c:	4313      	orrs	r3, r2
 800217e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800218a:	2b00      	cmp	r3, #0
 800218c:	d00a      	beq.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800218e:	4b5d      	ldr	r3, [pc, #372]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002190:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002194:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800219c:	4959      	ldr	r1, [pc, #356]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800219e:	4313      	orrs	r3, r2
 80021a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d00a      	beq.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80021b0:	4b54      	ldr	r3, [pc, #336]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80021b6:	f023 0203 	bic.w	r2, r3, #3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021be:	4951      	ldr	r1, [pc, #324]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021c0:	4313      	orrs	r3, r2
 80021c2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d00a      	beq.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80021d2:	4b4c      	ldr	r3, [pc, #304]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021d8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021e0:	4948      	ldr	r1, [pc, #288]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021e2:	4313      	orrs	r3, r2
 80021e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d015      	beq.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80021f4:	4b43      	ldr	r3, [pc, #268]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021fa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002202:	4940      	ldr	r1, [pc, #256]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002204:	4313      	orrs	r3, r2
 8002206:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800220e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002212:	d105      	bne.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002214:	4b3b      	ldr	r3, [pc, #236]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	4a3a      	ldr	r2, [pc, #232]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800221a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800221e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002228:	2b00      	cmp	r3, #0
 800222a:	d015      	beq.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800222c:	4b35      	ldr	r3, [pc, #212]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800222e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002232:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800223a:	4932      	ldr	r1, [pc, #200]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800223c:	4313      	orrs	r3, r2
 800223e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002246:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800224a:	d105      	bne.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800224c:	4b2d      	ldr	r3, [pc, #180]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	4a2c      	ldr	r2, [pc, #176]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002252:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002256:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d015      	beq.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002264:	4b27      	ldr	r3, [pc, #156]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002266:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800226a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002272:	4924      	ldr	r1, [pc, #144]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002274:	4313      	orrs	r3, r2
 8002276:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800227e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002282:	d105      	bne.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002284:	4b1f      	ldr	r3, [pc, #124]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	4a1e      	ldr	r2, [pc, #120]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800228a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800228e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d015      	beq.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800229c:	4b19      	ldr	r3, [pc, #100]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800229e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022a2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022aa:	4916      	ldr	r1, [pc, #88]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80022ba:	d105      	bne.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022bc:	4b11      	ldr	r3, [pc, #68]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	4a10      	ldr	r2, [pc, #64]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022c6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d019      	beq.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80022d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022da:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e2:	4908      	ldr	r1, [pc, #32]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022e4:	4313      	orrs	r3, r2
 80022e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80022f2:	d109      	bne.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022f4:	4b03      	ldr	r3, [pc, #12]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	4a02      	ldr	r2, [pc, #8]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022fe:	60d3      	str	r3, [r2, #12]
 8002300:	e002      	b.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002302:	bf00      	nop
 8002304:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d015      	beq.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002314:	4b29      	ldr	r3, [pc, #164]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002316:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800231a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002322:	4926      	ldr	r1, [pc, #152]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002324:	4313      	orrs	r3, r2
 8002326:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800232e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002332:	d105      	bne.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002334:	4b21      	ldr	r3, [pc, #132]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	4a20      	ldr	r2, [pc, #128]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800233a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800233e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d015      	beq.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800234c:	4b1b      	ldr	r3, [pc, #108]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800234e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002352:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800235a:	4918      	ldr	r1, [pc, #96]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800235c:	4313      	orrs	r3, r2
 800235e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002366:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800236a:	d105      	bne.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800236c:	4b13      	ldr	r3, [pc, #76]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	4a12      	ldr	r2, [pc, #72]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002372:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002376:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d015      	beq.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002384:	4b0d      	ldr	r3, [pc, #52]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002386:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800238a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002392:	490a      	ldr	r1, [pc, #40]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002394:	4313      	orrs	r3, r2
 8002396:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800239e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80023a2:	d105      	bne.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023a4:	4b05      	ldr	r3, [pc, #20]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	4a04      	ldr	r2, [pc, #16]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80023aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023ae:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80023b0:	7cbb      	ldrb	r3, [r7, #18]
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3718      	adds	r7, #24
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	40021000 	.word	0x40021000

080023c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d101      	bne.n	80023d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e09d      	b.n	800250e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d108      	bne.n	80023ec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80023e2:	d009      	beq.n	80023f8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	61da      	str	r2, [r3, #28]
 80023ea:	e005      	b.n	80023f8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002404:	b2db      	uxtb	r3, r3
 8002406:	2b00      	cmp	r3, #0
 8002408:	d106      	bne.n	8002418 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f7fe fafc 	bl	8000a10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2202      	movs	r2, #2
 800241c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800242e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002438:	d902      	bls.n	8002440 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800243a:	2300      	movs	r3, #0
 800243c:	60fb      	str	r3, [r7, #12]
 800243e:	e002      	b.n	8002446 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002440:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002444:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800244e:	d007      	beq.n	8002460 <HAL_SPI_Init+0xa0>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002458:	d002      	beq.n	8002460 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002470:	431a      	orrs	r2, r3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	691b      	ldr	r3, [r3, #16]
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	431a      	orrs	r2, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	695b      	ldr	r3, [r3, #20]
 8002480:	f003 0301 	and.w	r3, r3, #1
 8002484:	431a      	orrs	r2, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	699b      	ldr	r3, [r3, #24]
 800248a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800248e:	431a      	orrs	r2, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	69db      	ldr	r3, [r3, #28]
 8002494:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002498:	431a      	orrs	r2, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a1b      	ldr	r3, [r3, #32]
 800249e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024a2:	ea42 0103 	orr.w	r1, r2, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024aa:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	430a      	orrs	r2, r1
 80024b4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	699b      	ldr	r3, [r3, #24]
 80024ba:	0c1b      	lsrs	r3, r3, #16
 80024bc:	f003 0204 	and.w	r2, r3, #4
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024c4:	f003 0310 	and.w	r3, r3, #16
 80024c8:	431a      	orrs	r2, r3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024ce:	f003 0308 	and.w	r3, r3, #8
 80024d2:	431a      	orrs	r2, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80024dc:	ea42 0103 	orr.w	r1, r2, r3
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	430a      	orrs	r2, r1
 80024ec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	69da      	ldr	r2, [r3, #28]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80024fc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2200      	movs	r2, #0
 8002502:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2201      	movs	r2, #1
 8002508:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3710      	adds	r7, #16
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
	...

08002518 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8002518:	b480      	push	{r7}
 800251a:	b087      	sub	sp, #28
 800251c:	af00      	add	r7, sp, #0
 800251e:	60f8      	str	r0, [r7, #12]
 8002520:	60b9      	str	r1, [r7, #8]
 8002522:	607a      	str	r2, [r7, #4]
 8002524:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002526:	2300      	movs	r3, #0
 8002528:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002530:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002538:	7dbb      	ldrb	r3, [r7, #22]
 800253a:	2b01      	cmp	r3, #1
 800253c:	d00d      	beq.n	800255a <HAL_SPI_TransmitReceive_IT+0x42>
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002544:	d106      	bne.n	8002554 <HAL_SPI_TransmitReceive_IT+0x3c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d102      	bne.n	8002554 <HAL_SPI_TransmitReceive_IT+0x3c>
 800254e:	7dbb      	ldrb	r3, [r7, #22]
 8002550:	2b04      	cmp	r3, #4
 8002552:	d002      	beq.n	800255a <HAL_SPI_TransmitReceive_IT+0x42>
  {
    errorcode = HAL_BUSY;
 8002554:	2302      	movs	r3, #2
 8002556:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002558:	e07d      	b.n	8002656 <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d005      	beq.n	800256c <HAL_SPI_TransmitReceive_IT+0x54>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d002      	beq.n	800256c <HAL_SPI_TransmitReceive_IT+0x54>
 8002566:	887b      	ldrh	r3, [r7, #2]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d102      	bne.n	8002572 <HAL_SPI_TransmitReceive_IT+0x5a>
  {
    errorcode = HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002570:	e071      	b.n	8002656 <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002578:	2b01      	cmp	r3, #1
 800257a:	d101      	bne.n	8002580 <HAL_SPI_TransmitReceive_IT+0x68>
 800257c:	2302      	movs	r3, #2
 800257e:	e06b      	b.n	8002658 <HAL_SPI_TransmitReceive_IT+0x140>
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800258e:	b2db      	uxtb	r3, r3
 8002590:	2b04      	cmp	r3, #4
 8002592:	d003      	beq.n	800259c <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2205      	movs	r2, #5
 8002598:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2200      	movs	r2, #0
 80025a0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	68ba      	ldr	r2, [r7, #8]
 80025a6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	887a      	ldrh	r2, [r7, #2]
 80025ac:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	887a      	ldrh	r2, [r7, #2]
 80025b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	887a      	ldrh	r2, [r7, #2]
 80025be:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	887a      	ldrh	r2, [r7, #2]
 80025c6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80025d2:	d906      	bls.n	80025e2 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	4a23      	ldr	r2, [pc, #140]	@ (8002664 <HAL_SPI_TransmitReceive_IT+0x14c>)
 80025d8:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	4a22      	ldr	r2, [pc, #136]	@ (8002668 <HAL_SPI_TransmitReceive_IT+0x150>)
 80025de:	651a      	str	r2, [r3, #80]	@ 0x50
 80025e0:	e005      	b.n	80025ee <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	4a21      	ldr	r2, [pc, #132]	@ (800266c <HAL_SPI_TransmitReceive_IT+0x154>)
 80025e6:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	4a21      	ldr	r2, [pc, #132]	@ (8002670 <HAL_SPI_TransmitReceive_IT+0x158>)
 80025ec:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80025f6:	d802      	bhi.n	80025fe <HAL_SPI_TransmitReceive_IT+0xe6>
 80025f8:	887b      	ldrh	r3, [r7, #2]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d908      	bls.n	8002610 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	685a      	ldr	r2, [r3, #4]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800260c:	605a      	str	r2, [r3, #4]
 800260e:	e007      	b.n	8002620 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	685a      	ldr	r2, [r3, #4]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800261e:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800262a:	2b40      	cmp	r3, #64	@ 0x40
 800262c:	d007      	beq.n	800263e <HAL_SPI_TransmitReceive_IT+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800263c:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2200      	movs	r2, #0
 8002642:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	685a      	ldr	r2, [r3, #4]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 8002654:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 8002656:	7dfb      	ldrb	r3, [r7, #23]
}
 8002658:	4618      	mov	r0, r3
 800265a:	371c      	adds	r7, #28
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr
 8002664:	080029ff 	.word	0x080029ff
 8002668:	08002a65 	.word	0x08002a65
 800266c:	080028af 	.word	0x080028af
 8002670:	0800296d 	.word	0x0800296d

08002674 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b088      	sub	sp, #32
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002692:	2b00      	cmp	r3, #0
 8002694:	d10e      	bne.n	80026b4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800269c:	2b00      	cmp	r3, #0
 800269e:	d009      	beq.n	80026b4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d004      	beq.n	80026b4 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	4798      	blx	r3
    return;
 80026b2:	e0ce      	b.n	8002852 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d009      	beq.n	80026d2 <HAL_SPI_IRQHandler+0x5e>
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d004      	beq.n	80026d2 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	4798      	blx	r3
    return;
 80026d0:	e0bf      	b.n	8002852 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	f003 0320 	and.w	r3, r3, #32
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d10a      	bne.n	80026f2 <HAL_SPI_IRQHandler+0x7e>
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d105      	bne.n	80026f2 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	f000 80b0 	beq.w	8002852 <HAL_SPI_IRQHandler+0x1de>
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	f003 0320 	and.w	r3, r3, #32
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	f000 80aa 	beq.w	8002852 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002704:	2b00      	cmp	r3, #0
 8002706:	d023      	beq.n	8002750 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800270e:	b2db      	uxtb	r3, r3
 8002710:	2b03      	cmp	r3, #3
 8002712:	d011      	beq.n	8002738 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002718:	f043 0204 	orr.w	r2, r3, #4
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002720:	2300      	movs	r3, #0
 8002722:	617b      	str	r3, [r7, #20]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	617b      	str	r3, [r7, #20]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	617b      	str	r3, [r7, #20]
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	e00b      	b.n	8002750 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002738:	2300      	movs	r3, #0
 800273a:	613b      	str	r3, [r7, #16]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	613b      	str	r3, [r7, #16]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	613b      	str	r3, [r7, #16]
 800274c:	693b      	ldr	r3, [r7, #16]
        return;
 800274e:	e080      	b.n	8002852 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	f003 0320 	and.w	r3, r3, #32
 8002756:	2b00      	cmp	r3, #0
 8002758:	d014      	beq.n	8002784 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800275e:	f043 0201 	orr.w	r2, r3, #1
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002766:	2300      	movs	r3, #0
 8002768:	60fb      	str	r3, [r7, #12]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	60fb      	str	r3, [r7, #12]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002780:	601a      	str	r2, [r3, #0]
 8002782:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800278a:	2b00      	cmp	r3, #0
 800278c:	d00c      	beq.n	80027a8 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002792:	f043 0208 	orr.w	r2, r3, #8
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800279a:	2300      	movs	r3, #0
 800279c:	60bb      	str	r3, [r7, #8]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	60bb      	str	r3, [r7, #8]
 80027a6:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d04f      	beq.n	8002850 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	685a      	ldr	r2, [r3, #4]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80027be:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2201      	movs	r2, #1
 80027c4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	f003 0302 	and.w	r3, r3, #2
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d104      	bne.n	80027dc <HAL_SPI_IRQHandler+0x168>
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	f003 0301 	and.w	r3, r3, #1
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d034      	beq.n	8002846 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	685a      	ldr	r2, [r3, #4]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f022 0203 	bic.w	r2, r2, #3
 80027ea:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d011      	beq.n	8002818 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027f8:	4a17      	ldr	r2, [pc, #92]	@ (8002858 <HAL_SPI_IRQHandler+0x1e4>)
 80027fa:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002800:	4618      	mov	r0, r3
 8002802:	f7fe fb70 	bl	8000ee6 <HAL_DMA_Abort_IT>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d005      	beq.n	8002818 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002810:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800281c:	2b00      	cmp	r3, #0
 800281e:	d016      	beq.n	800284e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002824:	4a0c      	ldr	r2, [pc, #48]	@ (8002858 <HAL_SPI_IRQHandler+0x1e4>)
 8002826:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800282c:	4618      	mov	r0, r3
 800282e:	f7fe fb5a 	bl	8000ee6 <HAL_DMA_Abort_IT>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d00a      	beq.n	800284e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800283c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8002844:	e003      	b.n	800284e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f000 f812 	bl	8002870 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800284c:	e000      	b.n	8002850 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800284e:	bf00      	nop
    return;
 8002850:	bf00      	nop
  }
}
 8002852:	3720      	adds	r7, #32
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	08002885 	.word	0x08002885

0800285c <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8002864:	bf00      	nop
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002878:	bf00      	nop
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002890:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2200      	movs	r2, #0
 8002896:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2200      	movs	r2, #0
 800289e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80028a0:	68f8      	ldr	r0, [r7, #12]
 80028a2:	f7ff ffe5 	bl	8002870 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80028a6:	bf00      	nop
 80028a8:	3710      	adds	r7, #16
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}

080028ae <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80028ae:	b580      	push	{r7, lr}
 80028b0:	b082      	sub	sp, #8
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80028bc:	b29b      	uxth	r3, r3
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d923      	bls.n	800290a <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	68da      	ldr	r2, [r3, #12]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028cc:	b292      	uxth	r2, r2
 80028ce:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d4:	1c9a      	adds	r2, r3, #2
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount -= 2U;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	3b02      	subs	r3, #2
 80028e4:	b29a      	uxth	r2, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    if (hspi->RxXferCount == 1U)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d11f      	bne.n	8002938 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	685a      	ldr	r2, [r3, #4]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002906:	605a      	str	r2, [r3, #4]
 8002908:	e016      	b.n	8002938 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f103 020c 	add.w	r2, r3, #12
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002916:	7812      	ldrb	r2, [r2, #0]
 8002918:	b2d2      	uxtb	r2, r2
 800291a:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002920:	1c5a      	adds	r2, r3, #1
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount--;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800292c:	b29b      	uxth	r3, r3
 800292e:	3b01      	subs	r3, #1
 8002930:	b29a      	uxth	r2, r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800293e:	b29b      	uxth	r3, r3
 8002940:	2b00      	cmp	r3, #0
 8002942:	d10f      	bne.n	8002964 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	685a      	ldr	r2, [r3, #4]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002952:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002958:	b29b      	uxth	r3, r3
 800295a:	2b00      	cmp	r3, #0
 800295c:	d102      	bne.n	8002964 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f000 fa14 	bl	8002d8c <SPI_CloseRxTx_ISR>
    }
  }
}
 8002964:	bf00      	nop
 8002966:	3708      	adds	r7, #8
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002978:	b29b      	uxth	r3, r3
 800297a:	2b01      	cmp	r3, #1
 800297c:	d912      	bls.n	80029a4 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002982:	881a      	ldrh	r2, [r3, #0]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800298e:	1c9a      	adds	r2, r3, #2
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount -= 2U;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002998:	b29b      	uxth	r3, r3
 800299a:	3b02      	subs	r3, #2
 800299c:	b29a      	uxth	r2, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80029a2:	e012      	b.n	80029ca <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	330c      	adds	r3, #12
 80029ae:	7812      	ldrb	r2, [r2, #0]
 80029b0:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029b6:	1c5a      	adds	r2, r3, #1
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount--;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	3b01      	subs	r3, #1
 80029c4:	b29a      	uxth	r2, r3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d110      	bne.n	80029f6 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	685a      	ldr	r2, [r3, #4]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80029e2:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d102      	bne.n	80029f6 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f000 f9cb 	bl	8002d8c <SPI_CloseRxTx_ISR>
    }
  }
}
 80029f6:	bf00      	nop
 80029f8:	3708      	adds	r7, #8
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}

080029fe <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80029fe:	b580      	push	{r7, lr}
 8002a00:	b082      	sub	sp, #8
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	68da      	ldr	r2, [r3, #12]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a10:	b292      	uxth	r2, r2
 8002a12:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a18:	1c9a      	adds	r2, r3, #2
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	3b01      	subs	r3, #1
 8002a28:	b29a      	uxth	r2, r3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  if (hspi->RxXferCount == 0U)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d10f      	bne.n	8002a5c <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	685a      	ldr	r2, [r3, #4]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002a4a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d102      	bne.n	8002a5c <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f000 f998 	bl	8002d8c <SPI_CloseRxTx_ISR>
    }
  }
}
 8002a5c:	bf00      	nop
 8002a5e:	3708      	adds	r7, #8
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b082      	sub	sp, #8
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a70:	881a      	ldrh	r2, [r3, #0]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a7c:	1c9a      	adds	r2, r3, #2
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	3b01      	subs	r3, #1
 8002a8a:	b29a      	uxth	r2, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d110      	bne.n	8002abc <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	685a      	ldr	r2, [r3, #4]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002aa8:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d102      	bne.n	8002abc <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f000 f968 	bl	8002d8c <SPI_CloseRxTx_ISR>
    }
  }
}
 8002abc:	bf00      	nop
 8002abe:	3708      	adds	r7, #8
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b088      	sub	sp, #32
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	603b      	str	r3, [r7, #0]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002ad4:	f7fe f8ca 	bl	8000c6c <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002adc:	1a9b      	subs	r3, r3, r2
 8002ade:	683a      	ldr	r2, [r7, #0]
 8002ae0:	4413      	add	r3, r2
 8002ae2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002ae4:	f7fe f8c2 	bl	8000c6c <HAL_GetTick>
 8002ae8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002aea:	4b39      	ldr	r3, [pc, #228]	@ (8002bd0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	015b      	lsls	r3, r3, #5
 8002af0:	0d1b      	lsrs	r3, r3, #20
 8002af2:	69fa      	ldr	r2, [r7, #28]
 8002af4:	fb02 f303 	mul.w	r3, r2, r3
 8002af8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002afa:	e054      	b.n	8002ba6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b02:	d050      	beq.n	8002ba6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002b04:	f7fe f8b2 	bl	8000c6c <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	69fa      	ldr	r2, [r7, #28]
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d902      	bls.n	8002b1a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d13d      	bne.n	8002b96 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	685a      	ldr	r2, [r3, #4]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002b28:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002b32:	d111      	bne.n	8002b58 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b3c:	d004      	beq.n	8002b48 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b46:	d107      	bne.n	8002b58 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b56:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b5c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b60:	d10f      	bne.n	8002b82 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002b70:	601a      	str	r2, [r3, #0]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002b80:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2201      	movs	r2, #1
 8002b86:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e017      	b.n	8002bc6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d101      	bne.n	8002ba0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	3b01      	subs	r3, #1
 8002ba4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	689a      	ldr	r2, [r3, #8]
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	4013      	ands	r3, r2
 8002bb0:	68ba      	ldr	r2, [r7, #8]
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	bf0c      	ite	eq
 8002bb6:	2301      	moveq	r3, #1
 8002bb8:	2300      	movne	r3, #0
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	79fb      	ldrb	r3, [r7, #7]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d19b      	bne.n	8002afc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3720      	adds	r7, #32
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	20000004 	.word	0x20000004

08002bd4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b08a      	sub	sp, #40	@ 0x28
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	60f8      	str	r0, [r7, #12]
 8002bdc:	60b9      	str	r1, [r7, #8]
 8002bde:	607a      	str	r2, [r7, #4]
 8002be0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002be2:	2300      	movs	r3, #0
 8002be4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002be6:	f7fe f841 	bl	8000c6c <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bee:	1a9b      	subs	r3, r3, r2
 8002bf0:	683a      	ldr	r2, [r7, #0]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8002bf6:	f7fe f839 	bl	8000c6c <HAL_GetTick>
 8002bfa:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	330c      	adds	r3, #12
 8002c02:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002c04:	4b3d      	ldr	r3, [pc, #244]	@ (8002cfc <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	4613      	mov	r3, r2
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	4413      	add	r3, r2
 8002c0e:	00da      	lsls	r2, r3, #3
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	0d1b      	lsrs	r3, r3, #20
 8002c14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c16:	fb02 f303 	mul.w	r3, r2, r3
 8002c1a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002c1c:	e060      	b.n	8002ce0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002c24:	d107      	bne.n	8002c36 <SPI_WaitFifoStateUntilTimeout+0x62>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d104      	bne.n	8002c36 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002c34:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c3c:	d050      	beq.n	8002ce0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002c3e:	f7fe f815 	bl	8000c6c <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	6a3b      	ldr	r3, [r7, #32]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d902      	bls.n	8002c54 <SPI_WaitFifoStateUntilTimeout+0x80>
 8002c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d13d      	bne.n	8002cd0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	685a      	ldr	r2, [r3, #4]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002c62:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002c6c:	d111      	bne.n	8002c92 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c76:	d004      	beq.n	8002c82 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c80:	d107      	bne.n	8002c92 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c90:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c9a:	d10f      	bne.n	8002cbc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002caa:	601a      	str	r2, [r3, #0]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002cba:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e010      	b.n	8002cf2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d101      	bne.n	8002cda <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	3b01      	subs	r3, #1
 8002cde:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	689a      	ldr	r2, [r3, #8]
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d196      	bne.n	8002c1e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3728      	adds	r7, #40	@ 0x28
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	20000004 	.word	0x20000004

08002d00 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b086      	sub	sp, #24
 8002d04:	af02      	add	r7, sp, #8
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	9300      	str	r3, [sp, #0]
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	2200      	movs	r2, #0
 8002d14:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8002d18:	68f8      	ldr	r0, [r7, #12]
 8002d1a:	f7ff ff5b 	bl	8002bd4 <SPI_WaitFifoStateUntilTimeout>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d007      	beq.n	8002d34 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d28:	f043 0220 	orr.w	r2, r3, #32
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002d30:	2303      	movs	r3, #3
 8002d32:	e027      	b.n	8002d84 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	9300      	str	r3, [sp, #0]
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	2180      	movs	r1, #128	@ 0x80
 8002d3e:	68f8      	ldr	r0, [r7, #12]
 8002d40:	f7ff fec0 	bl	8002ac4 <SPI_WaitFlagStateUntilTimeout>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d007      	beq.n	8002d5a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d4e:	f043 0220 	orr.w	r2, r3, #32
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e014      	b.n	8002d84 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	9300      	str	r3, [sp, #0]
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8002d66:	68f8      	ldr	r0, [r7, #12]
 8002d68:	f7ff ff34 	bl	8002bd4 <SPI_WaitFifoStateUntilTimeout>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d007      	beq.n	8002d82 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d76:	f043 0220 	orr.w	r2, r3, #32
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e000      	b.n	8002d84 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002d82:	2300      	movs	r3, #0
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3710      	adds	r7, #16
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002d94:	f7fd ff6a 	bl	8000c6c <HAL_GetTick>
 8002d98:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	685a      	ldr	r2, [r3, #4]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f022 0220 	bic.w	r2, r2, #32
 8002da8:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002daa:	68fa      	ldr	r2, [r7, #12]
 8002dac:	2164      	movs	r1, #100	@ 0x64
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f7ff ffa6 	bl	8002d00 <SPI_EndRxTxTransaction>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d005      	beq.n	8002dc6 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dbe:	f043 0220 	orr.w	r2, r3, #32
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	661a      	str	r2, [r3, #96]	@ 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d115      	bne.n	8002dfa <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	2b04      	cmp	r3, #4
 8002dd8:	d107      	bne.n	8002dea <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f7ff fd3a 	bl	800285c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8002de8:	e00e      	b.n	8002e08 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2201      	movs	r2, #1
 8002dee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f7fd fd7a 	bl	80008ec <HAL_SPI_TxRxCpltCallback>
}
 8002df8:	e006      	b.n	8002e08 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f7ff fd34 	bl	8002870 <HAL_SPI_ErrorCallback>
}
 8002e08:	bf00      	nop
 8002e0a:	3710      	adds	r7, #16
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d101      	bne.n	8002e22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e042      	b.n	8002ea8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d106      	bne.n	8002e3a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f7fd fd93 	bl	8000960 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2224      	movs	r2, #36	@ 0x24
 8002e3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f022 0201 	bic.w	r2, r2, #1
 8002e50:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d002      	beq.n	8002e60 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f000 fb24 	bl	80034a8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f000 f825 	bl	8002eb0 <UART_SetConfig>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d101      	bne.n	8002e70 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e01b      	b.n	8002ea8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	685a      	ldr	r2, [r3, #4]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002e7e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	689a      	ldr	r2, [r3, #8]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002e8e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f042 0201 	orr.w	r2, r2, #1
 8002e9e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f000 fba3 	bl	80035ec <UART_CheckIdleState>
 8002ea6:	4603      	mov	r3, r0
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3708      	adds	r7, #8
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002eb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002eb4:	b08c      	sub	sp, #48	@ 0x30
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	689a      	ldr	r2, [r3, #8]
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	691b      	ldr	r3, [r3, #16]
 8002ec8:	431a      	orrs	r2, r3
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	695b      	ldr	r3, [r3, #20]
 8002ece:	431a      	orrs	r2, r3
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	69db      	ldr	r3, [r3, #28]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	4baa      	ldr	r3, [pc, #680]	@ (8003188 <UART_SetConfig+0x2d8>)
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	697a      	ldr	r2, [r7, #20]
 8002ee4:	6812      	ldr	r2, [r2, #0]
 8002ee6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002ee8:	430b      	orrs	r3, r1
 8002eea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	68da      	ldr	r2, [r3, #12]
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	430a      	orrs	r2, r1
 8002f00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	699b      	ldr	r3, [r3, #24]
 8002f06:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a9f      	ldr	r2, [pc, #636]	@ (800318c <UART_SetConfig+0x2dc>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d004      	beq.n	8002f1c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	6a1b      	ldr	r3, [r3, #32]
 8002f16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8002f26:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8002f2a:	697a      	ldr	r2, [r7, #20]
 8002f2c:	6812      	ldr	r2, [r2, #0]
 8002f2e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002f30:	430b      	orrs	r3, r1
 8002f32:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f3a:	f023 010f 	bic.w	r1, r3, #15
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	430a      	orrs	r2, r1
 8002f48:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a90      	ldr	r2, [pc, #576]	@ (8003190 <UART_SetConfig+0x2e0>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d125      	bne.n	8002fa0 <UART_SetConfig+0xf0>
 8002f54:	4b8f      	ldr	r3, [pc, #572]	@ (8003194 <UART_SetConfig+0x2e4>)
 8002f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f5a:	f003 0303 	and.w	r3, r3, #3
 8002f5e:	2b03      	cmp	r3, #3
 8002f60:	d81a      	bhi.n	8002f98 <UART_SetConfig+0xe8>
 8002f62:	a201      	add	r2, pc, #4	@ (adr r2, 8002f68 <UART_SetConfig+0xb8>)
 8002f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f68:	08002f79 	.word	0x08002f79
 8002f6c:	08002f89 	.word	0x08002f89
 8002f70:	08002f81 	.word	0x08002f81
 8002f74:	08002f91 	.word	0x08002f91
 8002f78:	2301      	movs	r3, #1
 8002f7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f7e:	e116      	b.n	80031ae <UART_SetConfig+0x2fe>
 8002f80:	2302      	movs	r3, #2
 8002f82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f86:	e112      	b.n	80031ae <UART_SetConfig+0x2fe>
 8002f88:	2304      	movs	r3, #4
 8002f8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f8e:	e10e      	b.n	80031ae <UART_SetConfig+0x2fe>
 8002f90:	2308      	movs	r3, #8
 8002f92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f96:	e10a      	b.n	80031ae <UART_SetConfig+0x2fe>
 8002f98:	2310      	movs	r3, #16
 8002f9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f9e:	e106      	b.n	80031ae <UART_SetConfig+0x2fe>
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a7c      	ldr	r2, [pc, #496]	@ (8003198 <UART_SetConfig+0x2e8>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d138      	bne.n	800301c <UART_SetConfig+0x16c>
 8002faa:	4b7a      	ldr	r3, [pc, #488]	@ (8003194 <UART_SetConfig+0x2e4>)
 8002fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fb0:	f003 030c 	and.w	r3, r3, #12
 8002fb4:	2b0c      	cmp	r3, #12
 8002fb6:	d82d      	bhi.n	8003014 <UART_SetConfig+0x164>
 8002fb8:	a201      	add	r2, pc, #4	@ (adr r2, 8002fc0 <UART_SetConfig+0x110>)
 8002fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fbe:	bf00      	nop
 8002fc0:	08002ff5 	.word	0x08002ff5
 8002fc4:	08003015 	.word	0x08003015
 8002fc8:	08003015 	.word	0x08003015
 8002fcc:	08003015 	.word	0x08003015
 8002fd0:	08003005 	.word	0x08003005
 8002fd4:	08003015 	.word	0x08003015
 8002fd8:	08003015 	.word	0x08003015
 8002fdc:	08003015 	.word	0x08003015
 8002fe0:	08002ffd 	.word	0x08002ffd
 8002fe4:	08003015 	.word	0x08003015
 8002fe8:	08003015 	.word	0x08003015
 8002fec:	08003015 	.word	0x08003015
 8002ff0:	0800300d 	.word	0x0800300d
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ffa:	e0d8      	b.n	80031ae <UART_SetConfig+0x2fe>
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003002:	e0d4      	b.n	80031ae <UART_SetConfig+0x2fe>
 8003004:	2304      	movs	r3, #4
 8003006:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800300a:	e0d0      	b.n	80031ae <UART_SetConfig+0x2fe>
 800300c:	2308      	movs	r3, #8
 800300e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003012:	e0cc      	b.n	80031ae <UART_SetConfig+0x2fe>
 8003014:	2310      	movs	r3, #16
 8003016:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800301a:	e0c8      	b.n	80031ae <UART_SetConfig+0x2fe>
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a5e      	ldr	r2, [pc, #376]	@ (800319c <UART_SetConfig+0x2ec>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d125      	bne.n	8003072 <UART_SetConfig+0x1c2>
 8003026:	4b5b      	ldr	r3, [pc, #364]	@ (8003194 <UART_SetConfig+0x2e4>)
 8003028:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800302c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003030:	2b30      	cmp	r3, #48	@ 0x30
 8003032:	d016      	beq.n	8003062 <UART_SetConfig+0x1b2>
 8003034:	2b30      	cmp	r3, #48	@ 0x30
 8003036:	d818      	bhi.n	800306a <UART_SetConfig+0x1ba>
 8003038:	2b20      	cmp	r3, #32
 800303a:	d00a      	beq.n	8003052 <UART_SetConfig+0x1a2>
 800303c:	2b20      	cmp	r3, #32
 800303e:	d814      	bhi.n	800306a <UART_SetConfig+0x1ba>
 8003040:	2b00      	cmp	r3, #0
 8003042:	d002      	beq.n	800304a <UART_SetConfig+0x19a>
 8003044:	2b10      	cmp	r3, #16
 8003046:	d008      	beq.n	800305a <UART_SetConfig+0x1aa>
 8003048:	e00f      	b.n	800306a <UART_SetConfig+0x1ba>
 800304a:	2300      	movs	r3, #0
 800304c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003050:	e0ad      	b.n	80031ae <UART_SetConfig+0x2fe>
 8003052:	2302      	movs	r3, #2
 8003054:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003058:	e0a9      	b.n	80031ae <UART_SetConfig+0x2fe>
 800305a:	2304      	movs	r3, #4
 800305c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003060:	e0a5      	b.n	80031ae <UART_SetConfig+0x2fe>
 8003062:	2308      	movs	r3, #8
 8003064:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003068:	e0a1      	b.n	80031ae <UART_SetConfig+0x2fe>
 800306a:	2310      	movs	r3, #16
 800306c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003070:	e09d      	b.n	80031ae <UART_SetConfig+0x2fe>
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a4a      	ldr	r2, [pc, #296]	@ (80031a0 <UART_SetConfig+0x2f0>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d125      	bne.n	80030c8 <UART_SetConfig+0x218>
 800307c:	4b45      	ldr	r3, [pc, #276]	@ (8003194 <UART_SetConfig+0x2e4>)
 800307e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003082:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003086:	2bc0      	cmp	r3, #192	@ 0xc0
 8003088:	d016      	beq.n	80030b8 <UART_SetConfig+0x208>
 800308a:	2bc0      	cmp	r3, #192	@ 0xc0
 800308c:	d818      	bhi.n	80030c0 <UART_SetConfig+0x210>
 800308e:	2b80      	cmp	r3, #128	@ 0x80
 8003090:	d00a      	beq.n	80030a8 <UART_SetConfig+0x1f8>
 8003092:	2b80      	cmp	r3, #128	@ 0x80
 8003094:	d814      	bhi.n	80030c0 <UART_SetConfig+0x210>
 8003096:	2b00      	cmp	r3, #0
 8003098:	d002      	beq.n	80030a0 <UART_SetConfig+0x1f0>
 800309a:	2b40      	cmp	r3, #64	@ 0x40
 800309c:	d008      	beq.n	80030b0 <UART_SetConfig+0x200>
 800309e:	e00f      	b.n	80030c0 <UART_SetConfig+0x210>
 80030a0:	2300      	movs	r3, #0
 80030a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80030a6:	e082      	b.n	80031ae <UART_SetConfig+0x2fe>
 80030a8:	2302      	movs	r3, #2
 80030aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80030ae:	e07e      	b.n	80031ae <UART_SetConfig+0x2fe>
 80030b0:	2304      	movs	r3, #4
 80030b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80030b6:	e07a      	b.n	80031ae <UART_SetConfig+0x2fe>
 80030b8:	2308      	movs	r3, #8
 80030ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80030be:	e076      	b.n	80031ae <UART_SetConfig+0x2fe>
 80030c0:	2310      	movs	r3, #16
 80030c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80030c6:	e072      	b.n	80031ae <UART_SetConfig+0x2fe>
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a35      	ldr	r2, [pc, #212]	@ (80031a4 <UART_SetConfig+0x2f4>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d12a      	bne.n	8003128 <UART_SetConfig+0x278>
 80030d2:	4b30      	ldr	r3, [pc, #192]	@ (8003194 <UART_SetConfig+0x2e4>)
 80030d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030d8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030dc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80030e0:	d01a      	beq.n	8003118 <UART_SetConfig+0x268>
 80030e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80030e6:	d81b      	bhi.n	8003120 <UART_SetConfig+0x270>
 80030e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80030ec:	d00c      	beq.n	8003108 <UART_SetConfig+0x258>
 80030ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80030f2:	d815      	bhi.n	8003120 <UART_SetConfig+0x270>
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d003      	beq.n	8003100 <UART_SetConfig+0x250>
 80030f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030fc:	d008      	beq.n	8003110 <UART_SetConfig+0x260>
 80030fe:	e00f      	b.n	8003120 <UART_SetConfig+0x270>
 8003100:	2300      	movs	r3, #0
 8003102:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003106:	e052      	b.n	80031ae <UART_SetConfig+0x2fe>
 8003108:	2302      	movs	r3, #2
 800310a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800310e:	e04e      	b.n	80031ae <UART_SetConfig+0x2fe>
 8003110:	2304      	movs	r3, #4
 8003112:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003116:	e04a      	b.n	80031ae <UART_SetConfig+0x2fe>
 8003118:	2308      	movs	r3, #8
 800311a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800311e:	e046      	b.n	80031ae <UART_SetConfig+0x2fe>
 8003120:	2310      	movs	r3, #16
 8003122:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003126:	e042      	b.n	80031ae <UART_SetConfig+0x2fe>
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a17      	ldr	r2, [pc, #92]	@ (800318c <UART_SetConfig+0x2dc>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d13a      	bne.n	80031a8 <UART_SetConfig+0x2f8>
 8003132:	4b18      	ldr	r3, [pc, #96]	@ (8003194 <UART_SetConfig+0x2e4>)
 8003134:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003138:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800313c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003140:	d01a      	beq.n	8003178 <UART_SetConfig+0x2c8>
 8003142:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003146:	d81b      	bhi.n	8003180 <UART_SetConfig+0x2d0>
 8003148:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800314c:	d00c      	beq.n	8003168 <UART_SetConfig+0x2b8>
 800314e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003152:	d815      	bhi.n	8003180 <UART_SetConfig+0x2d0>
 8003154:	2b00      	cmp	r3, #0
 8003156:	d003      	beq.n	8003160 <UART_SetConfig+0x2b0>
 8003158:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800315c:	d008      	beq.n	8003170 <UART_SetConfig+0x2c0>
 800315e:	e00f      	b.n	8003180 <UART_SetConfig+0x2d0>
 8003160:	2300      	movs	r3, #0
 8003162:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003166:	e022      	b.n	80031ae <UART_SetConfig+0x2fe>
 8003168:	2302      	movs	r3, #2
 800316a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800316e:	e01e      	b.n	80031ae <UART_SetConfig+0x2fe>
 8003170:	2304      	movs	r3, #4
 8003172:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003176:	e01a      	b.n	80031ae <UART_SetConfig+0x2fe>
 8003178:	2308      	movs	r3, #8
 800317a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800317e:	e016      	b.n	80031ae <UART_SetConfig+0x2fe>
 8003180:	2310      	movs	r3, #16
 8003182:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003186:	e012      	b.n	80031ae <UART_SetConfig+0x2fe>
 8003188:	cfff69f3 	.word	0xcfff69f3
 800318c:	40008000 	.word	0x40008000
 8003190:	40013800 	.word	0x40013800
 8003194:	40021000 	.word	0x40021000
 8003198:	40004400 	.word	0x40004400
 800319c:	40004800 	.word	0x40004800
 80031a0:	40004c00 	.word	0x40004c00
 80031a4:	40005000 	.word	0x40005000
 80031a8:	2310      	movs	r3, #16
 80031aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4aae      	ldr	r2, [pc, #696]	@ (800346c <UART_SetConfig+0x5bc>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	f040 8097 	bne.w	80032e8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80031ba:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80031be:	2b08      	cmp	r3, #8
 80031c0:	d823      	bhi.n	800320a <UART_SetConfig+0x35a>
 80031c2:	a201      	add	r2, pc, #4	@ (adr r2, 80031c8 <UART_SetConfig+0x318>)
 80031c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031c8:	080031ed 	.word	0x080031ed
 80031cc:	0800320b 	.word	0x0800320b
 80031d0:	080031f5 	.word	0x080031f5
 80031d4:	0800320b 	.word	0x0800320b
 80031d8:	080031fb 	.word	0x080031fb
 80031dc:	0800320b 	.word	0x0800320b
 80031e0:	0800320b 	.word	0x0800320b
 80031e4:	0800320b 	.word	0x0800320b
 80031e8:	08003203 	.word	0x08003203
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031ec:	f7fe fe28 	bl	8001e40 <HAL_RCC_GetPCLK1Freq>
 80031f0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80031f2:	e010      	b.n	8003216 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031f4:	4b9e      	ldr	r3, [pc, #632]	@ (8003470 <UART_SetConfig+0x5c0>)
 80031f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80031f8:	e00d      	b.n	8003216 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031fa:	f7fe fdb3 	bl	8001d64 <HAL_RCC_GetSysClockFreq>
 80031fe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003200:	e009      	b.n	8003216 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003202:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003206:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003208:	e005      	b.n	8003216 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800320a:	2300      	movs	r3, #0
 800320c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003214:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003218:	2b00      	cmp	r3, #0
 800321a:	f000 8130 	beq.w	800347e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003222:	4a94      	ldr	r2, [pc, #592]	@ (8003474 <UART_SetConfig+0x5c4>)
 8003224:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003228:	461a      	mov	r2, r3
 800322a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800322c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003230:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	685a      	ldr	r2, [r3, #4]
 8003236:	4613      	mov	r3, r2
 8003238:	005b      	lsls	r3, r3, #1
 800323a:	4413      	add	r3, r2
 800323c:	69ba      	ldr	r2, [r7, #24]
 800323e:	429a      	cmp	r2, r3
 8003240:	d305      	bcc.n	800324e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	429a      	cmp	r2, r3
 800324c:	d903      	bls.n	8003256 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003254:	e113      	b.n	800347e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003258:	2200      	movs	r2, #0
 800325a:	60bb      	str	r3, [r7, #8]
 800325c:	60fa      	str	r2, [r7, #12]
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003262:	4a84      	ldr	r2, [pc, #528]	@ (8003474 <UART_SetConfig+0x5c4>)
 8003264:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003268:	b29b      	uxth	r3, r3
 800326a:	2200      	movs	r2, #0
 800326c:	603b      	str	r3, [r7, #0]
 800326e:	607a      	str	r2, [r7, #4]
 8003270:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003274:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003278:	f7fc ffce 	bl	8000218 <__aeabi_uldivmod>
 800327c:	4602      	mov	r2, r0
 800327e:	460b      	mov	r3, r1
 8003280:	4610      	mov	r0, r2
 8003282:	4619      	mov	r1, r3
 8003284:	f04f 0200 	mov.w	r2, #0
 8003288:	f04f 0300 	mov.w	r3, #0
 800328c:	020b      	lsls	r3, r1, #8
 800328e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003292:	0202      	lsls	r2, r0, #8
 8003294:	6979      	ldr	r1, [r7, #20]
 8003296:	6849      	ldr	r1, [r1, #4]
 8003298:	0849      	lsrs	r1, r1, #1
 800329a:	2000      	movs	r0, #0
 800329c:	460c      	mov	r4, r1
 800329e:	4605      	mov	r5, r0
 80032a0:	eb12 0804 	adds.w	r8, r2, r4
 80032a4:	eb43 0905 	adc.w	r9, r3, r5
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	469a      	mov	sl, r3
 80032b0:	4693      	mov	fp, r2
 80032b2:	4652      	mov	r2, sl
 80032b4:	465b      	mov	r3, fp
 80032b6:	4640      	mov	r0, r8
 80032b8:	4649      	mov	r1, r9
 80032ba:	f7fc ffad 	bl	8000218 <__aeabi_uldivmod>
 80032be:	4602      	mov	r2, r0
 80032c0:	460b      	mov	r3, r1
 80032c2:	4613      	mov	r3, r2
 80032c4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80032c6:	6a3b      	ldr	r3, [r7, #32]
 80032c8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80032cc:	d308      	bcc.n	80032e0 <UART_SetConfig+0x430>
 80032ce:	6a3b      	ldr	r3, [r7, #32]
 80032d0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80032d4:	d204      	bcs.n	80032e0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	6a3a      	ldr	r2, [r7, #32]
 80032dc:	60da      	str	r2, [r3, #12]
 80032de:	e0ce      	b.n	800347e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80032e6:	e0ca      	b.n	800347e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	69db      	ldr	r3, [r3, #28]
 80032ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032f0:	d166      	bne.n	80033c0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80032f2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80032f6:	2b08      	cmp	r3, #8
 80032f8:	d827      	bhi.n	800334a <UART_SetConfig+0x49a>
 80032fa:	a201      	add	r2, pc, #4	@ (adr r2, 8003300 <UART_SetConfig+0x450>)
 80032fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003300:	08003325 	.word	0x08003325
 8003304:	0800332d 	.word	0x0800332d
 8003308:	08003335 	.word	0x08003335
 800330c:	0800334b 	.word	0x0800334b
 8003310:	0800333b 	.word	0x0800333b
 8003314:	0800334b 	.word	0x0800334b
 8003318:	0800334b 	.word	0x0800334b
 800331c:	0800334b 	.word	0x0800334b
 8003320:	08003343 	.word	0x08003343
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003324:	f7fe fd8c 	bl	8001e40 <HAL_RCC_GetPCLK1Freq>
 8003328:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800332a:	e014      	b.n	8003356 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800332c:	f7fe fd9e 	bl	8001e6c <HAL_RCC_GetPCLK2Freq>
 8003330:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003332:	e010      	b.n	8003356 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003334:	4b4e      	ldr	r3, [pc, #312]	@ (8003470 <UART_SetConfig+0x5c0>)
 8003336:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003338:	e00d      	b.n	8003356 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800333a:	f7fe fd13 	bl	8001d64 <HAL_RCC_GetSysClockFreq>
 800333e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003340:	e009      	b.n	8003356 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003342:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003346:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003348:	e005      	b.n	8003356 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800334a:	2300      	movs	r3, #0
 800334c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003354:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003358:	2b00      	cmp	r3, #0
 800335a:	f000 8090 	beq.w	800347e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003362:	4a44      	ldr	r2, [pc, #272]	@ (8003474 <UART_SetConfig+0x5c4>)
 8003364:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003368:	461a      	mov	r2, r3
 800336a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800336c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003370:	005a      	lsls	r2, r3, #1
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	085b      	lsrs	r3, r3, #1
 8003378:	441a      	add	r2, r3
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003382:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003384:	6a3b      	ldr	r3, [r7, #32]
 8003386:	2b0f      	cmp	r3, #15
 8003388:	d916      	bls.n	80033b8 <UART_SetConfig+0x508>
 800338a:	6a3b      	ldr	r3, [r7, #32]
 800338c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003390:	d212      	bcs.n	80033b8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003392:	6a3b      	ldr	r3, [r7, #32]
 8003394:	b29b      	uxth	r3, r3
 8003396:	f023 030f 	bic.w	r3, r3, #15
 800339a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800339c:	6a3b      	ldr	r3, [r7, #32]
 800339e:	085b      	lsrs	r3, r3, #1
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	f003 0307 	and.w	r3, r3, #7
 80033a6:	b29a      	uxth	r2, r3
 80033a8:	8bfb      	ldrh	r3, [r7, #30]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	8bfa      	ldrh	r2, [r7, #30]
 80033b4:	60da      	str	r2, [r3, #12]
 80033b6:	e062      	b.n	800347e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80033be:	e05e      	b.n	800347e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80033c0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80033c4:	2b08      	cmp	r3, #8
 80033c6:	d828      	bhi.n	800341a <UART_SetConfig+0x56a>
 80033c8:	a201      	add	r2, pc, #4	@ (adr r2, 80033d0 <UART_SetConfig+0x520>)
 80033ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ce:	bf00      	nop
 80033d0:	080033f5 	.word	0x080033f5
 80033d4:	080033fd 	.word	0x080033fd
 80033d8:	08003405 	.word	0x08003405
 80033dc:	0800341b 	.word	0x0800341b
 80033e0:	0800340b 	.word	0x0800340b
 80033e4:	0800341b 	.word	0x0800341b
 80033e8:	0800341b 	.word	0x0800341b
 80033ec:	0800341b 	.word	0x0800341b
 80033f0:	08003413 	.word	0x08003413
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033f4:	f7fe fd24 	bl	8001e40 <HAL_RCC_GetPCLK1Freq>
 80033f8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80033fa:	e014      	b.n	8003426 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033fc:	f7fe fd36 	bl	8001e6c <HAL_RCC_GetPCLK2Freq>
 8003400:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003402:	e010      	b.n	8003426 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003404:	4b1a      	ldr	r3, [pc, #104]	@ (8003470 <UART_SetConfig+0x5c0>)
 8003406:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003408:	e00d      	b.n	8003426 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800340a:	f7fe fcab 	bl	8001d64 <HAL_RCC_GetSysClockFreq>
 800340e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003410:	e009      	b.n	8003426 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003412:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003416:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003418:	e005      	b.n	8003426 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800341a:	2300      	movs	r3, #0
 800341c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003424:	bf00      	nop
    }

    if (pclk != 0U)
 8003426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003428:	2b00      	cmp	r3, #0
 800342a:	d028      	beq.n	800347e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003430:	4a10      	ldr	r2, [pc, #64]	@ (8003474 <UART_SetConfig+0x5c4>)
 8003432:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003436:	461a      	mov	r2, r3
 8003438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800343a:	fbb3 f2f2 	udiv	r2, r3, r2
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	085b      	lsrs	r3, r3, #1
 8003444:	441a      	add	r2, r3
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	fbb2 f3f3 	udiv	r3, r2, r3
 800344e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003450:	6a3b      	ldr	r3, [r7, #32]
 8003452:	2b0f      	cmp	r3, #15
 8003454:	d910      	bls.n	8003478 <UART_SetConfig+0x5c8>
 8003456:	6a3b      	ldr	r3, [r7, #32]
 8003458:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800345c:	d20c      	bcs.n	8003478 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800345e:	6a3b      	ldr	r3, [r7, #32]
 8003460:	b29a      	uxth	r2, r3
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	60da      	str	r2, [r3, #12]
 8003468:	e009      	b.n	800347e <UART_SetConfig+0x5ce>
 800346a:	bf00      	nop
 800346c:	40008000 	.word	0x40008000
 8003470:	00f42400 	.word	0x00f42400
 8003474:	08003b74 	.word	0x08003b74
      }
      else
      {
        ret = HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	2201      	movs	r2, #1
 8003482:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	2201      	movs	r2, #1
 800348a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	2200      	movs	r2, #0
 8003492:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	2200      	movs	r2, #0
 8003498:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800349a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3730      	adds	r7, #48	@ 0x30
 80034a2:	46bd      	mov	sp, r7
 80034a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080034a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034b4:	f003 0308 	and.w	r3, r3, #8
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d00a      	beq.n	80034d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	430a      	orrs	r2, r1
 80034d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034d6:	f003 0301 	and.w	r3, r3, #1
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d00a      	beq.n	80034f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	430a      	orrs	r2, r1
 80034f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034f8:	f003 0302 	and.w	r3, r3, #2
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d00a      	beq.n	8003516 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	430a      	orrs	r2, r1
 8003514:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800351a:	f003 0304 	and.w	r3, r3, #4
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00a      	beq.n	8003538 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	430a      	orrs	r2, r1
 8003536:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800353c:	f003 0310 	and.w	r3, r3, #16
 8003540:	2b00      	cmp	r3, #0
 8003542:	d00a      	beq.n	800355a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	430a      	orrs	r2, r1
 8003558:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800355e:	f003 0320 	and.w	r3, r3, #32
 8003562:	2b00      	cmp	r3, #0
 8003564:	d00a      	beq.n	800357c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	430a      	orrs	r2, r1
 800357a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003580:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003584:	2b00      	cmp	r3, #0
 8003586:	d01a      	beq.n	80035be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	430a      	orrs	r2, r1
 800359c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80035a6:	d10a      	bne.n	80035be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	430a      	orrs	r2, r1
 80035bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d00a      	beq.n	80035e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	430a      	orrs	r2, r1
 80035de:	605a      	str	r2, [r3, #4]
  }
}
 80035e0:	bf00      	nop
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b098      	sub	sp, #96	@ 0x60
 80035f0:	af02      	add	r7, sp, #8
 80035f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80035fc:	f7fd fb36 	bl	8000c6c <HAL_GetTick>
 8003600:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0308 	and.w	r3, r3, #8
 800360c:	2b08      	cmp	r3, #8
 800360e:	d12f      	bne.n	8003670 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003610:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003614:	9300      	str	r3, [sp, #0]
 8003616:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003618:	2200      	movs	r2, #0
 800361a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f000 f88e 	bl	8003740 <UART_WaitOnFlagUntilTimeout>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d022      	beq.n	8003670 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003630:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003632:	e853 3f00 	ldrex	r3, [r3]
 8003636:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003638:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800363a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800363e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	461a      	mov	r2, r3
 8003646:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003648:	647b      	str	r3, [r7, #68]	@ 0x44
 800364a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800364c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800364e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003650:	e841 2300 	strex	r3, r2, [r1]
 8003654:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003656:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003658:	2b00      	cmp	r3, #0
 800365a:	d1e6      	bne.n	800362a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2220      	movs	r2, #32
 8003660:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	e063      	b.n	8003738 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0304 	and.w	r3, r3, #4
 800367a:	2b04      	cmp	r3, #4
 800367c:	d149      	bne.n	8003712 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800367e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003682:	9300      	str	r3, [sp, #0]
 8003684:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003686:	2200      	movs	r2, #0
 8003688:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f000 f857 	bl	8003740 <UART_WaitOnFlagUntilTimeout>
 8003692:	4603      	mov	r3, r0
 8003694:	2b00      	cmp	r3, #0
 8003696:	d03c      	beq.n	8003712 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800369e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036a0:	e853 3f00 	ldrex	r3, [r3]
 80036a4:	623b      	str	r3, [r7, #32]
   return(result);
 80036a6:	6a3b      	ldr	r3, [r7, #32]
 80036a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80036ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	461a      	mov	r2, r3
 80036b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80036b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80036bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036be:	e841 2300 	strex	r3, r2, [r1]
 80036c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80036c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d1e6      	bne.n	8003698 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	3308      	adds	r3, #8
 80036d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	e853 3f00 	ldrex	r3, [r3]
 80036d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	f023 0301 	bic.w	r3, r3, #1
 80036e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	3308      	adds	r3, #8
 80036e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80036ea:	61fa      	str	r2, [r7, #28]
 80036ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ee:	69b9      	ldr	r1, [r7, #24]
 80036f0:	69fa      	ldr	r2, [r7, #28]
 80036f2:	e841 2300 	strex	r3, r2, [r1]
 80036f6:	617b      	str	r3, [r7, #20]
   return(result);
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d1e5      	bne.n	80036ca <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2220      	movs	r2, #32
 8003702:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800370e:	2303      	movs	r3, #3
 8003710:	e012      	b.n	8003738 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2220      	movs	r2, #32
 8003716:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2220      	movs	r2, #32
 800371e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003736:	2300      	movs	r3, #0
}
 8003738:	4618      	mov	r0, r3
 800373a:	3758      	adds	r7, #88	@ 0x58
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}

08003740 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	60b9      	str	r1, [r7, #8]
 800374a:	603b      	str	r3, [r7, #0]
 800374c:	4613      	mov	r3, r2
 800374e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003750:	e04f      	b.n	80037f2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003758:	d04b      	beq.n	80037f2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800375a:	f7fd fa87 	bl	8000c6c <HAL_GetTick>
 800375e:	4602      	mov	r2, r0
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	69ba      	ldr	r2, [r7, #24]
 8003766:	429a      	cmp	r2, r3
 8003768:	d302      	bcc.n	8003770 <UART_WaitOnFlagUntilTimeout+0x30>
 800376a:	69bb      	ldr	r3, [r7, #24]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d101      	bne.n	8003774 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	e04e      	b.n	8003812 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0304 	and.w	r3, r3, #4
 800377e:	2b00      	cmp	r3, #0
 8003780:	d037      	beq.n	80037f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	2b80      	cmp	r3, #128	@ 0x80
 8003786:	d034      	beq.n	80037f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	2b40      	cmp	r3, #64	@ 0x40
 800378c:	d031      	beq.n	80037f2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	69db      	ldr	r3, [r3, #28]
 8003794:	f003 0308 	and.w	r3, r3, #8
 8003798:	2b08      	cmp	r3, #8
 800379a:	d110      	bne.n	80037be <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	2208      	movs	r2, #8
 80037a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80037a4:	68f8      	ldr	r0, [r7, #12]
 80037a6:	f000 f838 	bl	800381a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2208      	movs	r2, #8
 80037ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e029      	b.n	8003812 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	69db      	ldr	r3, [r3, #28]
 80037c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80037c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80037cc:	d111      	bne.n	80037f2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80037d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80037d8:	68f8      	ldr	r0, [r7, #12]
 80037da:	f000 f81e 	bl	800381a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2220      	movs	r2, #32
 80037e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e00f      	b.n	8003812 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	69da      	ldr	r2, [r3, #28]
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	4013      	ands	r3, r2
 80037fc:	68ba      	ldr	r2, [r7, #8]
 80037fe:	429a      	cmp	r2, r3
 8003800:	bf0c      	ite	eq
 8003802:	2301      	moveq	r3, #1
 8003804:	2300      	movne	r3, #0
 8003806:	b2db      	uxtb	r3, r3
 8003808:	461a      	mov	r2, r3
 800380a:	79fb      	ldrb	r3, [r7, #7]
 800380c:	429a      	cmp	r2, r3
 800380e:	d0a0      	beq.n	8003752 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003810:	2300      	movs	r3, #0
}
 8003812:	4618      	mov	r0, r3
 8003814:	3710      	adds	r7, #16
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}

0800381a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800381a:	b480      	push	{r7}
 800381c:	b095      	sub	sp, #84	@ 0x54
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003828:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800382a:	e853 3f00 	ldrex	r3, [r3]
 800382e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003832:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003836:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	461a      	mov	r2, r3
 800383e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003840:	643b      	str	r3, [r7, #64]	@ 0x40
 8003842:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003844:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003846:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003848:	e841 2300 	strex	r3, r2, [r1]
 800384c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800384e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003850:	2b00      	cmp	r3, #0
 8003852:	d1e6      	bne.n	8003822 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	3308      	adds	r3, #8
 800385a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800385c:	6a3b      	ldr	r3, [r7, #32]
 800385e:	e853 3f00 	ldrex	r3, [r3]
 8003862:	61fb      	str	r3, [r7, #28]
   return(result);
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800386a:	f023 0301 	bic.w	r3, r3, #1
 800386e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	3308      	adds	r3, #8
 8003876:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003878:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800387a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800387c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800387e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003880:	e841 2300 	strex	r3, r2, [r1]
 8003884:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003888:	2b00      	cmp	r3, #0
 800388a:	d1e3      	bne.n	8003854 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003890:	2b01      	cmp	r3, #1
 8003892:	d118      	bne.n	80038c6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	e853 3f00 	ldrex	r3, [r3]
 80038a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	f023 0310 	bic.w	r3, r3, #16
 80038a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	461a      	mov	r2, r3
 80038b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038b2:	61bb      	str	r3, [r7, #24]
 80038b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b6:	6979      	ldr	r1, [r7, #20]
 80038b8:	69ba      	ldr	r2, [r7, #24]
 80038ba:	e841 2300 	strex	r3, r2, [r1]
 80038be:	613b      	str	r3, [r7, #16]
   return(result);
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d1e6      	bne.n	8003894 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2220      	movs	r2, #32
 80038ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80038da:	bf00      	nop
 80038dc:	3754      	adds	r7, #84	@ 0x54
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr

080038e6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80038e6:	b480      	push	{r7}
 80038e8:	b085      	sub	sp, #20
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d101      	bne.n	80038fc <HAL_UARTEx_DisableFifoMode+0x16>
 80038f8:	2302      	movs	r3, #2
 80038fa:	e027      	b.n	800394c <HAL_UARTEx_DisableFifoMode+0x66>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2224      	movs	r2, #36	@ 0x24
 8003908:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f022 0201 	bic.w	r2, r2, #1
 8003922:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800392a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2220      	movs	r2, #32
 800393e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800394a:	2300      	movs	r3, #0
}
 800394c:	4618      	mov	r0, r3
 800394e:	3714      	adds	r7, #20
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr

08003958 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003968:	2b01      	cmp	r3, #1
 800396a:	d101      	bne.n	8003970 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800396c:	2302      	movs	r3, #2
 800396e:	e02d      	b.n	80039cc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2224      	movs	r2, #36	@ 0x24
 800397c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f022 0201 	bic.w	r2, r2, #1
 8003996:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	683a      	ldr	r2, [r7, #0]
 80039a8:	430a      	orrs	r2, r1
 80039aa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f000 f84f 	bl	8003a50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	68fa      	ldr	r2, [r7, #12]
 80039b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2220      	movs	r2, #32
 80039be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80039ca:	2300      	movs	r3, #0
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3710      	adds	r7, #16
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d101      	bne.n	80039ec <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80039e8:	2302      	movs	r3, #2
 80039ea:	e02d      	b.n	8003a48 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2224      	movs	r2, #36	@ 0x24
 80039f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f022 0201 	bic.w	r2, r2, #1
 8003a12:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	683a      	ldr	r2, [r7, #0]
 8003a24:	430a      	orrs	r2, r1
 8003a26:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f000 f811 	bl	8003a50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68fa      	ldr	r2, [r7, #12]
 8003a34:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2220      	movs	r2, #32
 8003a3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003a46:	2300      	movs	r3, #0
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3710      	adds	r7, #16
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b085      	sub	sp, #20
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d108      	bne.n	8003a72 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003a70:	e031      	b.n	8003ad6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003a72:	2308      	movs	r3, #8
 8003a74:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003a76:	2308      	movs	r3, #8
 8003a78:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	0e5b      	lsrs	r3, r3, #25
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	f003 0307 	and.w	r3, r3, #7
 8003a88:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	0f5b      	lsrs	r3, r3, #29
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	f003 0307 	and.w	r3, r3, #7
 8003a98:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003a9a:	7bbb      	ldrb	r3, [r7, #14]
 8003a9c:	7b3a      	ldrb	r2, [r7, #12]
 8003a9e:	4911      	ldr	r1, [pc, #68]	@ (8003ae4 <UARTEx_SetNbDataToProcess+0x94>)
 8003aa0:	5c8a      	ldrb	r2, [r1, r2]
 8003aa2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003aa6:	7b3a      	ldrb	r2, [r7, #12]
 8003aa8:	490f      	ldr	r1, [pc, #60]	@ (8003ae8 <UARTEx_SetNbDataToProcess+0x98>)
 8003aaa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003aac:	fb93 f3f2 	sdiv	r3, r3, r2
 8003ab0:	b29a      	uxth	r2, r3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003ab8:	7bfb      	ldrb	r3, [r7, #15]
 8003aba:	7b7a      	ldrb	r2, [r7, #13]
 8003abc:	4909      	ldr	r1, [pc, #36]	@ (8003ae4 <UARTEx_SetNbDataToProcess+0x94>)
 8003abe:	5c8a      	ldrb	r2, [r1, r2]
 8003ac0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003ac4:	7b7a      	ldrb	r2, [r7, #13]
 8003ac6:	4908      	ldr	r1, [pc, #32]	@ (8003ae8 <UARTEx_SetNbDataToProcess+0x98>)
 8003ac8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003aca:	fb93 f3f2 	sdiv	r3, r3, r2
 8003ace:	b29a      	uxth	r2, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8003ad6:	bf00      	nop
 8003ad8:	3714      	adds	r7, #20
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop
 8003ae4:	08003b8c 	.word	0x08003b8c
 8003ae8:	08003b94 	.word	0x08003b94

08003aec <memset>:
 8003aec:	4402      	add	r2, r0
 8003aee:	4603      	mov	r3, r0
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d100      	bne.n	8003af6 <memset+0xa>
 8003af4:	4770      	bx	lr
 8003af6:	f803 1b01 	strb.w	r1, [r3], #1
 8003afa:	e7f9      	b.n	8003af0 <memset+0x4>

08003afc <__libc_init_array>:
 8003afc:	b570      	push	{r4, r5, r6, lr}
 8003afe:	4d0d      	ldr	r5, [pc, #52]	@ (8003b34 <__libc_init_array+0x38>)
 8003b00:	4c0d      	ldr	r4, [pc, #52]	@ (8003b38 <__libc_init_array+0x3c>)
 8003b02:	1b64      	subs	r4, r4, r5
 8003b04:	10a4      	asrs	r4, r4, #2
 8003b06:	2600      	movs	r6, #0
 8003b08:	42a6      	cmp	r6, r4
 8003b0a:	d109      	bne.n	8003b20 <__libc_init_array+0x24>
 8003b0c:	4d0b      	ldr	r5, [pc, #44]	@ (8003b3c <__libc_init_array+0x40>)
 8003b0e:	4c0c      	ldr	r4, [pc, #48]	@ (8003b40 <__libc_init_array+0x44>)
 8003b10:	f000 f818 	bl	8003b44 <_init>
 8003b14:	1b64      	subs	r4, r4, r5
 8003b16:	10a4      	asrs	r4, r4, #2
 8003b18:	2600      	movs	r6, #0
 8003b1a:	42a6      	cmp	r6, r4
 8003b1c:	d105      	bne.n	8003b2a <__libc_init_array+0x2e>
 8003b1e:	bd70      	pop	{r4, r5, r6, pc}
 8003b20:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b24:	4798      	blx	r3
 8003b26:	3601      	adds	r6, #1
 8003b28:	e7ee      	b.n	8003b08 <__libc_init_array+0xc>
 8003b2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b2e:	4798      	blx	r3
 8003b30:	3601      	adds	r6, #1
 8003b32:	e7f2      	b.n	8003b1a <__libc_init_array+0x1e>
 8003b34:	08003ba4 	.word	0x08003ba4
 8003b38:	08003ba4 	.word	0x08003ba4
 8003b3c:	08003ba4 	.word	0x08003ba4
 8003b40:	08003ba8 	.word	0x08003ba8

08003b44 <_init>:
 8003b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b46:	bf00      	nop
 8003b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b4a:	bc08      	pop	{r3}
 8003b4c:	469e      	mov	lr, r3
 8003b4e:	4770      	bx	lr

08003b50 <_fini>:
 8003b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b52:	bf00      	nop
 8003b54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b56:	bc08      	pop	{r3}
 8003b58:	469e      	mov	lr, r3
 8003b5a:	4770      	bx	lr
