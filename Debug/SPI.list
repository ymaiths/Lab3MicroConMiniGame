
SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004810  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080049e8  080049e8  000059e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a28  08004a28  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  08004a28  08004a28  00005a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a30  08004a30  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a30  08004a30  00005a30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004a34  08004a34  00005a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004a38  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000264  20000010  08004a44  00006010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000274  08004a44  00006274  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001581e  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002757  00000000  00000000  0001b85a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001298  00000000  00000000  0001dfb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ea0  00000000  00000000  0001f250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000020db  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015d37  00000000  00000000  000221cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fde47  00000000  00000000  00037f02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00135d49  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fbc  00000000  00000000  00135d8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  0013ad48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080049d0 	.word	0x080049d0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	080049d0 	.word	0x080049d0

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800050c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050e:	f000 fd8e 	bl	800102e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000512:	f000 f87d 	bl	8000610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000516:	f000 f983 	bl	8000820 <MX_GPIO_Init>
  MX_SPI3_Init();
 800051a:	f000 f8c5 	bl	80006a8 <MX_SPI3_Init>
  MX_TIM16_Init();
 800051e:	f000 f901 	bl	8000724 <MX_TIM16_Init>
  MX_USART1_UART_Init();
 8000522:	f000 f92f 	bl	8000784 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  SPITxRx_Setup();
 8000526:	f000 fb91 	bl	8000c4c <SPITxRx_Setup>
  IODIRB_Init(); //Led
 800052a:	f000 fba5 	bl	8000c78 <IODIRB_Init>
  IODIRA_Init(); //Button
 800052e:	f000 fbcb 	bl	8000cc8 <IODIRA_Init>
  num = 4;
 8000532:	4b2f      	ldr	r3, [pc, #188]	@ (80005f0 <main+0xe8>)
 8000534:	2204      	movs	r2, #4
 8000536:	701a      	strb	r2, [r3, #0]
  mode = 1;
 8000538:	4b2e      	ldr	r3, [pc, #184]	@ (80005f4 <main+0xec>)
 800053a:	2201      	movs	r2, #1
 800053c:	701a      	strb	r2, [r3, #0]
  StartGame = 0;
 800053e:	4b2e      	ldr	r3, [pc, #184]	@ (80005f8 <main+0xf0>)
 8000540:	2200      	movs	r2, #0
 8000542:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	Rand = Rand +1;
 8000544:	4b2d      	ldr	r3, [pc, #180]	@ (80005fc <main+0xf4>)
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	3301      	adds	r3, #1
 800054a:	b2da      	uxtb	r2, r3
 800054c:	4b2b      	ldr	r3, [pc, #172]	@ (80005fc <main+0xf4>)
 800054e:	701a      	strb	r2, [r3, #0]
	if(StartGame == 1){
 8000550:	4b29      	ldr	r3, [pc, #164]	@ (80005f8 <main+0xf0>)
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	2b01      	cmp	r3, #1
 8000556:	d13e      	bne.n	80005d6 <main+0xce>
		static uint64_t timestamp = 0;
		if (HAL_GetTick() > timestamp){
 8000558:	f000 fdce 	bl	80010f8 <HAL_GetTick>
 800055c:	4603      	mov	r3, r0
 800055e:	2200      	movs	r2, #0
 8000560:	461c      	mov	r4, r3
 8000562:	4615      	mov	r5, r2
 8000564:	4b26      	ldr	r3, [pc, #152]	@ (8000600 <main+0xf8>)
 8000566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800056a:	42a2      	cmp	r2, r4
 800056c:	41ab      	sbcs	r3, r5
 800056e:	d238      	bcs.n	80005e2 <main+0xda>
			if(mode == 1){
 8000570:	4b20      	ldr	r3, [pc, #128]	@ (80005f4 <main+0xec>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	2b01      	cmp	r3, #1
 8000576:	d11c      	bne.n	80005b2 <main+0xaa>
				  RandNum = (Rand%4)+1;
 8000578:	4b20      	ldr	r3, [pc, #128]	@ (80005fc <main+0xf4>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	f003 0303 	and.w	r3, r3, #3
 8000580:	b2db      	uxtb	r3, r3
 8000582:	3301      	adds	r3, #1
 8000584:	b2da      	uxtb	r2, r3
 8000586:	4b1f      	ldr	r3, [pc, #124]	@ (8000604 <main+0xfc>)
 8000588:	701a      	strb	r2, [r3, #0]
				  SPITxRx_writeIO();
 800058a:	f000 fa75 	bl	8000a78 <SPITxRx_writeIO>
				  a[0] += 1;
 800058e:	4b1e      	ldr	r3, [pc, #120]	@ (8000608 <main+0x100>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	3301      	adds	r3, #1
 8000594:	b2da      	uxtb	r2, r3
 8000596:	4b1c      	ldr	r3, [pc, #112]	@ (8000608 <main+0x100>)
 8000598:	701a      	strb	r2, [r3, #0]
				  timestamp = HAL_GetTick() + 800;
 800059a:	f000 fdad 	bl	80010f8 <HAL_GetTick>
 800059e:	4603      	mov	r3, r0
 80005a0:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 80005a4:	2200      	movs	r2, #0
 80005a6:	4698      	mov	r8, r3
 80005a8:	4691      	mov	r9, r2
 80005aa:	4b15      	ldr	r3, [pc, #84]	@ (8000600 <main+0xf8>)
 80005ac:	e9c3 8900 	strd	r8, r9, [r3]
 80005b0:	e017      	b.n	80005e2 <main+0xda>

			}else if(mode ==2){
 80005b2:	4b10      	ldr	r3, [pc, #64]	@ (80005f4 <main+0xec>)
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	2b02      	cmp	r3, #2
 80005b8:	d102      	bne.n	80005c0 <main+0xb8>
				SPITxRx_readIO();
 80005ba:	f000 f9d1 	bl	8000960 <SPITxRx_readIO>
 80005be:	e010      	b.n	80005e2 <main+0xda>

			}else if(mode ==3)
 80005c0:	4b0c      	ldr	r3, [pc, #48]	@ (80005f4 <main+0xec>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	2b03      	cmp	r3, #3
 80005c6:	d10c      	bne.n	80005e2 <main+0xda>
				a[9]=AnsCheck();
 80005c8:	f000 faf2 	bl	8000bb0 <AnsCheck>
 80005cc:	4603      	mov	r3, r0
 80005ce:	461a      	mov	r2, r3
 80005d0:	4b0d      	ldr	r3, [pc, #52]	@ (8000608 <main+0x100>)
 80005d2:	725a      	strb	r2, [r3, #9]
 80005d4:	e005      	b.n	80005e2 <main+0xda>
		}
	}else if(StartGame == 0){
 80005d6:	4b08      	ldr	r3, [pc, #32]	@ (80005f8 <main+0xf0>)
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d101      	bne.n	80005e2 <main+0xda>
		SPITxRx_readIO();
 80005de:	f000 f9bf 	bl	8000960 <SPITxRx_readIO>
		}
	Score = num-4;
 80005e2:	4b03      	ldr	r3, [pc, #12]	@ (80005f0 <main+0xe8>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	3b04      	subs	r3, #4
 80005e8:	b2da      	uxtb	r2, r3
 80005ea:	4b08      	ldr	r3, [pc, #32]	@ (800060c <main+0x104>)
 80005ec:	701a      	strb	r2, [r3, #0]
	Rand = Rand +1;
 80005ee:	e7a9      	b.n	8000544 <main+0x3c>
 80005f0:	20000256 	.word	0x20000256
 80005f4:	2000023e 	.word	0x2000023e
 80005f8:	20000265 	.word	0x20000265
 80005fc:	20000262 	.word	0x20000262
 8000600:	20000268 	.word	0x20000268
 8000604:	20000263 	.word	0x20000263
 8000608:	20000258 	.word	0x20000258
 800060c:	20000266 	.word	0x20000266

08000610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b094      	sub	sp, #80	@ 0x50
 8000614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000616:	f107 0318 	add.w	r3, r7, #24
 800061a:	2238      	movs	r2, #56	@ 0x38
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f004 f9aa 	bl	8004978 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000624:	1d3b      	adds	r3, r7, #4
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	605a      	str	r2, [r3, #4]
 800062c:	609a      	str	r2, [r3, #8]
 800062e:	60da      	str	r2, [r3, #12]
 8000630:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000632:	2000      	movs	r0, #0
 8000634:	f001 f8da 	bl	80017ec <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000638:	2302      	movs	r3, #2
 800063a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800063c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000640:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000642:	2340      	movs	r3, #64	@ 0x40
 8000644:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000646:	2302      	movs	r3, #2
 8000648:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800064a:	2302      	movs	r3, #2
 800064c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800064e:	2304      	movs	r3, #4
 8000650:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000652:	2355      	movs	r3, #85	@ 0x55
 8000654:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000656:	2302      	movs	r3, #2
 8000658:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800065a:	2302      	movs	r3, #2
 800065c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800065e:	2302      	movs	r3, #2
 8000660:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000662:	f107 0318 	add.w	r3, r7, #24
 8000666:	4618      	mov	r0, r3
 8000668:	f001 f974 	bl	8001954 <HAL_RCC_OscConfig>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000672:	f000 fb61 	bl	8000d38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000676:	230f      	movs	r3, #15
 8000678:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800067a:	2303      	movs	r3, #3
 800067c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800067e:	2300      	movs	r3, #0
 8000680:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000682:	2300      	movs	r3, #0
 8000684:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000686:	2300      	movs	r3, #0
 8000688:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800068a:	1d3b      	adds	r3, r7, #4
 800068c:	2104      	movs	r1, #4
 800068e:	4618      	mov	r0, r3
 8000690:	f001 fc72 	bl	8001f78 <HAL_RCC_ClockConfig>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800069a:	f000 fb4d 	bl	8000d38 <Error_Handler>
  }
}
 800069e:	bf00      	nop
 80006a0:	3750      	adds	r7, #80	@ 0x50
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
	...

080006a8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80006ac:	4b1b      	ldr	r3, [pc, #108]	@ (800071c <MX_SPI3_Init+0x74>)
 80006ae:	4a1c      	ldr	r2, [pc, #112]	@ (8000720 <MX_SPI3_Init+0x78>)
 80006b0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80006b2:	4b1a      	ldr	r3, [pc, #104]	@ (800071c <MX_SPI3_Init+0x74>)
 80006b4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80006b8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80006ba:	4b18      	ldr	r3, [pc, #96]	@ (800071c <MX_SPI3_Init+0x74>)
 80006bc:	2200      	movs	r2, #0
 80006be:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80006c0:	4b16      	ldr	r3, [pc, #88]	@ (800071c <MX_SPI3_Init+0x74>)
 80006c2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80006c6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006c8:	4b14      	ldr	r3, [pc, #80]	@ (800071c <MX_SPI3_Init+0x74>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006ce:	4b13      	ldr	r3, [pc, #76]	@ (800071c <MX_SPI3_Init+0x74>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80006d4:	4b11      	ldr	r3, [pc, #68]	@ (800071c <MX_SPI3_Init+0x74>)
 80006d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006da:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80006dc:	4b0f      	ldr	r3, [pc, #60]	@ (800071c <MX_SPI3_Init+0x74>)
 80006de:	2228      	movs	r2, #40	@ 0x28
 80006e0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006e2:	4b0e      	ldr	r3, [pc, #56]	@ (800071c <MX_SPI3_Init+0x74>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80006e8:	4b0c      	ldr	r3, [pc, #48]	@ (800071c <MX_SPI3_Init+0x74>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006ee:	4b0b      	ldr	r3, [pc, #44]	@ (800071c <MX_SPI3_Init+0x74>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80006f4:	4b09      	ldr	r3, [pc, #36]	@ (800071c <MX_SPI3_Init+0x74>)
 80006f6:	2207      	movs	r2, #7
 80006f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80006fa:	4b08      	ldr	r3, [pc, #32]	@ (800071c <MX_SPI3_Init+0x74>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000700:	4b06      	ldr	r3, [pc, #24]	@ (800071c <MX_SPI3_Init+0x74>)
 8000702:	2208      	movs	r2, #8
 8000704:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000706:	4805      	ldr	r0, [pc, #20]	@ (800071c <MX_SPI3_Init+0x74>)
 8000708:	f002 f8a0 	bl	800284c <HAL_SPI_Init>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000712:	f000 fb11 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	2000002c 	.word	0x2000002c
 8000720:	40003c00 	.word	0x40003c00

08000724 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000728:	4b14      	ldr	r3, [pc, #80]	@ (800077c <MX_TIM16_Init+0x58>)
 800072a:	4a15      	ldr	r2, [pc, #84]	@ (8000780 <MX_TIM16_Init+0x5c>)
 800072c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 800072e:	4b13      	ldr	r3, [pc, #76]	@ (800077c <MX_TIM16_Init+0x58>)
 8000730:	22a9      	movs	r2, #169	@ 0xa9
 8000732:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000734:	4b11      	ldr	r3, [pc, #68]	@ (800077c <MX_TIM16_Init+0x58>)
 8000736:	2200      	movs	r2, #0
 8000738:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 800073a:	4b10      	ldr	r3, [pc, #64]	@ (800077c <MX_TIM16_Init+0x58>)
 800073c:	f240 4279 	movw	r2, #1145	@ 0x479
 8000740:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000742:	4b0e      	ldr	r3, [pc, #56]	@ (800077c <MX_TIM16_Init+0x58>)
 8000744:	2200      	movs	r2, #0
 8000746:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000748:	4b0c      	ldr	r3, [pc, #48]	@ (800077c <MX_TIM16_Init+0x58>)
 800074a:	2200      	movs	r2, #0
 800074c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800074e:	4b0b      	ldr	r3, [pc, #44]	@ (800077c <MX_TIM16_Init+0x58>)
 8000750:	2200      	movs	r2, #0
 8000752:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000754:	4809      	ldr	r0, [pc, #36]	@ (800077c <MX_TIM16_Init+0x58>)
 8000756:	f002 fda1 	bl	800329c <HAL_TIM_Base_Init>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8000760:	f000 faea 	bl	8000d38 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8000764:	2108      	movs	r1, #8
 8000766:	4805      	ldr	r0, [pc, #20]	@ (800077c <MX_TIM16_Init+0x58>)
 8000768:	f002 fdfc 	bl	8003364 <HAL_TIM_OnePulse_Init>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 8000772:	f000 fae1 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	20000090 	.word	0x20000090
 8000780:	40014400 	.word	0x40014400

08000784 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000788:	4b23      	ldr	r3, [pc, #140]	@ (8000818 <MX_USART1_UART_Init+0x94>)
 800078a:	4a24      	ldr	r2, [pc, #144]	@ (800081c <MX_USART1_UART_Init+0x98>)
 800078c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 800078e:	4b22      	ldr	r3, [pc, #136]	@ (8000818 <MX_USART1_UART_Init+0x94>)
 8000790:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8000794:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8000796:	4b20      	ldr	r3, [pc, #128]	@ (8000818 <MX_USART1_UART_Init+0x94>)
 8000798:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800079c:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800079e:	4b1e      	ldr	r3, [pc, #120]	@ (8000818 <MX_USART1_UART_Init+0x94>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 80007a4:	4b1c      	ldr	r3, [pc, #112]	@ (8000818 <MX_USART1_UART_Init+0x94>)
 80007a6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80007aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007ac:	4b1a      	ldr	r3, [pc, #104]	@ (8000818 <MX_USART1_UART_Init+0x94>)
 80007ae:	220c      	movs	r2, #12
 80007b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007b2:	4b19      	ldr	r3, [pc, #100]	@ (8000818 <MX_USART1_UART_Init+0x94>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b8:	4b17      	ldr	r3, [pc, #92]	@ (8000818 <MX_USART1_UART_Init+0x94>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007be:	4b16      	ldr	r3, [pc, #88]	@ (8000818 <MX_USART1_UART_Init+0x94>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007c4:	4b14      	ldr	r3, [pc, #80]	@ (8000818 <MX_USART1_UART_Init+0x94>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007ca:	4b13      	ldr	r3, [pc, #76]	@ (8000818 <MX_USART1_UART_Init+0x94>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007d0:	4811      	ldr	r0, [pc, #68]	@ (8000818 <MX_USART1_UART_Init+0x94>)
 80007d2:	f003 f987 	bl	8003ae4 <HAL_UART_Init>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_USART1_UART_Init+0x5c>
  {
    Error_Handler();
 80007dc:	f000 faac 	bl	8000d38 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007e0:	2100      	movs	r1, #0
 80007e2:	480d      	ldr	r0, [pc, #52]	@ (8000818 <MX_USART1_UART_Init+0x94>)
 80007e4:	f003 fffe 	bl	80047e4 <HAL_UARTEx_SetTxFifoThreshold>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_USART1_UART_Init+0x6e>
  {
    Error_Handler();
 80007ee:	f000 faa3 	bl	8000d38 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007f2:	2100      	movs	r1, #0
 80007f4:	4808      	ldr	r0, [pc, #32]	@ (8000818 <MX_USART1_UART_Init+0x94>)
 80007f6:	f004 f833 	bl	8004860 <HAL_UARTEx_SetRxFifoThreshold>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_USART1_UART_Init+0x80>
  {
    Error_Handler();
 8000800:	f000 fa9a 	bl	8000d38 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000804:	4804      	ldr	r0, [pc, #16]	@ (8000818 <MX_USART1_UART_Init+0x94>)
 8000806:	f003 ffb4 	bl	8004772 <HAL_UARTEx_DisableFifoMode>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_USART1_UART_Init+0x90>
  {
    Error_Handler();
 8000810:	f000 fa92 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000814:	bf00      	nop
 8000816:	bd80      	pop	{r7, pc}
 8000818:	2000015c 	.word	0x2000015c
 800081c:	40013800 	.word	0x40013800

08000820 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b08a      	sub	sp, #40	@ 0x28
 8000824:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000826:	f107 0314 	add.w	r3, r7, #20
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]
 8000830:	609a      	str	r2, [r3, #8]
 8000832:	60da      	str	r2, [r3, #12]
 8000834:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000836:	4b47      	ldr	r3, [pc, #284]	@ (8000954 <MX_GPIO_Init+0x134>)
 8000838:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800083a:	4a46      	ldr	r2, [pc, #280]	@ (8000954 <MX_GPIO_Init+0x134>)
 800083c:	f043 0304 	orr.w	r3, r3, #4
 8000840:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000842:	4b44      	ldr	r3, [pc, #272]	@ (8000954 <MX_GPIO_Init+0x134>)
 8000844:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000846:	f003 0304 	and.w	r3, r3, #4
 800084a:	613b      	str	r3, [r7, #16]
 800084c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800084e:	4b41      	ldr	r3, [pc, #260]	@ (8000954 <MX_GPIO_Init+0x134>)
 8000850:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000852:	4a40      	ldr	r2, [pc, #256]	@ (8000954 <MX_GPIO_Init+0x134>)
 8000854:	f043 0320 	orr.w	r3, r3, #32
 8000858:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800085a:	4b3e      	ldr	r3, [pc, #248]	@ (8000954 <MX_GPIO_Init+0x134>)
 800085c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800085e:	f003 0320 	and.w	r3, r3, #32
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000866:	4b3b      	ldr	r3, [pc, #236]	@ (8000954 <MX_GPIO_Init+0x134>)
 8000868:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800086a:	4a3a      	ldr	r2, [pc, #232]	@ (8000954 <MX_GPIO_Init+0x134>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000872:	4b38      	ldr	r3, [pc, #224]	@ (8000954 <MX_GPIO_Init+0x134>)
 8000874:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	60bb      	str	r3, [r7, #8]
 800087c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800087e:	4b35      	ldr	r3, [pc, #212]	@ (8000954 <MX_GPIO_Init+0x134>)
 8000880:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000882:	4a34      	ldr	r2, [pc, #208]	@ (8000954 <MX_GPIO_Init+0x134>)
 8000884:	f043 0308 	orr.w	r3, r3, #8
 8000888:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800088a:	4b32      	ldr	r3, [pc, #200]	@ (8000954 <MX_GPIO_Init+0x134>)
 800088c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800088e:	f003 0308 	and.w	r3, r3, #8
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000896:	4b2f      	ldr	r3, [pc, #188]	@ (8000954 <MX_GPIO_Init+0x134>)
 8000898:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800089a:	4a2e      	ldr	r2, [pc, #184]	@ (8000954 <MX_GPIO_Init+0x134>)
 800089c:	f043 0302 	orr.w	r3, r3, #2
 80008a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008a2:	4b2c      	ldr	r3, [pc, #176]	@ (8000954 <MX_GPIO_Init+0x134>)
 80008a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008a6:	f003 0302 	and.w	r3, r3, #2
 80008aa:	603b      	str	r3, [r7, #0]
 80008ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2120      	movs	r1, #32
 80008b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008b6:	f000 ff5d 	bl	8001774 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 80008ba:	2201      	movs	r2, #1
 80008bc:	2104      	movs	r1, #4
 80008be:	4826      	ldr	r0, [pc, #152]	@ (8000958 <MX_GPIO_Init+0x138>)
 80008c0:	f000 ff58 	bl	8001774 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008ca:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008d4:	f107 0314 	add.w	r3, r7, #20
 80008d8:	4619      	mov	r1, r3
 80008da:	4820      	ldr	r0, [pc, #128]	@ (800095c <MX_GPIO_Init+0x13c>)
 80008dc:	f000 fdb0 	bl	8001440 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPUART1_TX_Pin LPUART1_RX_Pin */
  GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80008e0:	230c      	movs	r3, #12
 80008e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e4:	2302      	movs	r3, #2
 80008e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ec:	2300      	movs	r3, #0
 80008ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80008f0:	230c      	movs	r3, #12
 80008f2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f4:	f107 0314 	add.w	r3, r7, #20
 80008f8:	4619      	mov	r1, r3
 80008fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008fe:	f000 fd9f 	bl	8001440 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000902:	2320      	movs	r3, #32
 8000904:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000906:	2301      	movs	r3, #1
 8000908:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090e:	2300      	movs	r3, #0
 8000910:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000912:	f107 0314 	add.w	r3, r7, #20
 8000916:	4619      	mov	r1, r3
 8000918:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800091c:	f000 fd90 	bl	8001440 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000920:	2304      	movs	r3, #4
 8000922:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000924:	2301      	movs	r3, #1
 8000926:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092c:	2300      	movs	r3, #0
 800092e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000930:	f107 0314 	add.w	r3, r7, #20
 8000934:	4619      	mov	r1, r3
 8000936:	4808      	ldr	r0, [pc, #32]	@ (8000958 <MX_GPIO_Init+0x138>)
 8000938:	f000 fd82 	bl	8001440 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800093c:	2200      	movs	r2, #0
 800093e:	2100      	movs	r1, #0
 8000940:	2028      	movs	r0, #40	@ 0x28
 8000942:	f000 fce2 	bl	800130a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000946:	2028      	movs	r0, #40	@ 0x28
 8000948:	f000 fcf9 	bl	800133e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800094c:	bf00      	nop
 800094e:	3728      	adds	r7, #40	@ 0x28
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	40021000 	.word	0x40021000
 8000958:	48000c00 	.word	0x48000c00
 800095c:	48000800 	.word	0x48000800

08000960 <SPITxRx_readIO>:

/* USER CODE BEGIN 4 */

void SPITxRx_readIO() //mode2
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_2)){
 8000964:	2104      	movs	r1, #4
 8000966:	483b      	ldr	r0, [pc, #236]	@ (8000a54 <SPITxRx_readIO+0xf4>)
 8000968:	f000 feec 	bl	8001744 <HAL_GPIO_ReadPin>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d06d      	beq.n	8000a4e <SPITxRx_readIO+0xee>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0); // CS Select
 8000972:	2200      	movs	r2, #0
 8000974:	2104      	movs	r1, #4
 8000976:	4837      	ldr	r0, [pc, #220]	@ (8000a54 <SPITxRx_readIO+0xf4>)
 8000978:	f000 fefc 	bl	8001774 <HAL_GPIO_WritePin>
		SPITx[0] = 0b01000001;
 800097c:	4b36      	ldr	r3, [pc, #216]	@ (8000a58 <SPITxRx_readIO+0xf8>)
 800097e:	2241      	movs	r2, #65	@ 0x41
 8000980:	701a      	strb	r2, [r3, #0]
		SPITx[1] = 0x12;
 8000982:	4b35      	ldr	r3, [pc, #212]	@ (8000a58 <SPITxRx_readIO+0xf8>)
 8000984:	2212      	movs	r2, #18
 8000986:	705a      	strb	r2, [r3, #1]
		SPITx[2] = 0;
 8000988:	4b33      	ldr	r3, [pc, #204]	@ (8000a58 <SPITxRx_readIO+0xf8>)
 800098a:	2200      	movs	r2, #0
 800098c:	709a      	strb	r2, [r3, #2]

		if(SPIRx[2]== 14){
 800098e:	4b33      	ldr	r3, [pc, #204]	@ (8000a5c <SPITxRx_readIO+0xfc>)
 8000990:	789b      	ldrb	r3, [r3, #2]
 8000992:	2b0e      	cmp	r3, #14
 8000994:	d106      	bne.n	80009a4 <SPITxRx_readIO+0x44>
			a[4] = 1;
 8000996:	4b32      	ldr	r3, [pc, #200]	@ (8000a60 <SPITxRx_readIO+0x100>)
 8000998:	2201      	movs	r2, #1
 800099a:	711a      	strb	r2, [r3, #4]
			StartGame =1;
 800099c:	4b31      	ldr	r3, [pc, #196]	@ (8000a64 <SPITxRx_readIO+0x104>)
 800099e:	2201      	movs	r2, #1
 80009a0:	701a      	strb	r2, [r3, #0]
 80009a2:	e01a      	b.n	80009da <SPITxRx_readIO+0x7a>
		}else if(SPIRx[2]== 13){
 80009a4:	4b2d      	ldr	r3, [pc, #180]	@ (8000a5c <SPITxRx_readIO+0xfc>)
 80009a6:	789b      	ldrb	r3, [r3, #2]
 80009a8:	2b0d      	cmp	r3, #13
 80009aa:	d103      	bne.n	80009b4 <SPITxRx_readIO+0x54>
			a[4] = 2;
 80009ac:	4b2c      	ldr	r3, [pc, #176]	@ (8000a60 <SPITxRx_readIO+0x100>)
 80009ae:	2202      	movs	r2, #2
 80009b0:	711a      	strb	r2, [r3, #4]
 80009b2:	e012      	b.n	80009da <SPITxRx_readIO+0x7a>
		}else if(SPIRx[2]== 11){
 80009b4:	4b29      	ldr	r3, [pc, #164]	@ (8000a5c <SPITxRx_readIO+0xfc>)
 80009b6:	789b      	ldrb	r3, [r3, #2]
 80009b8:	2b0b      	cmp	r3, #11
 80009ba:	d103      	bne.n	80009c4 <SPITxRx_readIO+0x64>
			a[4] = 3;
 80009bc:	4b28      	ldr	r3, [pc, #160]	@ (8000a60 <SPITxRx_readIO+0x100>)
 80009be:	2203      	movs	r2, #3
 80009c0:	711a      	strb	r2, [r3, #4]
 80009c2:	e00a      	b.n	80009da <SPITxRx_readIO+0x7a>
		}else if(SPIRx[2]== 7){
 80009c4:	4b25      	ldr	r3, [pc, #148]	@ (8000a5c <SPITxRx_readIO+0xfc>)
 80009c6:	789b      	ldrb	r3, [r3, #2]
 80009c8:	2b07      	cmp	r3, #7
 80009ca:	d103      	bne.n	80009d4 <SPITxRx_readIO+0x74>
			a[4] = 4;
 80009cc:	4b24      	ldr	r3, [pc, #144]	@ (8000a60 <SPITxRx_readIO+0x100>)
 80009ce:	2204      	movs	r2, #4
 80009d0:	711a      	strb	r2, [r3, #4]
 80009d2:	e002      	b.n	80009da <SPITxRx_readIO+0x7a>
		}else{
			a[4] = 5;
 80009d4:	4b22      	ldr	r3, [pc, #136]	@ (8000a60 <SPITxRx_readIO+0x100>)
 80009d6:	2205      	movs	r2, #5
 80009d8:	711a      	strb	r2, [r3, #4]
		}

		if(a[5]!=a[4] && a[4] == 5 && a[5] != 0){
 80009da:	4b21      	ldr	r3, [pc, #132]	@ (8000a60 <SPITxRx_readIO+0x100>)
 80009dc:	795a      	ldrb	r2, [r3, #5]
 80009de:	4b20      	ldr	r3, [pc, #128]	@ (8000a60 <SPITxRx_readIO+0x100>)
 80009e0:	791b      	ldrb	r3, [r3, #4]
 80009e2:	429a      	cmp	r2, r3
 80009e4:	d014      	beq.n	8000a10 <SPITxRx_readIO+0xb0>
 80009e6:	4b1e      	ldr	r3, [pc, #120]	@ (8000a60 <SPITxRx_readIO+0x100>)
 80009e8:	791b      	ldrb	r3, [r3, #4]
 80009ea:	2b05      	cmp	r3, #5
 80009ec:	d110      	bne.n	8000a10 <SPITxRx_readIO+0xb0>
 80009ee:	4b1c      	ldr	r3, [pc, #112]	@ (8000a60 <SPITxRx_readIO+0x100>)
 80009f0:	795b      	ldrb	r3, [r3, #5]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d00c      	beq.n	8000a10 <SPITxRx_readIO+0xb0>
			PushOrder[a[2]-1] = a[5];
 80009f6:	4b1a      	ldr	r3, [pc, #104]	@ (8000a60 <SPITxRx_readIO+0x100>)
 80009f8:	789b      	ldrb	r3, [r3, #2]
 80009fa:	3b01      	subs	r3, #1
 80009fc:	4a18      	ldr	r2, [pc, #96]	@ (8000a60 <SPITxRx_readIO+0x100>)
 80009fe:	7951      	ldrb	r1, [r2, #5]
 8000a00:	4a19      	ldr	r2, [pc, #100]	@ (8000a68 <SPITxRx_readIO+0x108>)
 8000a02:	54d1      	strb	r1, [r2, r3]
			a[2]=a[2]+1;
 8000a04:	4b16      	ldr	r3, [pc, #88]	@ (8000a60 <SPITxRx_readIO+0x100>)
 8000a06:	789b      	ldrb	r3, [r3, #2]
 8000a08:	3301      	adds	r3, #1
 8000a0a:	b2da      	uxtb	r2, r3
 8000a0c:	4b14      	ldr	r3, [pc, #80]	@ (8000a60 <SPITxRx_readIO+0x100>)
 8000a0e:	709a      	strb	r2, [r3, #2]
		}
		// set a[5] = old a[4]
		a[5] = a[4];
 8000a10:	4b13      	ldr	r3, [pc, #76]	@ (8000a60 <SPITxRx_readIO+0x100>)
 8000a12:	791a      	ldrb	r2, [r3, #4]
 8000a14:	4b12      	ldr	r3, [pc, #72]	@ (8000a60 <SPITxRx_readIO+0x100>)
 8000a16:	715a      	strb	r2, [r3, #5]
		a[8] +=1 ;
 8000a18:	4b11      	ldr	r3, [pc, #68]	@ (8000a60 <SPITxRx_readIO+0x100>)
 8000a1a:	7a1b      	ldrb	r3, [r3, #8]
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	b2da      	uxtb	r2, r3
 8000a20:	4b0f      	ldr	r3, [pc, #60]	@ (8000a60 <SPITxRx_readIO+0x100>)
 8000a22:	721a      	strb	r2, [r3, #8]

		if(a[2] > num){
 8000a24:	4b0e      	ldr	r3, [pc, #56]	@ (8000a60 <SPITxRx_readIO+0x100>)
 8000a26:	789a      	ldrb	r2, [r3, #2]
 8000a28:	4b10      	ldr	r3, [pc, #64]	@ (8000a6c <SPITxRx_readIO+0x10c>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	d908      	bls.n	8000a42 <SPITxRx_readIO+0xe2>
			a[7] =1;
 8000a30:	4b0b      	ldr	r3, [pc, #44]	@ (8000a60 <SPITxRx_readIO+0x100>)
 8000a32:	2201      	movs	r2, #1
 8000a34:	71da      	strb	r2, [r3, #7]
			mode = 3;
 8000a36:	4b0e      	ldr	r3, [pc, #56]	@ (8000a70 <SPITxRx_readIO+0x110>)
 8000a38:	2203      	movs	r2, #3
 8000a3a:	701a      	strb	r2, [r3, #0]
			a[2] = 1;
 8000a3c:	4b08      	ldr	r3, [pc, #32]	@ (8000a60 <SPITxRx_readIO+0x100>)
 8000a3e:	2201      	movs	r2, #1
 8000a40:	709a      	strb	r2, [r3, #2]
		}


	HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 3);
 8000a42:	2303      	movs	r3, #3
 8000a44:	4a05      	ldr	r2, [pc, #20]	@ (8000a5c <SPITxRx_readIO+0xfc>)
 8000a46:	4904      	ldr	r1, [pc, #16]	@ (8000a58 <SPITxRx_readIO+0xf8>)
 8000a48:	480a      	ldr	r0, [pc, #40]	@ (8000a74 <SPITxRx_readIO+0x114>)
 8000a4a:	f001 ffab 	bl	80029a4 <HAL_SPI_TransmitReceive_IT>

}}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	48000c00 	.word	0x48000c00
 8000a58:	20000234 	.word	0x20000234
 8000a5c:	20000228 	.word	0x20000228
 8000a60:	20000258 	.word	0x20000258
 8000a64:	20000265 	.word	0x20000265
 8000a68:	2000024c 	.word	0x2000024c
 8000a6c:	20000256 	.word	0x20000256
 8000a70:	2000023e 	.word	0x2000023e
 8000a74:	2000002c 	.word	0x2000002c

08000a78 <SPITxRx_writeIO>:

void SPITxRx_writeIO(){ //mode1
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_2)){
 8000a7c:	2104      	movs	r1, #4
 8000a7e:	4842      	ldr	r0, [pc, #264]	@ (8000b88 <SPITxRx_writeIO+0x110>)
 8000a80:	f000 fe60 	bl	8001744 <HAL_GPIO_ReadPin>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d07c      	beq.n	8000b84 <SPITxRx_writeIO+0x10c>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0); // CS Select
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2104      	movs	r1, #4
 8000a8e:	483e      	ldr	r0, [pc, #248]	@ (8000b88 <SPITxRx_writeIO+0x110>)
 8000a90:	f000 fe70 	bl	8001774 <HAL_GPIO_WritePin>
		if(LedOff == 0){
 8000a94:	4b3d      	ldr	r3, [pc, #244]	@ (8000b8c <SPITxRx_writeIO+0x114>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d14a      	bne.n	8000b32 <SPITxRx_writeIO+0xba>
			SPITx[0] = 0b01000000;
 8000a9c:	4b3c      	ldr	r3, [pc, #240]	@ (8000b90 <SPITxRx_writeIO+0x118>)
 8000a9e:	2240      	movs	r2, #64	@ 0x40
 8000aa0:	701a      	strb	r2, [r3, #0]
			SPITx[1] = 0x15;
 8000aa2:	4b3b      	ldr	r3, [pc, #236]	@ (8000b90 <SPITxRx_writeIO+0x118>)
 8000aa4:	2215      	movs	r2, #21
 8000aa6:	705a      	strb	r2, [r3, #1]
				if(RandNum == 1){
 8000aa8:	4b3a      	ldr	r3, [pc, #232]	@ (8000b94 <SPITxRx_writeIO+0x11c>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	d109      	bne.n	8000ac4 <SPITxRx_writeIO+0x4c>
					SPITx[2] = ~(0b00000001);
 8000ab0:	4b37      	ldr	r3, [pc, #220]	@ (8000b90 <SPITxRx_writeIO+0x118>)
 8000ab2:	22fe      	movs	r2, #254	@ 0xfe
 8000ab4:	709a      	strb	r2, [r3, #2]
					LedOff = 1 ;
 8000ab6:	4b35      	ldr	r3, [pc, #212]	@ (8000b8c <SPITxRx_writeIO+0x114>)
 8000ab8:	2201      	movs	r2, #1
 8000aba:	701a      	strb	r2, [r3, #0]
					a[3] = 1;
 8000abc:	4b36      	ldr	r3, [pc, #216]	@ (8000b98 <SPITxRx_writeIO+0x120>)
 8000abe:	2201      	movs	r2, #1
 8000ac0:	70da      	strb	r2, [r3, #3]
 8000ac2:	e028      	b.n	8000b16 <SPITxRx_writeIO+0x9e>
				}else if(RandNum == 2){
 8000ac4:	4b33      	ldr	r3, [pc, #204]	@ (8000b94 <SPITxRx_writeIO+0x11c>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	2b02      	cmp	r3, #2
 8000aca:	d109      	bne.n	8000ae0 <SPITxRx_writeIO+0x68>
					SPITx[2] = ~(0b00000010);
 8000acc:	4b30      	ldr	r3, [pc, #192]	@ (8000b90 <SPITxRx_writeIO+0x118>)
 8000ace:	22fd      	movs	r2, #253	@ 0xfd
 8000ad0:	709a      	strb	r2, [r3, #2]
					LedOff = 1 ;
 8000ad2:	4b2e      	ldr	r3, [pc, #184]	@ (8000b8c <SPITxRx_writeIO+0x114>)
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	701a      	strb	r2, [r3, #0]
					a[3] = 2;
 8000ad8:	4b2f      	ldr	r3, [pc, #188]	@ (8000b98 <SPITxRx_writeIO+0x120>)
 8000ada:	2202      	movs	r2, #2
 8000adc:	70da      	strb	r2, [r3, #3]
 8000ade:	e01a      	b.n	8000b16 <SPITxRx_writeIO+0x9e>
				}else if(RandNum == 3){
 8000ae0:	4b2c      	ldr	r3, [pc, #176]	@ (8000b94 <SPITxRx_writeIO+0x11c>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	2b03      	cmp	r3, #3
 8000ae6:	d109      	bne.n	8000afc <SPITxRx_writeIO+0x84>
					SPITx[2] = ~(0b00000100);
 8000ae8:	4b29      	ldr	r3, [pc, #164]	@ (8000b90 <SPITxRx_writeIO+0x118>)
 8000aea:	22fb      	movs	r2, #251	@ 0xfb
 8000aec:	709a      	strb	r2, [r3, #2]
					LedOff = 1 ;
 8000aee:	4b27      	ldr	r3, [pc, #156]	@ (8000b8c <SPITxRx_writeIO+0x114>)
 8000af0:	2201      	movs	r2, #1
 8000af2:	701a      	strb	r2, [r3, #0]
					a[3] = 3;
 8000af4:	4b28      	ldr	r3, [pc, #160]	@ (8000b98 <SPITxRx_writeIO+0x120>)
 8000af6:	2203      	movs	r2, #3
 8000af8:	70da      	strb	r2, [r3, #3]
 8000afa:	e00c      	b.n	8000b16 <SPITxRx_writeIO+0x9e>
				}else if(RandNum == 4){
 8000afc:	4b25      	ldr	r3, [pc, #148]	@ (8000b94 <SPITxRx_writeIO+0x11c>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	2b04      	cmp	r3, #4
 8000b02:	d108      	bne.n	8000b16 <SPITxRx_writeIO+0x9e>
					SPITx[2] = ~(0b00001000);
 8000b04:	4b22      	ldr	r3, [pc, #136]	@ (8000b90 <SPITxRx_writeIO+0x118>)
 8000b06:	22f7      	movs	r2, #247	@ 0xf7
 8000b08:	709a      	strb	r2, [r3, #2]
					LedOff = 1 ;
 8000b0a:	4b20      	ldr	r3, [pc, #128]	@ (8000b8c <SPITxRx_writeIO+0x114>)
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	701a      	strb	r2, [r3, #0]
					a[3] = 4;
 8000b10:	4b21      	ldr	r3, [pc, #132]	@ (8000b98 <SPITxRx_writeIO+0x120>)
 8000b12:	2204      	movs	r2, #4
 8000b14:	70da      	strb	r2, [r3, #3]
				}
			LightOrder[a[1]] = a[3];
 8000b16:	4b20      	ldr	r3, [pc, #128]	@ (8000b98 <SPITxRx_writeIO+0x120>)
 8000b18:	785b      	ldrb	r3, [r3, #1]
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	4b1e      	ldr	r3, [pc, #120]	@ (8000b98 <SPITxRx_writeIO+0x120>)
 8000b1e:	78d9      	ldrb	r1, [r3, #3]
 8000b20:	4b1e      	ldr	r3, [pc, #120]	@ (8000b9c <SPITxRx_writeIO+0x124>)
 8000b22:	5499      	strb	r1, [r3, r2]
			a[1] = a[1]+1;
 8000b24:	4b1c      	ldr	r3, [pc, #112]	@ (8000b98 <SPITxRx_writeIO+0x120>)
 8000b26:	785b      	ldrb	r3, [r3, #1]
 8000b28:	3301      	adds	r3, #1
 8000b2a:	b2da      	uxtb	r2, r3
 8000b2c:	4b1a      	ldr	r3, [pc, #104]	@ (8000b98 <SPITxRx_writeIO+0x120>)
 8000b2e:	705a      	strb	r2, [r3, #1]
 8000b30:	e022      	b.n	8000b78 <SPITxRx_writeIO+0x100>

		}else if(a[1] >= num){
 8000b32:	4b19      	ldr	r3, [pc, #100]	@ (8000b98 <SPITxRx_writeIO+0x120>)
 8000b34:	785a      	ldrb	r2, [r3, #1]
 8000b36:	4b1a      	ldr	r3, [pc, #104]	@ (8000ba0 <SPITxRx_writeIO+0x128>)
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	429a      	cmp	r2, r3
 8000b3c:	d30c      	bcc.n	8000b58 <SPITxRx_writeIO+0xe0>
			LedOff = 0;
 8000b3e:	4b13      	ldr	r3, [pc, #76]	@ (8000b8c <SPITxRx_writeIO+0x114>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	701a      	strb	r2, [r3, #0]
			SPITx[2] = 0b00000000;
 8000b44:	4b12      	ldr	r3, [pc, #72]	@ (8000b90 <SPITxRx_writeIO+0x118>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	709a      	strb	r2, [r3, #2]
			mode = 2;
 8000b4a:	4b16      	ldr	r3, [pc, #88]	@ (8000ba4 <SPITxRx_writeIO+0x12c>)
 8000b4c:	2202      	movs	r2, #2
 8000b4e:	701a      	strb	r2, [r3, #0]
			a[1] = 0;
 8000b50:	4b11      	ldr	r3, [pc, #68]	@ (8000b98 <SPITxRx_writeIO+0x120>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	705a      	strb	r2, [r3, #1]
 8000b56:	e00f      	b.n	8000b78 <SPITxRx_writeIO+0x100>


		}
		else if(LedOff == 1){
 8000b58:	4b0c      	ldr	r3, [pc, #48]	@ (8000b8c <SPITxRx_writeIO+0x114>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	2b01      	cmp	r3, #1
 8000b5e:	d10b      	bne.n	8000b78 <SPITxRx_writeIO+0x100>
			SPITx[0] = 0b01000000;
 8000b60:	4b0b      	ldr	r3, [pc, #44]	@ (8000b90 <SPITxRx_writeIO+0x118>)
 8000b62:	2240      	movs	r2, #64	@ 0x40
 8000b64:	701a      	strb	r2, [r3, #0]
			SPITx[1] = 0x15;
 8000b66:	4b0a      	ldr	r3, [pc, #40]	@ (8000b90 <SPITxRx_writeIO+0x118>)
 8000b68:	2215      	movs	r2, #21
 8000b6a:	705a      	strb	r2, [r3, #1]
			SPITx[2] = 0b11111111;
 8000b6c:	4b08      	ldr	r3, [pc, #32]	@ (8000b90 <SPITxRx_writeIO+0x118>)
 8000b6e:	22ff      	movs	r2, #255	@ 0xff
 8000b70:	709a      	strb	r2, [r3, #2]
			LedOff = 0;
 8000b72:	4b06      	ldr	r3, [pc, #24]	@ (8000b8c <SPITxRx_writeIO+0x114>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	701a      	strb	r2, [r3, #0]
		}
		HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 3);
 8000b78:	2303      	movs	r3, #3
 8000b7a:	4a0b      	ldr	r2, [pc, #44]	@ (8000ba8 <SPITxRx_writeIO+0x130>)
 8000b7c:	4904      	ldr	r1, [pc, #16]	@ (8000b90 <SPITxRx_writeIO+0x118>)
 8000b7e:	480b      	ldr	r0, [pc, #44]	@ (8000bac <SPITxRx_writeIO+0x134>)
 8000b80:	f001 ff10 	bl	80029a4 <HAL_SPI_TransmitReceive_IT>


	}}
 8000b84:	bf00      	nop
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	48000c00 	.word	0x48000c00
 8000b8c:	20000264 	.word	0x20000264
 8000b90:	20000234 	.word	0x20000234
 8000b94:	20000263 	.word	0x20000263
 8000b98:	20000258 	.word	0x20000258
 8000b9c:	20000240 	.word	0x20000240
 8000ba0:	20000256 	.word	0x20000256
 8000ba4:	2000023e 	.word	0x2000023e
 8000ba8:	20000228 	.word	0x20000228
 8000bac:	2000002c 	.word	0x2000002c

08000bb0 <AnsCheck>:

uint8_t AnsCheck(){
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
	if(LightOrder[a[6]]!=PushOrder[a[6]]){
 8000bb4:	4b1d      	ldr	r3, [pc, #116]	@ (8000c2c <AnsCheck+0x7c>)
 8000bb6:	799b      	ldrb	r3, [r3, #6]
 8000bb8:	461a      	mov	r2, r3
 8000bba:	4b1d      	ldr	r3, [pc, #116]	@ (8000c30 <AnsCheck+0x80>)
 8000bbc:	5c9a      	ldrb	r2, [r3, r2]
 8000bbe:	4b1b      	ldr	r3, [pc, #108]	@ (8000c2c <AnsCheck+0x7c>)
 8000bc0:	799b      	ldrb	r3, [r3, #6]
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	4b1b      	ldr	r3, [pc, #108]	@ (8000c34 <AnsCheck+0x84>)
 8000bc6:	5c5b      	ldrb	r3, [r3, r1]
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	d010      	beq.n	8000bee <AnsCheck+0x3e>
		StartGame = 0;
 8000bcc:	4b1a      	ldr	r3, [pc, #104]	@ (8000c38 <AnsCheck+0x88>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	701a      	strb	r2, [r3, #0]
		mode = 1;
 8000bd2:	4b1a      	ldr	r3, [pc, #104]	@ (8000c3c <AnsCheck+0x8c>)
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	701a      	strb	r2, [r3, #0]
		FinalScore = Score;
 8000bd8:	4b19      	ldr	r3, [pc, #100]	@ (8000c40 <AnsCheck+0x90>)
 8000bda:	781a      	ldrb	r2, [r3, #0]
 8000bdc:	4b19      	ldr	r3, [pc, #100]	@ (8000c44 <AnsCheck+0x94>)
 8000bde:	701a      	strb	r2, [r3, #0]
		num = 4;
 8000be0:	4b19      	ldr	r3, [pc, #100]	@ (8000c48 <AnsCheck+0x98>)
 8000be2:	2204      	movs	r2, #4
 8000be4:	701a      	strb	r2, [r3, #0]
		a[2] = 1;
 8000be6:	4b11      	ldr	r3, [pc, #68]	@ (8000c2c <AnsCheck+0x7c>)
 8000be8:	2201      	movs	r2, #1
 8000bea:	709a      	strb	r2, [r3, #2]
 8000bec:	e005      	b.n	8000bfa <AnsCheck+0x4a>
	}else{
		a[6] = a[6] + 1;
 8000bee:	4b0f      	ldr	r3, [pc, #60]	@ (8000c2c <AnsCheck+0x7c>)
 8000bf0:	799b      	ldrb	r3, [r3, #6]
 8000bf2:	3301      	adds	r3, #1
 8000bf4:	b2da      	uxtb	r2, r3
 8000bf6:	4b0d      	ldr	r3, [pc, #52]	@ (8000c2c <AnsCheck+0x7c>)
 8000bf8:	719a      	strb	r2, [r3, #6]
	}

	if(a[6] > num){
 8000bfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000c2c <AnsCheck+0x7c>)
 8000bfc:	799a      	ldrb	r2, [r3, #6]
 8000bfe:	4b12      	ldr	r3, [pc, #72]	@ (8000c48 <AnsCheck+0x98>)
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	429a      	cmp	r2, r3
 8000c04:	d90b      	bls.n	8000c1e <AnsCheck+0x6e>
		a[6] = 0;
 8000c06:	4b09      	ldr	r3, [pc, #36]	@ (8000c2c <AnsCheck+0x7c>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	719a      	strb	r2, [r3, #6]
		num += 1;
 8000c0c:	4b0e      	ldr	r3, [pc, #56]	@ (8000c48 <AnsCheck+0x98>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	3301      	adds	r3, #1
 8000c12:	b2da      	uxtb	r2, r3
 8000c14:	4b0c      	ldr	r3, [pc, #48]	@ (8000c48 <AnsCheck+0x98>)
 8000c16:	701a      	strb	r2, [r3, #0]
		mode = 1;
 8000c18:	4b08      	ldr	r3, [pc, #32]	@ (8000c3c <AnsCheck+0x8c>)
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	701a      	strb	r2, [r3, #0]
	}
}
 8000c1e:	bf00      	nop
 8000c20:	4618      	mov	r0, r3
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	20000258 	.word	0x20000258
 8000c30:	20000240 	.word	0x20000240
 8000c34:	2000024c 	.word	0x2000024c
 8000c38:	20000265 	.word	0x20000265
 8000c3c:	2000023e 	.word	0x2000023e
 8000c40:	20000266 	.word	0x20000266
 8000c44:	20000267 	.word	0x20000267
 8000c48:	20000256 	.word	0x20000256

08000c4c <SPITxRx_Setup>:


//void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
//	if()
//}
void SPITxRx_Setup(){
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
	//CS pulse
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0); // CS Select
 8000c50:	2200      	movs	r2, #0
 8000c52:	2104      	movs	r1, #4
 8000c54:	4807      	ldr	r0, [pc, #28]	@ (8000c74 <SPITxRx_Setup+0x28>)
 8000c56:	f000 fd8d 	bl	8001774 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000c5a:	2001      	movs	r0, #1
 8000c5c:	f000 fa58 	bl	8001110 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1); // CS deSelect
 8000c60:	2201      	movs	r2, #1
 8000c62:	2104      	movs	r1, #4
 8000c64:	4803      	ldr	r0, [pc, #12]	@ (8000c74 <SPITxRx_Setup+0x28>)
 8000c66:	f000 fd85 	bl	8001774 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000c6a:	2001      	movs	r0, #1
 8000c6c:	f000 fa50 	bl	8001110 <HAL_Delay>
}
 8000c70:	bf00      	nop
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	48000c00 	.word	0x48000c00

08000c78 <IODIRB_Init>:

void IODIRB_Init(){
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_2)){
 8000c7c:	2104      	movs	r1, #4
 8000c7e:	480e      	ldr	r0, [pc, #56]	@ (8000cb8 <IODIRB_Init+0x40>)
 8000c80:	f000 fd60 	bl	8001744 <HAL_GPIO_ReadPin>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d013      	beq.n	8000cb2 <IODIRB_Init+0x3a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0); // CS Select
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2104      	movs	r1, #4
 8000c8e:	480a      	ldr	r0, [pc, #40]	@ (8000cb8 <IODIRB_Init+0x40>)
 8000c90:	f000 fd70 	bl	8001774 <HAL_GPIO_WritePin>
		SPITx[0] = 0b01000000;
 8000c94:	4b09      	ldr	r3, [pc, #36]	@ (8000cbc <IODIRB_Init+0x44>)
 8000c96:	2240      	movs	r2, #64	@ 0x40
 8000c98:	701a      	strb	r2, [r3, #0]
		SPITx[1] = 0x01;
 8000c9a:	4b08      	ldr	r3, [pc, #32]	@ (8000cbc <IODIRB_Init+0x44>)
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	705a      	strb	r2, [r3, #1]
		SPITx[2] = 0;
 8000ca0:	4b06      	ldr	r3, [pc, #24]	@ (8000cbc <IODIRB_Init+0x44>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	709a      	strb	r2, [r3, #2]
		HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 3);
 8000ca6:	2303      	movs	r3, #3
 8000ca8:	4a05      	ldr	r2, [pc, #20]	@ (8000cc0 <IODIRB_Init+0x48>)
 8000caa:	4904      	ldr	r1, [pc, #16]	@ (8000cbc <IODIRB_Init+0x44>)
 8000cac:	4805      	ldr	r0, [pc, #20]	@ (8000cc4 <IODIRB_Init+0x4c>)
 8000cae:	f001 fe79 	bl	80029a4 <HAL_SPI_TransmitReceive_IT>
}}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	48000c00 	.word	0x48000c00
 8000cbc:	20000234 	.word	0x20000234
 8000cc0:	20000228 	.word	0x20000228
 8000cc4:	2000002c 	.word	0x2000002c

08000cc8 <IODIRA_Init>:

void IODIRA_Init(){
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_2)){
 8000ccc:	2104      	movs	r1, #4
 8000cce:	480e      	ldr	r0, [pc, #56]	@ (8000d08 <IODIRA_Init+0x40>)
 8000cd0:	f000 fd38 	bl	8001744 <HAL_GPIO_ReadPin>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d013      	beq.n	8000d02 <IODIRA_Init+0x3a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0); // CS Select
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2104      	movs	r1, #4
 8000cde:	480a      	ldr	r0, [pc, #40]	@ (8000d08 <IODIRA_Init+0x40>)
 8000ce0:	f000 fd48 	bl	8001774 <HAL_GPIO_WritePin>
		SPITx[0] = 0b01000001;
 8000ce4:	4b09      	ldr	r3, [pc, #36]	@ (8000d0c <IODIRA_Init+0x44>)
 8000ce6:	2241      	movs	r2, #65	@ 0x41
 8000ce8:	701a      	strb	r2, [r3, #0]
		SPITx[1] = 0x00;
 8000cea:	4b08      	ldr	r3, [pc, #32]	@ (8000d0c <IODIRA_Init+0x44>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	705a      	strb	r2, [r3, #1]
		SPITx[2] = 0;
 8000cf0:	4b06      	ldr	r3, [pc, #24]	@ (8000d0c <IODIRA_Init+0x44>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	709a      	strb	r2, [r3, #2]
		HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 3);
 8000cf6:	2303      	movs	r3, #3
 8000cf8:	4a05      	ldr	r2, [pc, #20]	@ (8000d10 <IODIRA_Init+0x48>)
 8000cfa:	4904      	ldr	r1, [pc, #16]	@ (8000d0c <IODIRA_Init+0x44>)
 8000cfc:	4805      	ldr	r0, [pc, #20]	@ (8000d14 <IODIRA_Init+0x4c>)
 8000cfe:	f001 fe51 	bl	80029a4 <HAL_SPI_TransmitReceive_IT>
}}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	48000c00 	.word	0x48000c00
 8000d0c:	20000234 	.word	0x20000234
 8000d10:	20000228 	.word	0x20000228
 8000d14:	2000002c 	.word	0x2000002c

08000d18 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1); //CS dnSelect
 8000d20:	2201      	movs	r2, #1
 8000d22:	2104      	movs	r1, #4
 8000d24:	4803      	ldr	r0, [pc, #12]	@ (8000d34 <HAL_SPI_TxRxCpltCallback+0x1c>)
 8000d26:	f000 fd25 	bl	8001774 <HAL_GPIO_WritePin>
}
 8000d2a:	bf00      	nop
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	48000c00 	.word	0x48000c00

08000d38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d3c:	b672      	cpsid	i
}
 8000d3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d40:	bf00      	nop
 8000d42:	e7fd      	b.n	8000d40 <Error_Handler+0x8>

08000d44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d4a:	4b0f      	ldr	r3, [pc, #60]	@ (8000d88 <HAL_MspInit+0x44>)
 8000d4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d4e:	4a0e      	ldr	r2, [pc, #56]	@ (8000d88 <HAL_MspInit+0x44>)
 8000d50:	f043 0301 	orr.w	r3, r3, #1
 8000d54:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d56:	4b0c      	ldr	r3, [pc, #48]	@ (8000d88 <HAL_MspInit+0x44>)
 8000d58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d5a:	f003 0301 	and.w	r3, r3, #1
 8000d5e:	607b      	str	r3, [r7, #4]
 8000d60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d62:	4b09      	ldr	r3, [pc, #36]	@ (8000d88 <HAL_MspInit+0x44>)
 8000d64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d66:	4a08      	ldr	r2, [pc, #32]	@ (8000d88 <HAL_MspInit+0x44>)
 8000d68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d6e:	4b06      	ldr	r3, [pc, #24]	@ (8000d88 <HAL_MspInit+0x44>)
 8000d70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d76:	603b      	str	r3, [r7, #0]
 8000d78:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000d7a:	f000 fddb 	bl	8001934 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40021000 	.word	0x40021000

08000d8c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b08a      	sub	sp, #40	@ 0x28
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d94:	f107 0314 	add.w	r3, r7, #20
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]
 8000da2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a1b      	ldr	r2, [pc, #108]	@ (8000e18 <HAL_SPI_MspInit+0x8c>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d130      	bne.n	8000e10 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000dae:	4b1b      	ldr	r3, [pc, #108]	@ (8000e1c <HAL_SPI_MspInit+0x90>)
 8000db0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000db2:	4a1a      	ldr	r2, [pc, #104]	@ (8000e1c <HAL_SPI_MspInit+0x90>)
 8000db4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000db8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000dba:	4b18      	ldr	r3, [pc, #96]	@ (8000e1c <HAL_SPI_MspInit+0x90>)
 8000dbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dbe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000dc2:	613b      	str	r3, [r7, #16]
 8000dc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dc6:	4b15      	ldr	r3, [pc, #84]	@ (8000e1c <HAL_SPI_MspInit+0x90>)
 8000dc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dca:	4a14      	ldr	r2, [pc, #80]	@ (8000e1c <HAL_SPI_MspInit+0x90>)
 8000dcc:	f043 0304 	orr.w	r3, r3, #4
 8000dd0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dd2:	4b12      	ldr	r3, [pc, #72]	@ (8000e1c <HAL_SPI_MspInit+0x90>)
 8000dd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dd6:	f003 0304 	and.w	r3, r3, #4
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000dde:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000de2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de4:	2302      	movs	r3, #2
 8000de6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de8:	2300      	movs	r3, #0
 8000dea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dec:	2300      	movs	r3, #0
 8000dee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000df0:	2306      	movs	r3, #6
 8000df2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000df4:	f107 0314 	add.w	r3, r7, #20
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4809      	ldr	r0, [pc, #36]	@ (8000e20 <HAL_SPI_MspInit+0x94>)
 8000dfc:	f000 fb20 	bl	8001440 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8000e00:	2200      	movs	r2, #0
 8000e02:	2100      	movs	r1, #0
 8000e04:	2033      	movs	r0, #51	@ 0x33
 8000e06:	f000 fa80 	bl	800130a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8000e0a:	2033      	movs	r0, #51	@ 0x33
 8000e0c:	f000 fa97 	bl	800133e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000e10:	bf00      	nop
 8000e12:	3728      	adds	r7, #40	@ 0x28
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	40003c00 	.word	0x40003c00
 8000e1c:	40021000 	.word	0x40021000
 8000e20:	48000800 	.word	0x48000800

08000e24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a0d      	ldr	r2, [pc, #52]	@ (8000e68 <HAL_TIM_Base_MspInit+0x44>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d113      	bne.n	8000e5e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000e36:	4b0d      	ldr	r3, [pc, #52]	@ (8000e6c <HAL_TIM_Base_MspInit+0x48>)
 8000e38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e3a:	4a0c      	ldr	r2, [pc, #48]	@ (8000e6c <HAL_TIM_Base_MspInit+0x48>)
 8000e3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e40:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e42:	4b0a      	ldr	r3, [pc, #40]	@ (8000e6c <HAL_TIM_Base_MspInit+0x48>)
 8000e44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000e4e:	2200      	movs	r2, #0
 8000e50:	2100      	movs	r1, #0
 8000e52:	2019      	movs	r0, #25
 8000e54:	f000 fa59 	bl	800130a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000e58:	2019      	movs	r0, #25
 8000e5a:	f000 fa70 	bl	800133e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000e5e:	bf00      	nop
 8000e60:	3710      	adds	r7, #16
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40014400 	.word	0x40014400
 8000e6c:	40021000 	.word	0x40021000

08000e70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b09e      	sub	sp, #120	@ 0x78
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e78:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	609a      	str	r2, [r3, #8]
 8000e84:	60da      	str	r2, [r3, #12]
 8000e86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e88:	f107 0310 	add.w	r3, r7, #16
 8000e8c:	2254      	movs	r2, #84	@ 0x54
 8000e8e:	2100      	movs	r1, #0
 8000e90:	4618      	mov	r0, r3
 8000e92:	f003 fd71 	bl	8004978 <memset>
  if(huart->Instance==USART1)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a1e      	ldr	r2, [pc, #120]	@ (8000f14 <HAL_UART_MspInit+0xa4>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d135      	bne.n	8000f0c <HAL_UART_MspInit+0x9c>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ea8:	f107 0310 	add.w	r3, r7, #16
 8000eac:	4618      	mov	r0, r3
 8000eae:	f001 fa7f 	bl	80023b0 <HAL_RCCEx_PeriphCLKConfig>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000eb8:	f7ff ff3e 	bl	8000d38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ebc:	4b16      	ldr	r3, [pc, #88]	@ (8000f18 <HAL_UART_MspInit+0xa8>)
 8000ebe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ec0:	4a15      	ldr	r2, [pc, #84]	@ (8000f18 <HAL_UART_MspInit+0xa8>)
 8000ec2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ec6:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ec8:	4b13      	ldr	r3, [pc, #76]	@ (8000f18 <HAL_UART_MspInit+0xa8>)
 8000eca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ecc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ed0:	60fb      	str	r3, [r7, #12]
 8000ed2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ed4:	4b10      	ldr	r3, [pc, #64]	@ (8000f18 <HAL_UART_MspInit+0xa8>)
 8000ed6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ed8:	4a0f      	ldr	r2, [pc, #60]	@ (8000f18 <HAL_UART_MspInit+0xa8>)
 8000eda:	f043 0304 	orr.w	r3, r3, #4
 8000ede:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ee0:	4b0d      	ldr	r3, [pc, #52]	@ (8000f18 <HAL_UART_MspInit+0xa8>)
 8000ee2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ee4:	f003 0304 	and.w	r3, r3, #4
 8000ee8:	60bb      	str	r3, [r7, #8]
 8000eea:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000eec:	2330      	movs	r3, #48	@ 0x30
 8000eee:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000efc:	2307      	movs	r3, #7
 8000efe:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f00:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000f04:	4619      	mov	r1, r3
 8000f06:	4805      	ldr	r0, [pc, #20]	@ (8000f1c <HAL_UART_MspInit+0xac>)
 8000f08:	f000 fa9a 	bl	8001440 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000f0c:	bf00      	nop
 8000f0e:	3778      	adds	r7, #120	@ 0x78
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	40013800 	.word	0x40013800
 8000f18:	40021000 	.word	0x40021000
 8000f1c:	48000800 	.word	0x48000800

08000f20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f24:	bf00      	nop
 8000f26:	e7fd      	b.n	8000f24 <NMI_Handler+0x4>

08000f28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f2c:	bf00      	nop
 8000f2e:	e7fd      	b.n	8000f2c <HardFault_Handler+0x4>

08000f30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f34:	bf00      	nop
 8000f36:	e7fd      	b.n	8000f34 <MemManage_Handler+0x4>

08000f38 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f3c:	bf00      	nop
 8000f3e:	e7fd      	b.n	8000f3c <BusFault_Handler+0x4>

08000f40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f44:	bf00      	nop
 8000f46:	e7fd      	b.n	8000f44 <UsageFault_Handler+0x4>

08000f48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr

08000f56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f56:	b480      	push	{r7}
 8000f58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr

08000f64 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f68:	bf00      	nop
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr

08000f72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f72:	b580      	push	{r7, lr}
 8000f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f76:	f000 f8ad 	bl	80010d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
	...

08000f80 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000f84:	4802      	ldr	r0, [pc, #8]	@ (8000f90 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000f86:	f002 fa55 	bl	8003434 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	20000090 	.word	0x20000090

08000f94 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000f98:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000f9c:	f000 fc02 	bl	80017a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000fa0:	bf00      	nop
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8000fa8:	4802      	ldr	r0, [pc, #8]	@ (8000fb4 <SPI3_IRQHandler+0x10>)
 8000faa:	f001 fda9 	bl	8002b00 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	2000002c 	.word	0x2000002c

08000fb8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000fbc:	4b06      	ldr	r3, [pc, #24]	@ (8000fd8 <SystemInit+0x20>)
 8000fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fc2:	4a05      	ldr	r2, [pc, #20]	@ (8000fd8 <SystemInit+0x20>)
 8000fc4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fc8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fcc:	bf00      	nop
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	e000ed00 	.word	0xe000ed00

08000fdc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000fdc:	480d      	ldr	r0, [pc, #52]	@ (8001014 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000fde:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fe0:	f7ff ffea 	bl	8000fb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fe4:	480c      	ldr	r0, [pc, #48]	@ (8001018 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fe6:	490d      	ldr	r1, [pc, #52]	@ (800101c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fe8:	4a0d      	ldr	r2, [pc, #52]	@ (8001020 <LoopForever+0xe>)
  movs r3, #0
 8000fea:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000fec:	e002      	b.n	8000ff4 <LoopCopyDataInit>

08000fee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ff0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ff2:	3304      	adds	r3, #4

08000ff4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ff4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ff6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ff8:	d3f9      	bcc.n	8000fee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ffa:	4a0a      	ldr	r2, [pc, #40]	@ (8001024 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ffc:	4c0a      	ldr	r4, [pc, #40]	@ (8001028 <LoopForever+0x16>)
  movs r3, #0
 8000ffe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001000:	e001      	b.n	8001006 <LoopFillZerobss>

08001002 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001002:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001004:	3204      	adds	r2, #4

08001006 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001006:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001008:	d3fb      	bcc.n	8001002 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800100a:	f003 fcbd 	bl	8004988 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800100e:	f7ff fa7b 	bl	8000508 <main>

08001012 <LoopForever>:

LoopForever:
    b LoopForever
 8001012:	e7fe      	b.n	8001012 <LoopForever>
  ldr   r0, =_estack
 8001014:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001018:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800101c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001020:	08004a38 	.word	0x08004a38
  ldr r2, =_sbss
 8001024:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001028:	20000274 	.word	0x20000274

0800102c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800102c:	e7fe      	b.n	800102c <ADC1_2_IRQHandler>

0800102e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	b082      	sub	sp, #8
 8001032:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001034:	2300      	movs	r3, #0
 8001036:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001038:	2003      	movs	r0, #3
 800103a:	f000 f95b 	bl	80012f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800103e:	2000      	movs	r0, #0
 8001040:	f000 f80e 	bl	8001060 <HAL_InitTick>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d002      	beq.n	8001050 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	71fb      	strb	r3, [r7, #7]
 800104e:	e001      	b.n	8001054 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001050:	f7ff fe78 	bl	8000d44 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001054:	79fb      	ldrb	r3, [r7, #7]

}
 8001056:	4618      	mov	r0, r3
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
	...

08001060 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001068:	2300      	movs	r3, #0
 800106a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800106c:	4b16      	ldr	r3, [pc, #88]	@ (80010c8 <HAL_InitTick+0x68>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d022      	beq.n	80010ba <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001074:	4b15      	ldr	r3, [pc, #84]	@ (80010cc <HAL_InitTick+0x6c>)
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	4b13      	ldr	r3, [pc, #76]	@ (80010c8 <HAL_InitTick+0x68>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001080:	fbb1 f3f3 	udiv	r3, r1, r3
 8001084:	fbb2 f3f3 	udiv	r3, r2, r3
 8001088:	4618      	mov	r0, r3
 800108a:	f000 f966 	bl	800135a <HAL_SYSTICK_Config>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d10f      	bne.n	80010b4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2b0f      	cmp	r3, #15
 8001098:	d809      	bhi.n	80010ae <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800109a:	2200      	movs	r2, #0
 800109c:	6879      	ldr	r1, [r7, #4]
 800109e:	f04f 30ff 	mov.w	r0, #4294967295
 80010a2:	f000 f932 	bl	800130a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010a6:	4a0a      	ldr	r2, [pc, #40]	@ (80010d0 <HAL_InitTick+0x70>)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6013      	str	r3, [r2, #0]
 80010ac:	e007      	b.n	80010be <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	73fb      	strb	r3, [r7, #15]
 80010b2:	e004      	b.n	80010be <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010b4:	2301      	movs	r3, #1
 80010b6:	73fb      	strb	r3, [r7, #15]
 80010b8:	e001      	b.n	80010be <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010be:	7bfb      	ldrb	r3, [r7, #15]
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3710      	adds	r7, #16
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	20000008 	.word	0x20000008
 80010cc:	20000000 	.word	0x20000000
 80010d0:	20000004 	.word	0x20000004

080010d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010d8:	4b05      	ldr	r3, [pc, #20]	@ (80010f0 <HAL_IncTick+0x1c>)
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	4b05      	ldr	r3, [pc, #20]	@ (80010f4 <HAL_IncTick+0x20>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4413      	add	r3, r2
 80010e2:	4a03      	ldr	r2, [pc, #12]	@ (80010f0 <HAL_IncTick+0x1c>)
 80010e4:	6013      	str	r3, [r2, #0]
}
 80010e6:	bf00      	nop
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr
 80010f0:	20000270 	.word	0x20000270
 80010f4:	20000008 	.word	0x20000008

080010f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  return uwTick;
 80010fc:	4b03      	ldr	r3, [pc, #12]	@ (800110c <HAL_GetTick+0x14>)
 80010fe:	681b      	ldr	r3, [r3, #0]
}
 8001100:	4618      	mov	r0, r3
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	20000270 	.word	0x20000270

08001110 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001118:	f7ff ffee 	bl	80010f8 <HAL_GetTick>
 800111c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001128:	d004      	beq.n	8001134 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800112a:	4b09      	ldr	r3, [pc, #36]	@ (8001150 <HAL_Delay+0x40>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	68fa      	ldr	r2, [r7, #12]
 8001130:	4413      	add	r3, r2
 8001132:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001134:	bf00      	nop
 8001136:	f7ff ffdf 	bl	80010f8 <HAL_GetTick>
 800113a:	4602      	mov	r2, r0
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	1ad3      	subs	r3, r2, r3
 8001140:	68fa      	ldr	r2, [r7, #12]
 8001142:	429a      	cmp	r2, r3
 8001144:	d8f7      	bhi.n	8001136 <HAL_Delay+0x26>
  {
  }
}
 8001146:	bf00      	nop
 8001148:	bf00      	nop
 800114a:	3710      	adds	r7, #16
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20000008 	.word	0x20000008

08001154 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f003 0307 	and.w	r3, r3, #7
 8001162:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001164:	4b0c      	ldr	r3, [pc, #48]	@ (8001198 <__NVIC_SetPriorityGrouping+0x44>)
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800116a:	68ba      	ldr	r2, [r7, #8]
 800116c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001170:	4013      	ands	r3, r2
 8001172:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800117c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001180:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001184:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001186:	4a04      	ldr	r2, [pc, #16]	@ (8001198 <__NVIC_SetPriorityGrouping+0x44>)
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	60d3      	str	r3, [r2, #12]
}
 800118c:	bf00      	nop
 800118e:	3714      	adds	r7, #20
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	e000ed00 	.word	0xe000ed00

0800119c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011a0:	4b04      	ldr	r3, [pc, #16]	@ (80011b4 <__NVIC_GetPriorityGrouping+0x18>)
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	0a1b      	lsrs	r3, r3, #8
 80011a6:	f003 0307 	and.w	r3, r3, #7
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr
 80011b4:	e000ed00 	.word	0xe000ed00

080011b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	db0b      	blt.n	80011e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	f003 021f 	and.w	r2, r3, #31
 80011d0:	4907      	ldr	r1, [pc, #28]	@ (80011f0 <__NVIC_EnableIRQ+0x38>)
 80011d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d6:	095b      	lsrs	r3, r3, #5
 80011d8:	2001      	movs	r0, #1
 80011da:	fa00 f202 	lsl.w	r2, r0, r2
 80011de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011e2:	bf00      	nop
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	e000e100 	.word	0xe000e100

080011f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	6039      	str	r1, [r7, #0]
 80011fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001200:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001204:	2b00      	cmp	r3, #0
 8001206:	db0a      	blt.n	800121e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	b2da      	uxtb	r2, r3
 800120c:	490c      	ldr	r1, [pc, #48]	@ (8001240 <__NVIC_SetPriority+0x4c>)
 800120e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001212:	0112      	lsls	r2, r2, #4
 8001214:	b2d2      	uxtb	r2, r2
 8001216:	440b      	add	r3, r1
 8001218:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800121c:	e00a      	b.n	8001234 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	b2da      	uxtb	r2, r3
 8001222:	4908      	ldr	r1, [pc, #32]	@ (8001244 <__NVIC_SetPriority+0x50>)
 8001224:	79fb      	ldrb	r3, [r7, #7]
 8001226:	f003 030f 	and.w	r3, r3, #15
 800122a:	3b04      	subs	r3, #4
 800122c:	0112      	lsls	r2, r2, #4
 800122e:	b2d2      	uxtb	r2, r2
 8001230:	440b      	add	r3, r1
 8001232:	761a      	strb	r2, [r3, #24]
}
 8001234:	bf00      	nop
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	e000e100 	.word	0xe000e100
 8001244:	e000ed00 	.word	0xe000ed00

08001248 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001248:	b480      	push	{r7}
 800124a:	b089      	sub	sp, #36	@ 0x24
 800124c:	af00      	add	r7, sp, #0
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	60b9      	str	r1, [r7, #8]
 8001252:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	f003 0307 	and.w	r3, r3, #7
 800125a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	f1c3 0307 	rsb	r3, r3, #7
 8001262:	2b04      	cmp	r3, #4
 8001264:	bf28      	it	cs
 8001266:	2304      	movcs	r3, #4
 8001268:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	3304      	adds	r3, #4
 800126e:	2b06      	cmp	r3, #6
 8001270:	d902      	bls.n	8001278 <NVIC_EncodePriority+0x30>
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	3b03      	subs	r3, #3
 8001276:	e000      	b.n	800127a <NVIC_EncodePriority+0x32>
 8001278:	2300      	movs	r3, #0
 800127a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800127c:	f04f 32ff 	mov.w	r2, #4294967295
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	fa02 f303 	lsl.w	r3, r2, r3
 8001286:	43da      	mvns	r2, r3
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	401a      	ands	r2, r3
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001290:	f04f 31ff 	mov.w	r1, #4294967295
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	fa01 f303 	lsl.w	r3, r1, r3
 800129a:	43d9      	mvns	r1, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a0:	4313      	orrs	r3, r2
         );
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3724      	adds	r7, #36	@ 0x24
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
	...

080012b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	3b01      	subs	r3, #1
 80012bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012c0:	d301      	bcc.n	80012c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012c2:	2301      	movs	r3, #1
 80012c4:	e00f      	b.n	80012e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012c6:	4a0a      	ldr	r2, [pc, #40]	@ (80012f0 <SysTick_Config+0x40>)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	3b01      	subs	r3, #1
 80012cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012ce:	210f      	movs	r1, #15
 80012d0:	f04f 30ff 	mov.w	r0, #4294967295
 80012d4:	f7ff ff8e 	bl	80011f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012d8:	4b05      	ldr	r3, [pc, #20]	@ (80012f0 <SysTick_Config+0x40>)
 80012da:	2200      	movs	r2, #0
 80012dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012de:	4b04      	ldr	r3, [pc, #16]	@ (80012f0 <SysTick_Config+0x40>)
 80012e0:	2207      	movs	r2, #7
 80012e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	e000e010 	.word	0xe000e010

080012f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f7ff ff29 	bl	8001154 <__NVIC_SetPriorityGrouping>
}
 8001302:	bf00      	nop
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}

0800130a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800130a:	b580      	push	{r7, lr}
 800130c:	b086      	sub	sp, #24
 800130e:	af00      	add	r7, sp, #0
 8001310:	4603      	mov	r3, r0
 8001312:	60b9      	str	r1, [r7, #8]
 8001314:	607a      	str	r2, [r7, #4]
 8001316:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001318:	f7ff ff40 	bl	800119c <__NVIC_GetPriorityGrouping>
 800131c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	68b9      	ldr	r1, [r7, #8]
 8001322:	6978      	ldr	r0, [r7, #20]
 8001324:	f7ff ff90 	bl	8001248 <NVIC_EncodePriority>
 8001328:	4602      	mov	r2, r0
 800132a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800132e:	4611      	mov	r1, r2
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff ff5f 	bl	80011f4 <__NVIC_SetPriority>
}
 8001336:	bf00      	nop
 8001338:	3718      	adds	r7, #24
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800133e:	b580      	push	{r7, lr}
 8001340:	b082      	sub	sp, #8
 8001342:	af00      	add	r7, sp, #0
 8001344:	4603      	mov	r3, r0
 8001346:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001348:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff ff33 	bl	80011b8 <__NVIC_EnableIRQ>
}
 8001352:	bf00      	nop
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800135a:	b580      	push	{r7, lr}
 800135c:	b082      	sub	sp, #8
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f7ff ffa4 	bl	80012b0 <SysTick_Config>
 8001368:	4603      	mov	r3, r0
}
 800136a:	4618      	mov	r0, r3
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001372:	b580      	push	{r7, lr}
 8001374:	b084      	sub	sp, #16
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800137a:	2300      	movs	r3, #0
 800137c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001384:	b2db      	uxtb	r3, r3
 8001386:	2b02      	cmp	r3, #2
 8001388:	d00d      	beq.n	80013a6 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2204      	movs	r2, #4
 800138e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2201      	movs	r2, #1
 8001394:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2200      	movs	r2, #0
 800139c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	73fb      	strb	r3, [r7, #15]
 80013a4:	e047      	b.n	8001436 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f022 020e 	bic.w	r2, r2, #14
 80013b4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f022 0201 	bic.w	r2, r2, #1
 80013c4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80013d4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013da:	f003 021f 	and.w	r2, r3, #31
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e2:	2101      	movs	r1, #1
 80013e4:	fa01 f202 	lsl.w	r2, r1, r2
 80013e8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80013f2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d00c      	beq.n	8001416 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001406:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800140a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001410:	687a      	ldr	r2, [r7, #4]
 8001412:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001414:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2201      	movs	r2, #1
 800141a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2200      	movs	r2, #0
 8001422:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800142a:	2b00      	cmp	r3, #0
 800142c:	d003      	beq.n	8001436 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	4798      	blx	r3
    }
  }
  return status;
 8001436:	7bfb      	ldrb	r3, [r7, #15]
}
 8001438:	4618      	mov	r0, r3
 800143a:	3710      	adds	r7, #16
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}

08001440 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001440:	b480      	push	{r7}
 8001442:	b087      	sub	sp, #28
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800144a:	2300      	movs	r3, #0
 800144c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800144e:	e15a      	b.n	8001706 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	2101      	movs	r1, #1
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	fa01 f303 	lsl.w	r3, r1, r3
 800145c:	4013      	ands	r3, r2
 800145e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	2b00      	cmp	r3, #0
 8001464:	f000 814c 	beq.w	8001700 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f003 0303 	and.w	r3, r3, #3
 8001470:	2b01      	cmp	r3, #1
 8001472:	d005      	beq.n	8001480 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800147c:	2b02      	cmp	r3, #2
 800147e:	d130      	bne.n	80014e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	2203      	movs	r2, #3
 800148c:	fa02 f303 	lsl.w	r3, r2, r3
 8001490:	43db      	mvns	r3, r3
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	4013      	ands	r3, r2
 8001496:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	68da      	ldr	r2, [r3, #12]
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	fa02 f303 	lsl.w	r3, r2, r3
 80014a4:	693a      	ldr	r2, [r7, #16]
 80014a6:	4313      	orrs	r3, r2
 80014a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	693a      	ldr	r2, [r7, #16]
 80014ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014b6:	2201      	movs	r2, #1
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	fa02 f303 	lsl.w	r3, r2, r3
 80014be:	43db      	mvns	r3, r3
 80014c0:	693a      	ldr	r2, [r7, #16]
 80014c2:	4013      	ands	r3, r2
 80014c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	091b      	lsrs	r3, r3, #4
 80014cc:	f003 0201 	and.w	r2, r3, #1
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	fa02 f303 	lsl.w	r3, r2, r3
 80014d6:	693a      	ldr	r2, [r7, #16]
 80014d8:	4313      	orrs	r3, r2
 80014da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f003 0303 	and.w	r3, r3, #3
 80014ea:	2b03      	cmp	r3, #3
 80014ec:	d017      	beq.n	800151e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	68db      	ldr	r3, [r3, #12]
 80014f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	005b      	lsls	r3, r3, #1
 80014f8:	2203      	movs	r2, #3
 80014fa:	fa02 f303 	lsl.w	r3, r2, r3
 80014fe:	43db      	mvns	r3, r3
 8001500:	693a      	ldr	r2, [r7, #16]
 8001502:	4013      	ands	r3, r2
 8001504:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	689a      	ldr	r2, [r3, #8]
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	4313      	orrs	r3, r2
 8001516:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	693a      	ldr	r2, [r7, #16]
 800151c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	f003 0303 	and.w	r3, r3, #3
 8001526:	2b02      	cmp	r3, #2
 8001528:	d123      	bne.n	8001572 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	08da      	lsrs	r2, r3, #3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	3208      	adds	r2, #8
 8001532:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001536:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	f003 0307 	and.w	r3, r3, #7
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	220f      	movs	r2, #15
 8001542:	fa02 f303 	lsl.w	r3, r2, r3
 8001546:	43db      	mvns	r3, r3
 8001548:	693a      	ldr	r2, [r7, #16]
 800154a:	4013      	ands	r3, r2
 800154c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	691a      	ldr	r2, [r3, #16]
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	f003 0307 	and.w	r3, r3, #7
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	fa02 f303 	lsl.w	r3, r2, r3
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	4313      	orrs	r3, r2
 8001562:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	08da      	lsrs	r2, r3, #3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	3208      	adds	r2, #8
 800156c:	6939      	ldr	r1, [r7, #16]
 800156e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	2203      	movs	r2, #3
 800157e:	fa02 f303 	lsl.w	r3, r2, r3
 8001582:	43db      	mvns	r3, r3
 8001584:	693a      	ldr	r2, [r7, #16]
 8001586:	4013      	ands	r3, r2
 8001588:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	f003 0203 	and.w	r2, r3, #3
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	fa02 f303 	lsl.w	r3, r2, r3
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	4313      	orrs	r3, r2
 800159e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	693a      	ldr	r2, [r7, #16]
 80015a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	f000 80a6 	beq.w	8001700 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015b4:	4b5b      	ldr	r3, [pc, #364]	@ (8001724 <HAL_GPIO_Init+0x2e4>)
 80015b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015b8:	4a5a      	ldr	r2, [pc, #360]	@ (8001724 <HAL_GPIO_Init+0x2e4>)
 80015ba:	f043 0301 	orr.w	r3, r3, #1
 80015be:	6613      	str	r3, [r2, #96]	@ 0x60
 80015c0:	4b58      	ldr	r3, [pc, #352]	@ (8001724 <HAL_GPIO_Init+0x2e4>)
 80015c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015c4:	f003 0301 	and.w	r3, r3, #1
 80015c8:	60bb      	str	r3, [r7, #8]
 80015ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015cc:	4a56      	ldr	r2, [pc, #344]	@ (8001728 <HAL_GPIO_Init+0x2e8>)
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	089b      	lsrs	r3, r3, #2
 80015d2:	3302      	adds	r3, #2
 80015d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	f003 0303 	and.w	r3, r3, #3
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	220f      	movs	r2, #15
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	43db      	mvns	r3, r3
 80015ea:	693a      	ldr	r2, [r7, #16]
 80015ec:	4013      	ands	r3, r2
 80015ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80015f6:	d01f      	beq.n	8001638 <HAL_GPIO_Init+0x1f8>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	4a4c      	ldr	r2, [pc, #304]	@ (800172c <HAL_GPIO_Init+0x2ec>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d019      	beq.n	8001634 <HAL_GPIO_Init+0x1f4>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	4a4b      	ldr	r2, [pc, #300]	@ (8001730 <HAL_GPIO_Init+0x2f0>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d013      	beq.n	8001630 <HAL_GPIO_Init+0x1f0>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	4a4a      	ldr	r2, [pc, #296]	@ (8001734 <HAL_GPIO_Init+0x2f4>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d00d      	beq.n	800162c <HAL_GPIO_Init+0x1ec>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	4a49      	ldr	r2, [pc, #292]	@ (8001738 <HAL_GPIO_Init+0x2f8>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d007      	beq.n	8001628 <HAL_GPIO_Init+0x1e8>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	4a48      	ldr	r2, [pc, #288]	@ (800173c <HAL_GPIO_Init+0x2fc>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d101      	bne.n	8001624 <HAL_GPIO_Init+0x1e4>
 8001620:	2305      	movs	r3, #5
 8001622:	e00a      	b.n	800163a <HAL_GPIO_Init+0x1fa>
 8001624:	2306      	movs	r3, #6
 8001626:	e008      	b.n	800163a <HAL_GPIO_Init+0x1fa>
 8001628:	2304      	movs	r3, #4
 800162a:	e006      	b.n	800163a <HAL_GPIO_Init+0x1fa>
 800162c:	2303      	movs	r3, #3
 800162e:	e004      	b.n	800163a <HAL_GPIO_Init+0x1fa>
 8001630:	2302      	movs	r3, #2
 8001632:	e002      	b.n	800163a <HAL_GPIO_Init+0x1fa>
 8001634:	2301      	movs	r3, #1
 8001636:	e000      	b.n	800163a <HAL_GPIO_Init+0x1fa>
 8001638:	2300      	movs	r3, #0
 800163a:	697a      	ldr	r2, [r7, #20]
 800163c:	f002 0203 	and.w	r2, r2, #3
 8001640:	0092      	lsls	r2, r2, #2
 8001642:	4093      	lsls	r3, r2
 8001644:	693a      	ldr	r2, [r7, #16]
 8001646:	4313      	orrs	r3, r2
 8001648:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800164a:	4937      	ldr	r1, [pc, #220]	@ (8001728 <HAL_GPIO_Init+0x2e8>)
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	089b      	lsrs	r3, r3, #2
 8001650:	3302      	adds	r3, #2
 8001652:	693a      	ldr	r2, [r7, #16]
 8001654:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001658:	4b39      	ldr	r3, [pc, #228]	@ (8001740 <HAL_GPIO_Init+0x300>)
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	43db      	mvns	r3, r3
 8001662:	693a      	ldr	r2, [r7, #16]
 8001664:	4013      	ands	r3, r2
 8001666:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001670:	2b00      	cmp	r3, #0
 8001672:	d003      	beq.n	800167c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001674:	693a      	ldr	r2, [r7, #16]
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	4313      	orrs	r3, r2
 800167a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800167c:	4a30      	ldr	r2, [pc, #192]	@ (8001740 <HAL_GPIO_Init+0x300>)
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001682:	4b2f      	ldr	r3, [pc, #188]	@ (8001740 <HAL_GPIO_Init+0x300>)
 8001684:	68db      	ldr	r3, [r3, #12]
 8001686:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	43db      	mvns	r3, r3
 800168c:	693a      	ldr	r2, [r7, #16]
 800168e:	4013      	ands	r3, r2
 8001690:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d003      	beq.n	80016a6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800169e:	693a      	ldr	r2, [r7, #16]
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	4313      	orrs	r3, r2
 80016a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016a6:	4a26      	ldr	r2, [pc, #152]	@ (8001740 <HAL_GPIO_Init+0x300>)
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80016ac:	4b24      	ldr	r3, [pc, #144]	@ (8001740 <HAL_GPIO_Init+0x300>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	43db      	mvns	r3, r3
 80016b6:	693a      	ldr	r2, [r7, #16]
 80016b8:	4013      	ands	r3, r2
 80016ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d003      	beq.n	80016d0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80016c8:	693a      	ldr	r2, [r7, #16]
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80016d0:	4a1b      	ldr	r2, [pc, #108]	@ (8001740 <HAL_GPIO_Init+0x300>)
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80016d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001740 <HAL_GPIO_Init+0x300>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	43db      	mvns	r3, r3
 80016e0:	693a      	ldr	r2, [r7, #16]
 80016e2:	4013      	ands	r3, r2
 80016e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d003      	beq.n	80016fa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	4313      	orrs	r3, r2
 80016f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80016fa:	4a11      	ldr	r2, [pc, #68]	@ (8001740 <HAL_GPIO_Init+0x300>)
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	3301      	adds	r3, #1
 8001704:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	fa22 f303 	lsr.w	r3, r2, r3
 8001710:	2b00      	cmp	r3, #0
 8001712:	f47f ae9d 	bne.w	8001450 <HAL_GPIO_Init+0x10>
  }
}
 8001716:	bf00      	nop
 8001718:	bf00      	nop
 800171a:	371c      	adds	r7, #28
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	40021000 	.word	0x40021000
 8001728:	40010000 	.word	0x40010000
 800172c:	48000400 	.word	0x48000400
 8001730:	48000800 	.word	0x48000800
 8001734:	48000c00 	.word	0x48000c00
 8001738:	48001000 	.word	0x48001000
 800173c:	48001400 	.word	0x48001400
 8001740:	40010400 	.word	0x40010400

08001744 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001744:	b480      	push	{r7}
 8001746:	b085      	sub	sp, #20
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	460b      	mov	r3, r1
 800174e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	691a      	ldr	r2, [r3, #16]
 8001754:	887b      	ldrh	r3, [r7, #2]
 8001756:	4013      	ands	r3, r2
 8001758:	2b00      	cmp	r3, #0
 800175a:	d002      	beq.n	8001762 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800175c:	2301      	movs	r3, #1
 800175e:	73fb      	strb	r3, [r7, #15]
 8001760:	e001      	b.n	8001766 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001762:	2300      	movs	r3, #0
 8001764:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001766:	7bfb      	ldrb	r3, [r7, #15]
}
 8001768:	4618      	mov	r0, r3
 800176a:	3714      	adds	r7, #20
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	460b      	mov	r3, r1
 800177e:	807b      	strh	r3, [r7, #2]
 8001780:	4613      	mov	r3, r2
 8001782:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001784:	787b      	ldrb	r3, [r7, #1]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d003      	beq.n	8001792 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800178a:	887a      	ldrh	r2, [r7, #2]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001790:	e002      	b.n	8001798 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001792:	887a      	ldrh	r2, [r7, #2]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001798:	bf00      	nop
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	4603      	mov	r3, r0
 80017ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80017ae:	4b08      	ldr	r3, [pc, #32]	@ (80017d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017b0:	695a      	ldr	r2, [r3, #20]
 80017b2:	88fb      	ldrh	r3, [r7, #6]
 80017b4:	4013      	ands	r3, r2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d006      	beq.n	80017c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017ba:	4a05      	ldr	r2, [pc, #20]	@ (80017d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017bc:	88fb      	ldrh	r3, [r7, #6]
 80017be:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80017c0:	88fb      	ldrh	r3, [r7, #6]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f000 f806 	bl	80017d4 <HAL_GPIO_EXTI_Callback>
  }
}
 80017c8:	bf00      	nop
 80017ca:	3708      	adds	r7, #8
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	40010400 	.word	0x40010400

080017d4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4603      	mov	r3, r0
 80017dc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80017de:	bf00      	nop
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
	...

080017ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b085      	sub	sp, #20
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d141      	bne.n	800187e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80017fa:	4b4b      	ldr	r3, [pc, #300]	@ (8001928 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001802:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001806:	d131      	bne.n	800186c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001808:	4b47      	ldr	r3, [pc, #284]	@ (8001928 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800180a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800180e:	4a46      	ldr	r2, [pc, #280]	@ (8001928 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001810:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001814:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001818:	4b43      	ldr	r3, [pc, #268]	@ (8001928 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001820:	4a41      	ldr	r2, [pc, #260]	@ (8001928 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001822:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001826:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001828:	4b40      	ldr	r3, [pc, #256]	@ (800192c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2232      	movs	r2, #50	@ 0x32
 800182e:	fb02 f303 	mul.w	r3, r2, r3
 8001832:	4a3f      	ldr	r2, [pc, #252]	@ (8001930 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001834:	fba2 2303 	umull	r2, r3, r2, r3
 8001838:	0c9b      	lsrs	r3, r3, #18
 800183a:	3301      	adds	r3, #1
 800183c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800183e:	e002      	b.n	8001846 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	3b01      	subs	r3, #1
 8001844:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001846:	4b38      	ldr	r3, [pc, #224]	@ (8001928 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001848:	695b      	ldr	r3, [r3, #20]
 800184a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800184e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001852:	d102      	bne.n	800185a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d1f2      	bne.n	8001840 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800185a:	4b33      	ldr	r3, [pc, #204]	@ (8001928 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800185c:	695b      	ldr	r3, [r3, #20]
 800185e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001862:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001866:	d158      	bne.n	800191a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e057      	b.n	800191c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800186c:	4b2e      	ldr	r3, [pc, #184]	@ (8001928 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800186e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001872:	4a2d      	ldr	r2, [pc, #180]	@ (8001928 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001874:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001878:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800187c:	e04d      	b.n	800191a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001884:	d141      	bne.n	800190a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001886:	4b28      	ldr	r3, [pc, #160]	@ (8001928 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800188e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001892:	d131      	bne.n	80018f8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001894:	4b24      	ldr	r3, [pc, #144]	@ (8001928 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001896:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800189a:	4a23      	ldr	r2, [pc, #140]	@ (8001928 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800189c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018a0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80018a4:	4b20      	ldr	r3, [pc, #128]	@ (8001928 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80018ac:	4a1e      	ldr	r2, [pc, #120]	@ (8001928 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018b2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80018b4:	4b1d      	ldr	r3, [pc, #116]	@ (800192c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2232      	movs	r2, #50	@ 0x32
 80018ba:	fb02 f303 	mul.w	r3, r2, r3
 80018be:	4a1c      	ldr	r2, [pc, #112]	@ (8001930 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80018c0:	fba2 2303 	umull	r2, r3, r2, r3
 80018c4:	0c9b      	lsrs	r3, r3, #18
 80018c6:	3301      	adds	r3, #1
 80018c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018ca:	e002      	b.n	80018d2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	3b01      	subs	r3, #1
 80018d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018d2:	4b15      	ldr	r3, [pc, #84]	@ (8001928 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018d4:	695b      	ldr	r3, [r3, #20]
 80018d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80018de:	d102      	bne.n	80018e6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d1f2      	bne.n	80018cc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018e6:	4b10      	ldr	r3, [pc, #64]	@ (8001928 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018e8:	695b      	ldr	r3, [r3, #20]
 80018ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80018f2:	d112      	bne.n	800191a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80018f4:	2303      	movs	r3, #3
 80018f6:	e011      	b.n	800191c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80018f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001928 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80018fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001928 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001900:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001904:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001908:	e007      	b.n	800191a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800190a:	4b07      	ldr	r3, [pc, #28]	@ (8001928 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001912:	4a05      	ldr	r2, [pc, #20]	@ (8001928 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001914:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001918:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800191a:	2300      	movs	r3, #0
}
 800191c:	4618      	mov	r0, r3
 800191e:	3714      	adds	r7, #20
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr
 8001928:	40007000 	.word	0x40007000
 800192c:	20000000 	.word	0x20000000
 8001930:	431bde83 	.word	0x431bde83

08001934 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001938:	4b05      	ldr	r3, [pc, #20]	@ (8001950 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	4a04      	ldr	r2, [pc, #16]	@ (8001950 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800193e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001942:	6093      	str	r3, [r2, #8]
}
 8001944:	bf00      	nop
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	40007000 	.word	0x40007000

08001954 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b088      	sub	sp, #32
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d101      	bne.n	8001966 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e2fe      	b.n	8001f64 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0301 	and.w	r3, r3, #1
 800196e:	2b00      	cmp	r3, #0
 8001970:	d075      	beq.n	8001a5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001972:	4b97      	ldr	r3, [pc, #604]	@ (8001bd0 <HAL_RCC_OscConfig+0x27c>)
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	f003 030c 	and.w	r3, r3, #12
 800197a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800197c:	4b94      	ldr	r3, [pc, #592]	@ (8001bd0 <HAL_RCC_OscConfig+0x27c>)
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	f003 0303 	and.w	r3, r3, #3
 8001984:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	2b0c      	cmp	r3, #12
 800198a:	d102      	bne.n	8001992 <HAL_RCC_OscConfig+0x3e>
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	2b03      	cmp	r3, #3
 8001990:	d002      	beq.n	8001998 <HAL_RCC_OscConfig+0x44>
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	2b08      	cmp	r3, #8
 8001996:	d10b      	bne.n	80019b0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001998:	4b8d      	ldr	r3, [pc, #564]	@ (8001bd0 <HAL_RCC_OscConfig+0x27c>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d05b      	beq.n	8001a5c <HAL_RCC_OscConfig+0x108>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d157      	bne.n	8001a5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e2d9      	b.n	8001f64 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019b8:	d106      	bne.n	80019c8 <HAL_RCC_OscConfig+0x74>
 80019ba:	4b85      	ldr	r3, [pc, #532]	@ (8001bd0 <HAL_RCC_OscConfig+0x27c>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a84      	ldr	r2, [pc, #528]	@ (8001bd0 <HAL_RCC_OscConfig+0x27c>)
 80019c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019c4:	6013      	str	r3, [r2, #0]
 80019c6:	e01d      	b.n	8001a04 <HAL_RCC_OscConfig+0xb0>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80019d0:	d10c      	bne.n	80019ec <HAL_RCC_OscConfig+0x98>
 80019d2:	4b7f      	ldr	r3, [pc, #508]	@ (8001bd0 <HAL_RCC_OscConfig+0x27c>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a7e      	ldr	r2, [pc, #504]	@ (8001bd0 <HAL_RCC_OscConfig+0x27c>)
 80019d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019dc:	6013      	str	r3, [r2, #0]
 80019de:	4b7c      	ldr	r3, [pc, #496]	@ (8001bd0 <HAL_RCC_OscConfig+0x27c>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a7b      	ldr	r2, [pc, #492]	@ (8001bd0 <HAL_RCC_OscConfig+0x27c>)
 80019e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019e8:	6013      	str	r3, [r2, #0]
 80019ea:	e00b      	b.n	8001a04 <HAL_RCC_OscConfig+0xb0>
 80019ec:	4b78      	ldr	r3, [pc, #480]	@ (8001bd0 <HAL_RCC_OscConfig+0x27c>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a77      	ldr	r2, [pc, #476]	@ (8001bd0 <HAL_RCC_OscConfig+0x27c>)
 80019f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019f6:	6013      	str	r3, [r2, #0]
 80019f8:	4b75      	ldr	r3, [pc, #468]	@ (8001bd0 <HAL_RCC_OscConfig+0x27c>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a74      	ldr	r2, [pc, #464]	@ (8001bd0 <HAL_RCC_OscConfig+0x27c>)
 80019fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d013      	beq.n	8001a34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a0c:	f7ff fb74 	bl	80010f8 <HAL_GetTick>
 8001a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a12:	e008      	b.n	8001a26 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a14:	f7ff fb70 	bl	80010f8 <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b64      	cmp	r3, #100	@ 0x64
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e29e      	b.n	8001f64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a26:	4b6a      	ldr	r3, [pc, #424]	@ (8001bd0 <HAL_RCC_OscConfig+0x27c>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d0f0      	beq.n	8001a14 <HAL_RCC_OscConfig+0xc0>
 8001a32:	e014      	b.n	8001a5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a34:	f7ff fb60 	bl	80010f8 <HAL_GetTick>
 8001a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a3a:	e008      	b.n	8001a4e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a3c:	f7ff fb5c 	bl	80010f8 <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	2b64      	cmp	r3, #100	@ 0x64
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e28a      	b.n	8001f64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a4e:	4b60      	ldr	r3, [pc, #384]	@ (8001bd0 <HAL_RCC_OscConfig+0x27c>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d1f0      	bne.n	8001a3c <HAL_RCC_OscConfig+0xe8>
 8001a5a:	e000      	b.n	8001a5e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d075      	beq.n	8001b56 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a6a:	4b59      	ldr	r3, [pc, #356]	@ (8001bd0 <HAL_RCC_OscConfig+0x27c>)
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	f003 030c 	and.w	r3, r3, #12
 8001a72:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a74:	4b56      	ldr	r3, [pc, #344]	@ (8001bd0 <HAL_RCC_OscConfig+0x27c>)
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	f003 0303 	and.w	r3, r3, #3
 8001a7c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	2b0c      	cmp	r3, #12
 8001a82:	d102      	bne.n	8001a8a <HAL_RCC_OscConfig+0x136>
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d002      	beq.n	8001a90 <HAL_RCC_OscConfig+0x13c>
 8001a8a:	69bb      	ldr	r3, [r7, #24]
 8001a8c:	2b04      	cmp	r3, #4
 8001a8e:	d11f      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a90:	4b4f      	ldr	r3, [pc, #316]	@ (8001bd0 <HAL_RCC_OscConfig+0x27c>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d005      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x154>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d101      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e25d      	b.n	8001f64 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aa8:	4b49      	ldr	r3, [pc, #292]	@ (8001bd0 <HAL_RCC_OscConfig+0x27c>)
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	691b      	ldr	r3, [r3, #16]
 8001ab4:	061b      	lsls	r3, r3, #24
 8001ab6:	4946      	ldr	r1, [pc, #280]	@ (8001bd0 <HAL_RCC_OscConfig+0x27c>)
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001abc:	4b45      	ldr	r3, [pc, #276]	@ (8001bd4 <HAL_RCC_OscConfig+0x280>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7ff facd 	bl	8001060 <HAL_InitTick>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d043      	beq.n	8001b54 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e249      	b.n	8001f64 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d023      	beq.n	8001b20 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ad8:	4b3d      	ldr	r3, [pc, #244]	@ (8001bd0 <HAL_RCC_OscConfig+0x27c>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a3c      	ldr	r2, [pc, #240]	@ (8001bd0 <HAL_RCC_OscConfig+0x27c>)
 8001ade:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ae2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae4:	f7ff fb08 	bl	80010f8 <HAL_GetTick>
 8001ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001aea:	e008      	b.n	8001afe <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aec:	f7ff fb04 	bl	80010f8 <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e232      	b.n	8001f64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001afe:	4b34      	ldr	r3, [pc, #208]	@ (8001bd0 <HAL_RCC_OscConfig+0x27c>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d0f0      	beq.n	8001aec <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b0a:	4b31      	ldr	r3, [pc, #196]	@ (8001bd0 <HAL_RCC_OscConfig+0x27c>)
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	691b      	ldr	r3, [r3, #16]
 8001b16:	061b      	lsls	r3, r3, #24
 8001b18:	492d      	ldr	r1, [pc, #180]	@ (8001bd0 <HAL_RCC_OscConfig+0x27c>)
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	604b      	str	r3, [r1, #4]
 8001b1e:	e01a      	b.n	8001b56 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b20:	4b2b      	ldr	r3, [pc, #172]	@ (8001bd0 <HAL_RCC_OscConfig+0x27c>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a2a      	ldr	r2, [pc, #168]	@ (8001bd0 <HAL_RCC_OscConfig+0x27c>)
 8001b26:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001b2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b2c:	f7ff fae4 	bl	80010f8 <HAL_GetTick>
 8001b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b32:	e008      	b.n	8001b46 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b34:	f7ff fae0 	bl	80010f8 <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e20e      	b.n	8001f64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b46:	4b22      	ldr	r3, [pc, #136]	@ (8001bd0 <HAL_RCC_OscConfig+0x27c>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d1f0      	bne.n	8001b34 <HAL_RCC_OscConfig+0x1e0>
 8001b52:	e000      	b.n	8001b56 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b54:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0308 	and.w	r3, r3, #8
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d041      	beq.n	8001be6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	695b      	ldr	r3, [r3, #20]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d01c      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b6a:	4b19      	ldr	r3, [pc, #100]	@ (8001bd0 <HAL_RCC_OscConfig+0x27c>)
 8001b6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b70:	4a17      	ldr	r2, [pc, #92]	@ (8001bd0 <HAL_RCC_OscConfig+0x27c>)
 8001b72:	f043 0301 	orr.w	r3, r3, #1
 8001b76:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b7a:	f7ff fabd 	bl	80010f8 <HAL_GetTick>
 8001b7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b80:	e008      	b.n	8001b94 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b82:	f7ff fab9 	bl	80010f8 <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	d901      	bls.n	8001b94 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001b90:	2303      	movs	r3, #3
 8001b92:	e1e7      	b.n	8001f64 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b94:	4b0e      	ldr	r3, [pc, #56]	@ (8001bd0 <HAL_RCC_OscConfig+0x27c>)
 8001b96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d0ef      	beq.n	8001b82 <HAL_RCC_OscConfig+0x22e>
 8001ba2:	e020      	b.n	8001be6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ba4:	4b0a      	ldr	r3, [pc, #40]	@ (8001bd0 <HAL_RCC_OscConfig+0x27c>)
 8001ba6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001baa:	4a09      	ldr	r2, [pc, #36]	@ (8001bd0 <HAL_RCC_OscConfig+0x27c>)
 8001bac:	f023 0301 	bic.w	r3, r3, #1
 8001bb0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bb4:	f7ff faa0 	bl	80010f8 <HAL_GetTick>
 8001bb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bba:	e00d      	b.n	8001bd8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bbc:	f7ff fa9c 	bl	80010f8 <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d906      	bls.n	8001bd8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e1ca      	b.n	8001f64 <HAL_RCC_OscConfig+0x610>
 8001bce:	bf00      	nop
 8001bd0:	40021000 	.word	0x40021000
 8001bd4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bd8:	4b8c      	ldr	r3, [pc, #560]	@ (8001e0c <HAL_RCC_OscConfig+0x4b8>)
 8001bda:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d1ea      	bne.n	8001bbc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0304 	and.w	r3, r3, #4
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	f000 80a6 	beq.w	8001d40 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001bf8:	4b84      	ldr	r3, [pc, #528]	@ (8001e0c <HAL_RCC_OscConfig+0x4b8>)
 8001bfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bfc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d101      	bne.n	8001c08 <HAL_RCC_OscConfig+0x2b4>
 8001c04:	2301      	movs	r3, #1
 8001c06:	e000      	b.n	8001c0a <HAL_RCC_OscConfig+0x2b6>
 8001c08:	2300      	movs	r3, #0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d00d      	beq.n	8001c2a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c0e:	4b7f      	ldr	r3, [pc, #508]	@ (8001e0c <HAL_RCC_OscConfig+0x4b8>)
 8001c10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c12:	4a7e      	ldr	r2, [pc, #504]	@ (8001e0c <HAL_RCC_OscConfig+0x4b8>)
 8001c14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c18:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c1a:	4b7c      	ldr	r3, [pc, #496]	@ (8001e0c <HAL_RCC_OscConfig+0x4b8>)
 8001c1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c22:	60fb      	str	r3, [r7, #12]
 8001c24:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001c26:	2301      	movs	r3, #1
 8001c28:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c2a:	4b79      	ldr	r3, [pc, #484]	@ (8001e10 <HAL_RCC_OscConfig+0x4bc>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d118      	bne.n	8001c68 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c36:	4b76      	ldr	r3, [pc, #472]	@ (8001e10 <HAL_RCC_OscConfig+0x4bc>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a75      	ldr	r2, [pc, #468]	@ (8001e10 <HAL_RCC_OscConfig+0x4bc>)
 8001c3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c42:	f7ff fa59 	bl	80010f8 <HAL_GetTick>
 8001c46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c48:	e008      	b.n	8001c5c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c4a:	f7ff fa55 	bl	80010f8 <HAL_GetTick>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d901      	bls.n	8001c5c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e183      	b.n	8001f64 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c5c:	4b6c      	ldr	r3, [pc, #432]	@ (8001e10 <HAL_RCC_OscConfig+0x4bc>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d0f0      	beq.n	8001c4a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d108      	bne.n	8001c82 <HAL_RCC_OscConfig+0x32e>
 8001c70:	4b66      	ldr	r3, [pc, #408]	@ (8001e0c <HAL_RCC_OscConfig+0x4b8>)
 8001c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c76:	4a65      	ldr	r2, [pc, #404]	@ (8001e0c <HAL_RCC_OscConfig+0x4b8>)
 8001c78:	f043 0301 	orr.w	r3, r3, #1
 8001c7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c80:	e024      	b.n	8001ccc <HAL_RCC_OscConfig+0x378>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	2b05      	cmp	r3, #5
 8001c88:	d110      	bne.n	8001cac <HAL_RCC_OscConfig+0x358>
 8001c8a:	4b60      	ldr	r3, [pc, #384]	@ (8001e0c <HAL_RCC_OscConfig+0x4b8>)
 8001c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c90:	4a5e      	ldr	r2, [pc, #376]	@ (8001e0c <HAL_RCC_OscConfig+0x4b8>)
 8001c92:	f043 0304 	orr.w	r3, r3, #4
 8001c96:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c9a:	4b5c      	ldr	r3, [pc, #368]	@ (8001e0c <HAL_RCC_OscConfig+0x4b8>)
 8001c9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ca0:	4a5a      	ldr	r2, [pc, #360]	@ (8001e0c <HAL_RCC_OscConfig+0x4b8>)
 8001ca2:	f043 0301 	orr.w	r3, r3, #1
 8001ca6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001caa:	e00f      	b.n	8001ccc <HAL_RCC_OscConfig+0x378>
 8001cac:	4b57      	ldr	r3, [pc, #348]	@ (8001e0c <HAL_RCC_OscConfig+0x4b8>)
 8001cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cb2:	4a56      	ldr	r2, [pc, #344]	@ (8001e0c <HAL_RCC_OscConfig+0x4b8>)
 8001cb4:	f023 0301 	bic.w	r3, r3, #1
 8001cb8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001cbc:	4b53      	ldr	r3, [pc, #332]	@ (8001e0c <HAL_RCC_OscConfig+0x4b8>)
 8001cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cc2:	4a52      	ldr	r2, [pc, #328]	@ (8001e0c <HAL_RCC_OscConfig+0x4b8>)
 8001cc4:	f023 0304 	bic.w	r3, r3, #4
 8001cc8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d016      	beq.n	8001d02 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cd4:	f7ff fa10 	bl	80010f8 <HAL_GetTick>
 8001cd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cda:	e00a      	b.n	8001cf2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cdc:	f7ff fa0c 	bl	80010f8 <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e138      	b.n	8001f64 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cf2:	4b46      	ldr	r3, [pc, #280]	@ (8001e0c <HAL_RCC_OscConfig+0x4b8>)
 8001cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cf8:	f003 0302 	and.w	r3, r3, #2
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d0ed      	beq.n	8001cdc <HAL_RCC_OscConfig+0x388>
 8001d00:	e015      	b.n	8001d2e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d02:	f7ff f9f9 	bl	80010f8 <HAL_GetTick>
 8001d06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d08:	e00a      	b.n	8001d20 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d0a:	f7ff f9f5 	bl	80010f8 <HAL_GetTick>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d901      	bls.n	8001d20 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e121      	b.n	8001f64 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d20:	4b3a      	ldr	r3, [pc, #232]	@ (8001e0c <HAL_RCC_OscConfig+0x4b8>)
 8001d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d26:	f003 0302 	and.w	r3, r3, #2
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d1ed      	bne.n	8001d0a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d2e:	7ffb      	ldrb	r3, [r7, #31]
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d105      	bne.n	8001d40 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d34:	4b35      	ldr	r3, [pc, #212]	@ (8001e0c <HAL_RCC_OscConfig+0x4b8>)
 8001d36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d38:	4a34      	ldr	r2, [pc, #208]	@ (8001e0c <HAL_RCC_OscConfig+0x4b8>)
 8001d3a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d3e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0320 	and.w	r3, r3, #32
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d03c      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	699b      	ldr	r3, [r3, #24]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d01c      	beq.n	8001d8e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d54:	4b2d      	ldr	r3, [pc, #180]	@ (8001e0c <HAL_RCC_OscConfig+0x4b8>)
 8001d56:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001d5a:	4a2c      	ldr	r2, [pc, #176]	@ (8001e0c <HAL_RCC_OscConfig+0x4b8>)
 8001d5c:	f043 0301 	orr.w	r3, r3, #1
 8001d60:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d64:	f7ff f9c8 	bl	80010f8 <HAL_GetTick>
 8001d68:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d6a:	e008      	b.n	8001d7e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d6c:	f7ff f9c4 	bl	80010f8 <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e0f2      	b.n	8001f64 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d7e:	4b23      	ldr	r3, [pc, #140]	@ (8001e0c <HAL_RCC_OscConfig+0x4b8>)
 8001d80:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001d84:	f003 0302 	and.w	r3, r3, #2
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d0ef      	beq.n	8001d6c <HAL_RCC_OscConfig+0x418>
 8001d8c:	e01b      	b.n	8001dc6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d8e:	4b1f      	ldr	r3, [pc, #124]	@ (8001e0c <HAL_RCC_OscConfig+0x4b8>)
 8001d90:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001d94:	4a1d      	ldr	r2, [pc, #116]	@ (8001e0c <HAL_RCC_OscConfig+0x4b8>)
 8001d96:	f023 0301 	bic.w	r3, r3, #1
 8001d9a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d9e:	f7ff f9ab 	bl	80010f8 <HAL_GetTick>
 8001da2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001da4:	e008      	b.n	8001db8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001da6:	f7ff f9a7 	bl	80010f8 <HAL_GetTick>
 8001daa:	4602      	mov	r2, r0
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d901      	bls.n	8001db8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001db4:	2303      	movs	r3, #3
 8001db6:	e0d5      	b.n	8001f64 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001db8:	4b14      	ldr	r3, [pc, #80]	@ (8001e0c <HAL_RCC_OscConfig+0x4b8>)
 8001dba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001dbe:	f003 0302 	and.w	r3, r3, #2
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d1ef      	bne.n	8001da6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	69db      	ldr	r3, [r3, #28]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	f000 80c9 	beq.w	8001f62 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001dd0:	4b0e      	ldr	r3, [pc, #56]	@ (8001e0c <HAL_RCC_OscConfig+0x4b8>)
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f003 030c 	and.w	r3, r3, #12
 8001dd8:	2b0c      	cmp	r3, #12
 8001dda:	f000 8083 	beq.w	8001ee4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	69db      	ldr	r3, [r3, #28]
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d15e      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001de6:	4b09      	ldr	r3, [pc, #36]	@ (8001e0c <HAL_RCC_OscConfig+0x4b8>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a08      	ldr	r2, [pc, #32]	@ (8001e0c <HAL_RCC_OscConfig+0x4b8>)
 8001dec:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001df0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df2:	f7ff f981 	bl	80010f8 <HAL_GetTick>
 8001df6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001df8:	e00c      	b.n	8001e14 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dfa:	f7ff f97d 	bl	80010f8 <HAL_GetTick>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d905      	bls.n	8001e14 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e0ab      	b.n	8001f64 <HAL_RCC_OscConfig+0x610>
 8001e0c:	40021000 	.word	0x40021000
 8001e10:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e14:	4b55      	ldr	r3, [pc, #340]	@ (8001f6c <HAL_RCC_OscConfig+0x618>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d1ec      	bne.n	8001dfa <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e20:	4b52      	ldr	r3, [pc, #328]	@ (8001f6c <HAL_RCC_OscConfig+0x618>)
 8001e22:	68da      	ldr	r2, [r3, #12]
 8001e24:	4b52      	ldr	r3, [pc, #328]	@ (8001f70 <HAL_RCC_OscConfig+0x61c>)
 8001e26:	4013      	ands	r3, r2
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	6a11      	ldr	r1, [r2, #32]
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001e30:	3a01      	subs	r2, #1
 8001e32:	0112      	lsls	r2, r2, #4
 8001e34:	4311      	orrs	r1, r2
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001e3a:	0212      	lsls	r2, r2, #8
 8001e3c:	4311      	orrs	r1, r2
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001e42:	0852      	lsrs	r2, r2, #1
 8001e44:	3a01      	subs	r2, #1
 8001e46:	0552      	lsls	r2, r2, #21
 8001e48:	4311      	orrs	r1, r2
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001e4e:	0852      	lsrs	r2, r2, #1
 8001e50:	3a01      	subs	r2, #1
 8001e52:	0652      	lsls	r2, r2, #25
 8001e54:	4311      	orrs	r1, r2
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001e5a:	06d2      	lsls	r2, r2, #27
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	4943      	ldr	r1, [pc, #268]	@ (8001f6c <HAL_RCC_OscConfig+0x618>)
 8001e60:	4313      	orrs	r3, r2
 8001e62:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e64:	4b41      	ldr	r3, [pc, #260]	@ (8001f6c <HAL_RCC_OscConfig+0x618>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a40      	ldr	r2, [pc, #256]	@ (8001f6c <HAL_RCC_OscConfig+0x618>)
 8001e6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e6e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e70:	4b3e      	ldr	r3, [pc, #248]	@ (8001f6c <HAL_RCC_OscConfig+0x618>)
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	4a3d      	ldr	r2, [pc, #244]	@ (8001f6c <HAL_RCC_OscConfig+0x618>)
 8001e76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e7a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e7c:	f7ff f93c 	bl	80010f8 <HAL_GetTick>
 8001e80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e82:	e008      	b.n	8001e96 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e84:	f7ff f938 	bl	80010f8 <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e066      	b.n	8001f64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e96:	4b35      	ldr	r3, [pc, #212]	@ (8001f6c <HAL_RCC_OscConfig+0x618>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d0f0      	beq.n	8001e84 <HAL_RCC_OscConfig+0x530>
 8001ea2:	e05e      	b.n	8001f62 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ea4:	4b31      	ldr	r3, [pc, #196]	@ (8001f6c <HAL_RCC_OscConfig+0x618>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a30      	ldr	r2, [pc, #192]	@ (8001f6c <HAL_RCC_OscConfig+0x618>)
 8001eaa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001eae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb0:	f7ff f922 	bl	80010f8 <HAL_GetTick>
 8001eb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001eb6:	e008      	b.n	8001eca <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eb8:	f7ff f91e 	bl	80010f8 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d901      	bls.n	8001eca <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e04c      	b.n	8001f64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001eca:	4b28      	ldr	r3, [pc, #160]	@ (8001f6c <HAL_RCC_OscConfig+0x618>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d1f0      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001ed6:	4b25      	ldr	r3, [pc, #148]	@ (8001f6c <HAL_RCC_OscConfig+0x618>)
 8001ed8:	68da      	ldr	r2, [r3, #12]
 8001eda:	4924      	ldr	r1, [pc, #144]	@ (8001f6c <HAL_RCC_OscConfig+0x618>)
 8001edc:	4b25      	ldr	r3, [pc, #148]	@ (8001f74 <HAL_RCC_OscConfig+0x620>)
 8001ede:	4013      	ands	r3, r2
 8001ee0:	60cb      	str	r3, [r1, #12]
 8001ee2:	e03e      	b.n	8001f62 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	69db      	ldr	r3, [r3, #28]
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d101      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e039      	b.n	8001f64 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001ef0:	4b1e      	ldr	r3, [pc, #120]	@ (8001f6c <HAL_RCC_OscConfig+0x618>)
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	f003 0203 	and.w	r2, r3, #3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6a1b      	ldr	r3, [r3, #32]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d12c      	bne.n	8001f5e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f0e:	3b01      	subs	r3, #1
 8001f10:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d123      	bne.n	8001f5e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f20:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d11b      	bne.n	8001f5e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f30:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d113      	bne.n	8001f5e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f40:	085b      	lsrs	r3, r3, #1
 8001f42:	3b01      	subs	r3, #1
 8001f44:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d109      	bne.n	8001f5e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f54:	085b      	lsrs	r3, r3, #1
 8001f56:	3b01      	subs	r3, #1
 8001f58:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d001      	beq.n	8001f62 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e000      	b.n	8001f64 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001f62:	2300      	movs	r3, #0
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3720      	adds	r7, #32
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	40021000 	.word	0x40021000
 8001f70:	019f800c 	.word	0x019f800c
 8001f74:	feeefffc 	.word	0xfeeefffc

08001f78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b086      	sub	sp, #24
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001f82:	2300      	movs	r3, #0
 8001f84:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d101      	bne.n	8001f90 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e11e      	b.n	80021ce <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f90:	4b91      	ldr	r3, [pc, #580]	@ (80021d8 <HAL_RCC_ClockConfig+0x260>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 030f 	and.w	r3, r3, #15
 8001f98:	683a      	ldr	r2, [r7, #0]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d910      	bls.n	8001fc0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f9e:	4b8e      	ldr	r3, [pc, #568]	@ (80021d8 <HAL_RCC_ClockConfig+0x260>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f023 020f 	bic.w	r2, r3, #15
 8001fa6:	498c      	ldr	r1, [pc, #560]	@ (80021d8 <HAL_RCC_ClockConfig+0x260>)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fae:	4b8a      	ldr	r3, [pc, #552]	@ (80021d8 <HAL_RCC_ClockConfig+0x260>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 030f 	and.w	r3, r3, #15
 8001fb6:	683a      	ldr	r2, [r7, #0]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d001      	beq.n	8001fc0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e106      	b.n	80021ce <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0301 	and.w	r3, r3, #1
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d073      	beq.n	80020b4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	2b03      	cmp	r3, #3
 8001fd2:	d129      	bne.n	8002028 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fd4:	4b81      	ldr	r3, [pc, #516]	@ (80021dc <HAL_RCC_ClockConfig+0x264>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d101      	bne.n	8001fe4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e0f4      	b.n	80021ce <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001fe4:	f000 f99e 	bl	8002324 <RCC_GetSysClockFreqFromPLLSource>
 8001fe8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	4a7c      	ldr	r2, [pc, #496]	@ (80021e0 <HAL_RCC_ClockConfig+0x268>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d93f      	bls.n	8002072 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001ff2:	4b7a      	ldr	r3, [pc, #488]	@ (80021dc <HAL_RCC_ClockConfig+0x264>)
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d009      	beq.n	8002012 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002006:	2b00      	cmp	r3, #0
 8002008:	d033      	beq.n	8002072 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800200e:	2b00      	cmp	r3, #0
 8002010:	d12f      	bne.n	8002072 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002012:	4b72      	ldr	r3, [pc, #456]	@ (80021dc <HAL_RCC_ClockConfig+0x264>)
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800201a:	4a70      	ldr	r2, [pc, #448]	@ (80021dc <HAL_RCC_ClockConfig+0x264>)
 800201c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002020:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002022:	2380      	movs	r3, #128	@ 0x80
 8002024:	617b      	str	r3, [r7, #20]
 8002026:	e024      	b.n	8002072 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	2b02      	cmp	r3, #2
 800202e:	d107      	bne.n	8002040 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002030:	4b6a      	ldr	r3, [pc, #424]	@ (80021dc <HAL_RCC_ClockConfig+0x264>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d109      	bne.n	8002050 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e0c6      	b.n	80021ce <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002040:	4b66      	ldr	r3, [pc, #408]	@ (80021dc <HAL_RCC_ClockConfig+0x264>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002048:	2b00      	cmp	r3, #0
 800204a:	d101      	bne.n	8002050 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e0be      	b.n	80021ce <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002050:	f000 f8ce 	bl	80021f0 <HAL_RCC_GetSysClockFreq>
 8002054:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	4a61      	ldr	r2, [pc, #388]	@ (80021e0 <HAL_RCC_ClockConfig+0x268>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d909      	bls.n	8002072 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800205e:	4b5f      	ldr	r3, [pc, #380]	@ (80021dc <HAL_RCC_ClockConfig+0x264>)
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002066:	4a5d      	ldr	r2, [pc, #372]	@ (80021dc <HAL_RCC_ClockConfig+0x264>)
 8002068:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800206c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800206e:	2380      	movs	r3, #128	@ 0x80
 8002070:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002072:	4b5a      	ldr	r3, [pc, #360]	@ (80021dc <HAL_RCC_ClockConfig+0x264>)
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	f023 0203 	bic.w	r2, r3, #3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	4957      	ldr	r1, [pc, #348]	@ (80021dc <HAL_RCC_ClockConfig+0x264>)
 8002080:	4313      	orrs	r3, r2
 8002082:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002084:	f7ff f838 	bl	80010f8 <HAL_GetTick>
 8002088:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800208a:	e00a      	b.n	80020a2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800208c:	f7ff f834 	bl	80010f8 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	f241 3288 	movw	r2, #5000	@ 0x1388
 800209a:	4293      	cmp	r3, r2
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e095      	b.n	80021ce <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020a2:	4b4e      	ldr	r3, [pc, #312]	@ (80021dc <HAL_RCC_ClockConfig+0x264>)
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	f003 020c 	and.w	r2, r3, #12
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d1eb      	bne.n	800208c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0302 	and.w	r3, r3, #2
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d023      	beq.n	8002108 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0304 	and.w	r3, r3, #4
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d005      	beq.n	80020d8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020cc:	4b43      	ldr	r3, [pc, #268]	@ (80021dc <HAL_RCC_ClockConfig+0x264>)
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	4a42      	ldr	r2, [pc, #264]	@ (80021dc <HAL_RCC_ClockConfig+0x264>)
 80020d2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80020d6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0308 	and.w	r3, r3, #8
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d007      	beq.n	80020f4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80020e4:	4b3d      	ldr	r3, [pc, #244]	@ (80021dc <HAL_RCC_ClockConfig+0x264>)
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80020ec:	4a3b      	ldr	r2, [pc, #236]	@ (80021dc <HAL_RCC_ClockConfig+0x264>)
 80020ee:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80020f2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020f4:	4b39      	ldr	r3, [pc, #228]	@ (80021dc <HAL_RCC_ClockConfig+0x264>)
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	4936      	ldr	r1, [pc, #216]	@ (80021dc <HAL_RCC_ClockConfig+0x264>)
 8002102:	4313      	orrs	r3, r2
 8002104:	608b      	str	r3, [r1, #8]
 8002106:	e008      	b.n	800211a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	2b80      	cmp	r3, #128	@ 0x80
 800210c:	d105      	bne.n	800211a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800210e:	4b33      	ldr	r3, [pc, #204]	@ (80021dc <HAL_RCC_ClockConfig+0x264>)
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	4a32      	ldr	r2, [pc, #200]	@ (80021dc <HAL_RCC_ClockConfig+0x264>)
 8002114:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002118:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800211a:	4b2f      	ldr	r3, [pc, #188]	@ (80021d8 <HAL_RCC_ClockConfig+0x260>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 030f 	and.w	r3, r3, #15
 8002122:	683a      	ldr	r2, [r7, #0]
 8002124:	429a      	cmp	r2, r3
 8002126:	d21d      	bcs.n	8002164 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002128:	4b2b      	ldr	r3, [pc, #172]	@ (80021d8 <HAL_RCC_ClockConfig+0x260>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f023 020f 	bic.w	r2, r3, #15
 8002130:	4929      	ldr	r1, [pc, #164]	@ (80021d8 <HAL_RCC_ClockConfig+0x260>)
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	4313      	orrs	r3, r2
 8002136:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002138:	f7fe ffde 	bl	80010f8 <HAL_GetTick>
 800213c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800213e:	e00a      	b.n	8002156 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002140:	f7fe ffda 	bl	80010f8 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800214e:	4293      	cmp	r3, r2
 8002150:	d901      	bls.n	8002156 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e03b      	b.n	80021ce <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002156:	4b20      	ldr	r3, [pc, #128]	@ (80021d8 <HAL_RCC_ClockConfig+0x260>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 030f 	and.w	r3, r3, #15
 800215e:	683a      	ldr	r2, [r7, #0]
 8002160:	429a      	cmp	r2, r3
 8002162:	d1ed      	bne.n	8002140 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0304 	and.w	r3, r3, #4
 800216c:	2b00      	cmp	r3, #0
 800216e:	d008      	beq.n	8002182 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002170:	4b1a      	ldr	r3, [pc, #104]	@ (80021dc <HAL_RCC_ClockConfig+0x264>)
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	4917      	ldr	r1, [pc, #92]	@ (80021dc <HAL_RCC_ClockConfig+0x264>)
 800217e:	4313      	orrs	r3, r2
 8002180:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0308 	and.w	r3, r3, #8
 800218a:	2b00      	cmp	r3, #0
 800218c:	d009      	beq.n	80021a2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800218e:	4b13      	ldr	r3, [pc, #76]	@ (80021dc <HAL_RCC_ClockConfig+0x264>)
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	691b      	ldr	r3, [r3, #16]
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	490f      	ldr	r1, [pc, #60]	@ (80021dc <HAL_RCC_ClockConfig+0x264>)
 800219e:	4313      	orrs	r3, r2
 80021a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021a2:	f000 f825 	bl	80021f0 <HAL_RCC_GetSysClockFreq>
 80021a6:	4602      	mov	r2, r0
 80021a8:	4b0c      	ldr	r3, [pc, #48]	@ (80021dc <HAL_RCC_ClockConfig+0x264>)
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	091b      	lsrs	r3, r3, #4
 80021ae:	f003 030f 	and.w	r3, r3, #15
 80021b2:	490c      	ldr	r1, [pc, #48]	@ (80021e4 <HAL_RCC_ClockConfig+0x26c>)
 80021b4:	5ccb      	ldrb	r3, [r1, r3]
 80021b6:	f003 031f 	and.w	r3, r3, #31
 80021ba:	fa22 f303 	lsr.w	r3, r2, r3
 80021be:	4a0a      	ldr	r2, [pc, #40]	@ (80021e8 <HAL_RCC_ClockConfig+0x270>)
 80021c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80021c2:	4b0a      	ldr	r3, [pc, #40]	@ (80021ec <HAL_RCC_ClockConfig+0x274>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7fe ff4a 	bl	8001060 <HAL_InitTick>
 80021cc:	4603      	mov	r3, r0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3718      	adds	r7, #24
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	40022000 	.word	0x40022000
 80021dc:	40021000 	.word	0x40021000
 80021e0:	04c4b400 	.word	0x04c4b400
 80021e4:	080049e8 	.word	0x080049e8
 80021e8:	20000000 	.word	0x20000000
 80021ec:	20000004 	.word	0x20000004

080021f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b087      	sub	sp, #28
 80021f4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80021f6:	4b2c      	ldr	r3, [pc, #176]	@ (80022a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	f003 030c 	and.w	r3, r3, #12
 80021fe:	2b04      	cmp	r3, #4
 8002200:	d102      	bne.n	8002208 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002202:	4b2a      	ldr	r3, [pc, #168]	@ (80022ac <HAL_RCC_GetSysClockFreq+0xbc>)
 8002204:	613b      	str	r3, [r7, #16]
 8002206:	e047      	b.n	8002298 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002208:	4b27      	ldr	r3, [pc, #156]	@ (80022a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	f003 030c 	and.w	r3, r3, #12
 8002210:	2b08      	cmp	r3, #8
 8002212:	d102      	bne.n	800221a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002214:	4b26      	ldr	r3, [pc, #152]	@ (80022b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002216:	613b      	str	r3, [r7, #16]
 8002218:	e03e      	b.n	8002298 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800221a:	4b23      	ldr	r3, [pc, #140]	@ (80022a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	f003 030c 	and.w	r3, r3, #12
 8002222:	2b0c      	cmp	r3, #12
 8002224:	d136      	bne.n	8002294 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002226:	4b20      	ldr	r3, [pc, #128]	@ (80022a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	f003 0303 	and.w	r3, r3, #3
 800222e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002230:	4b1d      	ldr	r3, [pc, #116]	@ (80022a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	091b      	lsrs	r3, r3, #4
 8002236:	f003 030f 	and.w	r3, r3, #15
 800223a:	3301      	adds	r3, #1
 800223c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2b03      	cmp	r3, #3
 8002242:	d10c      	bne.n	800225e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002244:	4a1a      	ldr	r2, [pc, #104]	@ (80022b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	fbb2 f3f3 	udiv	r3, r2, r3
 800224c:	4a16      	ldr	r2, [pc, #88]	@ (80022a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800224e:	68d2      	ldr	r2, [r2, #12]
 8002250:	0a12      	lsrs	r2, r2, #8
 8002252:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002256:	fb02 f303 	mul.w	r3, r2, r3
 800225a:	617b      	str	r3, [r7, #20]
      break;
 800225c:	e00c      	b.n	8002278 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800225e:	4a13      	ldr	r2, [pc, #76]	@ (80022ac <HAL_RCC_GetSysClockFreq+0xbc>)
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	fbb2 f3f3 	udiv	r3, r2, r3
 8002266:	4a10      	ldr	r2, [pc, #64]	@ (80022a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002268:	68d2      	ldr	r2, [r2, #12]
 800226a:	0a12      	lsrs	r2, r2, #8
 800226c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002270:	fb02 f303 	mul.w	r3, r2, r3
 8002274:	617b      	str	r3, [r7, #20]
      break;
 8002276:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002278:	4b0b      	ldr	r3, [pc, #44]	@ (80022a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	0e5b      	lsrs	r3, r3, #25
 800227e:	f003 0303 	and.w	r3, r3, #3
 8002282:	3301      	adds	r3, #1
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002288:	697a      	ldr	r2, [r7, #20]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002290:	613b      	str	r3, [r7, #16]
 8002292:	e001      	b.n	8002298 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002294:	2300      	movs	r3, #0
 8002296:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002298:	693b      	ldr	r3, [r7, #16]
}
 800229a:	4618      	mov	r0, r3
 800229c:	371c      	adds	r7, #28
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	40021000 	.word	0x40021000
 80022ac:	00f42400 	.word	0x00f42400
 80022b0:	016e3600 	.word	0x016e3600

080022b4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022b8:	4b03      	ldr	r3, [pc, #12]	@ (80022c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80022ba:	681b      	ldr	r3, [r3, #0]
}
 80022bc:	4618      	mov	r0, r3
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	20000000 	.word	0x20000000

080022cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80022d0:	f7ff fff0 	bl	80022b4 <HAL_RCC_GetHCLKFreq>
 80022d4:	4602      	mov	r2, r0
 80022d6:	4b06      	ldr	r3, [pc, #24]	@ (80022f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	0a1b      	lsrs	r3, r3, #8
 80022dc:	f003 0307 	and.w	r3, r3, #7
 80022e0:	4904      	ldr	r1, [pc, #16]	@ (80022f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80022e2:	5ccb      	ldrb	r3, [r1, r3]
 80022e4:	f003 031f 	and.w	r3, r3, #31
 80022e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	40021000 	.word	0x40021000
 80022f4:	080049f8 	.word	0x080049f8

080022f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80022fc:	f7ff ffda 	bl	80022b4 <HAL_RCC_GetHCLKFreq>
 8002300:	4602      	mov	r2, r0
 8002302:	4b06      	ldr	r3, [pc, #24]	@ (800231c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	0adb      	lsrs	r3, r3, #11
 8002308:	f003 0307 	and.w	r3, r3, #7
 800230c:	4904      	ldr	r1, [pc, #16]	@ (8002320 <HAL_RCC_GetPCLK2Freq+0x28>)
 800230e:	5ccb      	ldrb	r3, [r1, r3]
 8002310:	f003 031f 	and.w	r3, r3, #31
 8002314:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002318:	4618      	mov	r0, r3
 800231a:	bd80      	pop	{r7, pc}
 800231c:	40021000 	.word	0x40021000
 8002320:	080049f8 	.word	0x080049f8

08002324 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002324:	b480      	push	{r7}
 8002326:	b087      	sub	sp, #28
 8002328:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800232a:	4b1e      	ldr	r3, [pc, #120]	@ (80023a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	f003 0303 	and.w	r3, r3, #3
 8002332:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002334:	4b1b      	ldr	r3, [pc, #108]	@ (80023a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	091b      	lsrs	r3, r3, #4
 800233a:	f003 030f 	and.w	r3, r3, #15
 800233e:	3301      	adds	r3, #1
 8002340:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	2b03      	cmp	r3, #3
 8002346:	d10c      	bne.n	8002362 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002348:	4a17      	ldr	r2, [pc, #92]	@ (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002350:	4a14      	ldr	r2, [pc, #80]	@ (80023a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002352:	68d2      	ldr	r2, [r2, #12]
 8002354:	0a12      	lsrs	r2, r2, #8
 8002356:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800235a:	fb02 f303 	mul.w	r3, r2, r3
 800235e:	617b      	str	r3, [r7, #20]
    break;
 8002360:	e00c      	b.n	800237c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002362:	4a12      	ldr	r2, [pc, #72]	@ (80023ac <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	fbb2 f3f3 	udiv	r3, r2, r3
 800236a:	4a0e      	ldr	r2, [pc, #56]	@ (80023a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800236c:	68d2      	ldr	r2, [r2, #12]
 800236e:	0a12      	lsrs	r2, r2, #8
 8002370:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002374:	fb02 f303 	mul.w	r3, r2, r3
 8002378:	617b      	str	r3, [r7, #20]
    break;
 800237a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800237c:	4b09      	ldr	r3, [pc, #36]	@ (80023a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	0e5b      	lsrs	r3, r3, #25
 8002382:	f003 0303 	and.w	r3, r3, #3
 8002386:	3301      	adds	r3, #1
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800238c:	697a      	ldr	r2, [r7, #20]
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	fbb2 f3f3 	udiv	r3, r2, r3
 8002394:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002396:	687b      	ldr	r3, [r7, #4]
}
 8002398:	4618      	mov	r0, r3
 800239a:	371c      	adds	r7, #28
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr
 80023a4:	40021000 	.word	0x40021000
 80023a8:	016e3600 	.word	0x016e3600
 80023ac:	00f42400 	.word	0x00f42400

080023b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b086      	sub	sp, #24
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80023b8:	2300      	movs	r3, #0
 80023ba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80023bc:	2300      	movs	r3, #0
 80023be:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	f000 8098 	beq.w	80024fe <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023ce:	2300      	movs	r3, #0
 80023d0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023d2:	4b43      	ldr	r3, [pc, #268]	@ (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d10d      	bne.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023de:	4b40      	ldr	r3, [pc, #256]	@ (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023e2:	4a3f      	ldr	r2, [pc, #252]	@ (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80023ea:	4b3d      	ldr	r3, [pc, #244]	@ (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023f2:	60bb      	str	r3, [r7, #8]
 80023f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023f6:	2301      	movs	r3, #1
 80023f8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023fa:	4b3a      	ldr	r3, [pc, #232]	@ (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a39      	ldr	r2, [pc, #228]	@ (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002400:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002404:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002406:	f7fe fe77 	bl	80010f8 <HAL_GetTick>
 800240a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800240c:	e009      	b.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800240e:	f7fe fe73 	bl	80010f8 <HAL_GetTick>
 8002412:	4602      	mov	r2, r0
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	2b02      	cmp	r3, #2
 800241a:	d902      	bls.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800241c:	2303      	movs	r3, #3
 800241e:	74fb      	strb	r3, [r7, #19]
        break;
 8002420:	e005      	b.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002422:	4b30      	ldr	r3, [pc, #192]	@ (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800242a:	2b00      	cmp	r3, #0
 800242c:	d0ef      	beq.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800242e:	7cfb      	ldrb	r3, [r7, #19]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d159      	bne.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002434:	4b2a      	ldr	r3, [pc, #168]	@ (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002436:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800243a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800243e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d01e      	beq.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800244a:	697a      	ldr	r2, [r7, #20]
 800244c:	429a      	cmp	r2, r3
 800244e:	d019      	beq.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002450:	4b23      	ldr	r3, [pc, #140]	@ (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002452:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002456:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800245a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800245c:	4b20      	ldr	r3, [pc, #128]	@ (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800245e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002462:	4a1f      	ldr	r2, [pc, #124]	@ (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002464:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002468:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800246c:	4b1c      	ldr	r3, [pc, #112]	@ (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800246e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002472:	4a1b      	ldr	r2, [pc, #108]	@ (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002474:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002478:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800247c:	4a18      	ldr	r2, [pc, #96]	@ (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	f003 0301 	and.w	r3, r3, #1
 800248a:	2b00      	cmp	r3, #0
 800248c:	d016      	beq.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800248e:	f7fe fe33 	bl	80010f8 <HAL_GetTick>
 8002492:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002494:	e00b      	b.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002496:	f7fe fe2f 	bl	80010f8 <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d902      	bls.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	74fb      	strb	r3, [r7, #19]
            break;
 80024ac:	e006      	b.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024ae:	4b0c      	ldr	r3, [pc, #48]	@ (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d0ec      	beq.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80024bc:	7cfb      	ldrb	r3, [r7, #19]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d10b      	bne.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024c2:	4b07      	ldr	r3, [pc, #28]	@ (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024c8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024d0:	4903      	ldr	r1, [pc, #12]	@ (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024d2:	4313      	orrs	r3, r2
 80024d4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80024d8:	e008      	b.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80024da:	7cfb      	ldrb	r3, [r7, #19]
 80024dc:	74bb      	strb	r3, [r7, #18]
 80024de:	e005      	b.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80024e0:	40021000 	.word	0x40021000
 80024e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024e8:	7cfb      	ldrb	r3, [r7, #19]
 80024ea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024ec:	7c7b      	ldrb	r3, [r7, #17]
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d105      	bne.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024f2:	4ba7      	ldr	r3, [pc, #668]	@ (8002790 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024f6:	4aa6      	ldr	r2, [pc, #664]	@ (8002790 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024fc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0301 	and.w	r3, r3, #1
 8002506:	2b00      	cmp	r3, #0
 8002508:	d00a      	beq.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800250a:	4ba1      	ldr	r3, [pc, #644]	@ (8002790 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800250c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002510:	f023 0203 	bic.w	r2, r3, #3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	499d      	ldr	r1, [pc, #628]	@ (8002790 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800251a:	4313      	orrs	r3, r2
 800251c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0302 	and.w	r3, r3, #2
 8002528:	2b00      	cmp	r3, #0
 800252a:	d00a      	beq.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800252c:	4b98      	ldr	r3, [pc, #608]	@ (8002790 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800252e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002532:	f023 020c 	bic.w	r2, r3, #12
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	4995      	ldr	r1, [pc, #596]	@ (8002790 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800253c:	4313      	orrs	r3, r2
 800253e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0304 	and.w	r3, r3, #4
 800254a:	2b00      	cmp	r3, #0
 800254c:	d00a      	beq.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800254e:	4b90      	ldr	r3, [pc, #576]	@ (8002790 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002550:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002554:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	498c      	ldr	r1, [pc, #560]	@ (8002790 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800255e:	4313      	orrs	r3, r2
 8002560:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0308 	and.w	r3, r3, #8
 800256c:	2b00      	cmp	r3, #0
 800256e:	d00a      	beq.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002570:	4b87      	ldr	r3, [pc, #540]	@ (8002790 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002572:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002576:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	4984      	ldr	r1, [pc, #528]	@ (8002790 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002580:	4313      	orrs	r3, r2
 8002582:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0310 	and.w	r3, r3, #16
 800258e:	2b00      	cmp	r3, #0
 8002590:	d00a      	beq.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002592:	4b7f      	ldr	r3, [pc, #508]	@ (8002790 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002594:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002598:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	695b      	ldr	r3, [r3, #20]
 80025a0:	497b      	ldr	r1, [pc, #492]	@ (8002790 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0320 	and.w	r3, r3, #32
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d00a      	beq.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80025b4:	4b76      	ldr	r3, [pc, #472]	@ (8002790 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025ba:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	699b      	ldr	r3, [r3, #24]
 80025c2:	4973      	ldr	r1, [pc, #460]	@ (8002790 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d00a      	beq.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025d6:	4b6e      	ldr	r3, [pc, #440]	@ (8002790 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025dc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	69db      	ldr	r3, [r3, #28]
 80025e4:	496a      	ldr	r1, [pc, #424]	@ (8002790 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d00a      	beq.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80025f8:	4b65      	ldr	r3, [pc, #404]	@ (8002790 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025fe:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a1b      	ldr	r3, [r3, #32]
 8002606:	4962      	ldr	r1, [pc, #392]	@ (8002790 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002608:	4313      	orrs	r3, r2
 800260a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002616:	2b00      	cmp	r3, #0
 8002618:	d00a      	beq.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800261a:	4b5d      	ldr	r3, [pc, #372]	@ (8002790 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800261c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002620:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002628:	4959      	ldr	r1, [pc, #356]	@ (8002790 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800262a:	4313      	orrs	r3, r2
 800262c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d00a      	beq.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800263c:	4b54      	ldr	r3, [pc, #336]	@ (8002790 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800263e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002642:	f023 0203 	bic.w	r2, r3, #3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800264a:	4951      	ldr	r1, [pc, #324]	@ (8002790 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800264c:	4313      	orrs	r3, r2
 800264e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800265a:	2b00      	cmp	r3, #0
 800265c:	d00a      	beq.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800265e:	4b4c      	ldr	r3, [pc, #304]	@ (8002790 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002660:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002664:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800266c:	4948      	ldr	r1, [pc, #288]	@ (8002790 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800266e:	4313      	orrs	r3, r2
 8002670:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800267c:	2b00      	cmp	r3, #0
 800267e:	d015      	beq.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002680:	4b43      	ldr	r3, [pc, #268]	@ (8002790 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002682:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002686:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800268e:	4940      	ldr	r1, [pc, #256]	@ (8002790 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002690:	4313      	orrs	r3, r2
 8002692:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800269a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800269e:	d105      	bne.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026a0:	4b3b      	ldr	r3, [pc, #236]	@ (8002790 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	4a3a      	ldr	r2, [pc, #232]	@ (8002790 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80026aa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d015      	beq.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80026b8:	4b35      	ldr	r3, [pc, #212]	@ (8002790 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026be:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026c6:	4932      	ldr	r1, [pc, #200]	@ (8002790 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026c8:	4313      	orrs	r3, r2
 80026ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026d2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80026d6:	d105      	bne.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026d8:	4b2d      	ldr	r3, [pc, #180]	@ (8002790 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	4a2c      	ldr	r2, [pc, #176]	@ (8002790 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80026e2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d015      	beq.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80026f0:	4b27      	ldr	r3, [pc, #156]	@ (8002790 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026f6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026fe:	4924      	ldr	r1, [pc, #144]	@ (8002790 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002700:	4313      	orrs	r3, r2
 8002702:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800270a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800270e:	d105      	bne.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002710:	4b1f      	ldr	r3, [pc, #124]	@ (8002790 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	4a1e      	ldr	r2, [pc, #120]	@ (8002790 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002716:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800271a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d015      	beq.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002728:	4b19      	ldr	r3, [pc, #100]	@ (8002790 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800272a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800272e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002736:	4916      	ldr	r1, [pc, #88]	@ (8002790 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002738:	4313      	orrs	r3, r2
 800273a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002742:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002746:	d105      	bne.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002748:	4b11      	ldr	r3, [pc, #68]	@ (8002790 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	4a10      	ldr	r2, [pc, #64]	@ (8002790 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800274e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002752:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d019      	beq.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002760:	4b0b      	ldr	r3, [pc, #44]	@ (8002790 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002762:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002766:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800276e:	4908      	ldr	r1, [pc, #32]	@ (8002790 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002770:	4313      	orrs	r3, r2
 8002772:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800277a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800277e:	d109      	bne.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002780:	4b03      	ldr	r3, [pc, #12]	@ (8002790 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	4a02      	ldr	r2, [pc, #8]	@ (8002790 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002786:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800278a:	60d3      	str	r3, [r2, #12]
 800278c:	e002      	b.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800278e:	bf00      	nop
 8002790:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d015      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80027a0:	4b29      	ldr	r3, [pc, #164]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80027a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027a6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ae:	4926      	ldr	r1, [pc, #152]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80027b0:	4313      	orrs	r3, r2
 80027b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80027be:	d105      	bne.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80027c0:	4b21      	ldr	r3, [pc, #132]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	4a20      	ldr	r2, [pc, #128]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80027c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027ca:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d015      	beq.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80027d8:	4b1b      	ldr	r3, [pc, #108]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80027da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027de:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027e6:	4918      	ldr	r1, [pc, #96]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027f6:	d105      	bne.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80027f8:	4b13      	ldr	r3, [pc, #76]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	4a12      	ldr	r2, [pc, #72]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80027fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002802:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d015      	beq.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002810:	4b0d      	ldr	r3, [pc, #52]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002812:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002816:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800281e:	490a      	ldr	r1, [pc, #40]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002820:	4313      	orrs	r3, r2
 8002822:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800282a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800282e:	d105      	bne.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002830:	4b05      	ldr	r3, [pc, #20]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	4a04      	ldr	r2, [pc, #16]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002836:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800283a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800283c:	7cbb      	ldrb	r3, [r7, #18]
}
 800283e:	4618      	mov	r0, r3
 8002840:	3718      	adds	r7, #24
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	40021000 	.word	0x40021000

0800284c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d101      	bne.n	800285e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e09d      	b.n	800299a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002862:	2b00      	cmp	r3, #0
 8002864:	d108      	bne.n	8002878 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800286e:	d009      	beq.n	8002884 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	61da      	str	r2, [r3, #28]
 8002876:	e005      	b.n	8002884 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002890:	b2db      	uxtb	r3, r3
 8002892:	2b00      	cmp	r3, #0
 8002894:	d106      	bne.n	80028a4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f7fe fa74 	bl	8000d8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2202      	movs	r2, #2
 80028a8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80028ba:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80028c4:	d902      	bls.n	80028cc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80028c6:	2300      	movs	r3, #0
 80028c8:	60fb      	str	r3, [r7, #12]
 80028ca:	e002      	b.n	80028d2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80028cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80028d0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80028da:	d007      	beq.n	80028ec <HAL_SPI_Init+0xa0>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80028e4:	d002      	beq.n	80028ec <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80028fc:	431a      	orrs	r2, r3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	691b      	ldr	r3, [r3, #16]
 8002902:	f003 0302 	and.w	r3, r3, #2
 8002906:	431a      	orrs	r2, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	695b      	ldr	r3, [r3, #20]
 800290c:	f003 0301 	and.w	r3, r3, #1
 8002910:	431a      	orrs	r2, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800291a:	431a      	orrs	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	69db      	ldr	r3, [r3, #28]
 8002920:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002924:	431a      	orrs	r2, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a1b      	ldr	r3, [r3, #32]
 800292a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800292e:	ea42 0103 	orr.w	r1, r2, r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002936:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	430a      	orrs	r2, r1
 8002940:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	699b      	ldr	r3, [r3, #24]
 8002946:	0c1b      	lsrs	r3, r3, #16
 8002948:	f003 0204 	and.w	r2, r3, #4
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002950:	f003 0310 	and.w	r3, r3, #16
 8002954:	431a      	orrs	r2, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800295a:	f003 0308 	and.w	r3, r3, #8
 800295e:	431a      	orrs	r2, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002968:	ea42 0103 	orr.w	r1, r2, r3
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	430a      	orrs	r2, r1
 8002978:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	69da      	ldr	r2, [r3, #28]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002988:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	3710      	adds	r7, #16
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
	...

080029a4 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b087      	sub	sp, #28
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	607a      	str	r2, [r7, #4]
 80029b0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80029b2:	2300      	movs	r3, #0
 80029b4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80029bc:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80029c4:	7dbb      	ldrb	r3, [r7, #22]
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d00d      	beq.n	80029e6 <HAL_SPI_TransmitReceive_IT+0x42>
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80029d0:	d106      	bne.n	80029e0 <HAL_SPI_TransmitReceive_IT+0x3c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d102      	bne.n	80029e0 <HAL_SPI_TransmitReceive_IT+0x3c>
 80029da:	7dbb      	ldrb	r3, [r7, #22]
 80029dc:	2b04      	cmp	r3, #4
 80029de:	d002      	beq.n	80029e6 <HAL_SPI_TransmitReceive_IT+0x42>
  {
    errorcode = HAL_BUSY;
 80029e0:	2302      	movs	r3, #2
 80029e2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80029e4:	e07d      	b.n	8002ae2 <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d005      	beq.n	80029f8 <HAL_SPI_TransmitReceive_IT+0x54>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d002      	beq.n	80029f8 <HAL_SPI_TransmitReceive_IT+0x54>
 80029f2:	887b      	ldrh	r3, [r7, #2]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d102      	bne.n	80029fe <HAL_SPI_TransmitReceive_IT+0x5a>
  {
    errorcode = HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	75fb      	strb	r3, [r7, #23]
    goto error;
 80029fc:	e071      	b.n	8002ae2 <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d101      	bne.n	8002a0c <HAL_SPI_TransmitReceive_IT+0x68>
 8002a08:	2302      	movs	r3, #2
 8002a0a:	e06b      	b.n	8002ae4 <HAL_SPI_TransmitReceive_IT+0x140>
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	2b04      	cmp	r3, #4
 8002a1e:	d003      	beq.n	8002a28 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2205      	movs	r2, #5
 8002a24:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	68ba      	ldr	r2, [r7, #8]
 8002a32:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	887a      	ldrh	r2, [r7, #2]
 8002a38:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	887a      	ldrh	r2, [r7, #2]
 8002a3e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	887a      	ldrh	r2, [r7, #2]
 8002a4a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	887a      	ldrh	r2, [r7, #2]
 8002a52:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002a5e:	d906      	bls.n	8002a6e <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	4a23      	ldr	r2, [pc, #140]	@ (8002af0 <HAL_SPI_TransmitReceive_IT+0x14c>)
 8002a64:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	4a22      	ldr	r2, [pc, #136]	@ (8002af4 <HAL_SPI_TransmitReceive_IT+0x150>)
 8002a6a:	651a      	str	r2, [r3, #80]	@ 0x50
 8002a6c:	e005      	b.n	8002a7a <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	4a21      	ldr	r2, [pc, #132]	@ (8002af8 <HAL_SPI_TransmitReceive_IT+0x154>)
 8002a72:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	4a21      	ldr	r2, [pc, #132]	@ (8002afc <HAL_SPI_TransmitReceive_IT+0x158>)
 8002a78:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002a82:	d802      	bhi.n	8002a8a <HAL_SPI_TransmitReceive_IT+0xe6>
 8002a84:	887b      	ldrh	r3, [r7, #2]
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d908      	bls.n	8002a9c <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	685a      	ldr	r2, [r3, #4]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002a98:	605a      	str	r2, [r3, #4]
 8002a9a:	e007      	b.n	8002aac <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	685a      	ldr	r2, [r3, #4]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002aaa:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ab6:	2b40      	cmp	r3, #64	@ 0x40
 8002ab8:	d007      	beq.n	8002aca <HAL_SPI_TransmitReceive_IT+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002ac8:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	685a      	ldr	r2, [r3, #4]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 8002ae0:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 8002ae2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	371c      	adds	r7, #28
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr
 8002af0:	08002e8b 	.word	0x08002e8b
 8002af4:	08002ef1 	.word	0x08002ef1
 8002af8:	08002d3b 	.word	0x08002d3b
 8002afc:	08002df9 	.word	0x08002df9

08002b00 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b088      	sub	sp, #32
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002b18:	69bb      	ldr	r3, [r7, #24]
 8002b1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d10e      	bne.n	8002b40 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d009      	beq.n	8002b40 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d004      	beq.n	8002b40 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	4798      	blx	r3
    return;
 8002b3e:	e0ce      	b.n	8002cde <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	f003 0302 	and.w	r3, r3, #2
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d009      	beq.n	8002b5e <HAL_SPI_IRQHandler+0x5e>
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d004      	beq.n	8002b5e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	4798      	blx	r3
    return;
 8002b5c:	e0bf      	b.n	8002cde <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002b5e:	69bb      	ldr	r3, [r7, #24]
 8002b60:	f003 0320 	and.w	r3, r3, #32
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d10a      	bne.n	8002b7e <HAL_SPI_IRQHandler+0x7e>
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d105      	bne.n	8002b7e <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	f000 80b0 	beq.w	8002cde <HAL_SPI_IRQHandler+0x1de>
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	f003 0320 	and.w	r3, r3, #32
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	f000 80aa 	beq.w	8002cde <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d023      	beq.n	8002bdc <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	2b03      	cmp	r3, #3
 8002b9e:	d011      	beq.n	8002bc4 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ba4:	f043 0204 	orr.w	r2, r3, #4
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002bac:	2300      	movs	r3, #0
 8002bae:	617b      	str	r3, [r7, #20]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	617b      	str	r3, [r7, #20]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	617b      	str	r3, [r7, #20]
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	e00b      	b.n	8002bdc <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	613b      	str	r3, [r7, #16]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	613b      	str	r3, [r7, #16]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	613b      	str	r3, [r7, #16]
 8002bd8:	693b      	ldr	r3, [r7, #16]
        return;
 8002bda:	e080      	b.n	8002cde <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	f003 0320 	and.w	r3, r3, #32
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d014      	beq.n	8002c10 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bea:	f043 0201 	orr.w	r2, r3, #1
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	60fb      	str	r3, [r7, #12]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	60fb      	str	r3, [r7, #12]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c0c:	601a      	str	r2, [r3, #0]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d00c      	beq.n	8002c34 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c1e:	f043 0208 	orr.w	r2, r3, #8
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002c26:	2300      	movs	r3, #0
 8002c28:	60bb      	str	r3, [r7, #8]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	60bb      	str	r3, [r7, #8]
 8002c32:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d04f      	beq.n	8002cdc <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	685a      	ldr	r2, [r3, #4]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002c4a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	f003 0302 	and.w	r3, r3, #2
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d104      	bne.n	8002c68 <HAL_SPI_IRQHandler+0x168>
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	f003 0301 	and.w	r3, r3, #1
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d034      	beq.n	8002cd2 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	685a      	ldr	r2, [r3, #4]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f022 0203 	bic.w	r2, r2, #3
 8002c76:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d011      	beq.n	8002ca4 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c84:	4a17      	ldr	r2, [pc, #92]	@ (8002ce4 <HAL_SPI_IRQHandler+0x1e4>)
 8002c86:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7fe fb70 	bl	8001372 <HAL_DMA_Abort_IT>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d005      	beq.n	8002ca4 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c9c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d016      	beq.n	8002cda <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cb0:	4a0c      	ldr	r2, [pc, #48]	@ (8002ce4 <HAL_SPI_IRQHandler+0x1e4>)
 8002cb2:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7fe fb5a 	bl	8001372 <HAL_DMA_Abort_IT>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d00a      	beq.n	8002cda <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cc8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8002cd0:	e003      	b.n	8002cda <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f000 f812 	bl	8002cfc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002cd8:	e000      	b.n	8002cdc <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8002cda:	bf00      	nop
    return;
 8002cdc:	bf00      	nop
  }
}
 8002cde:	3720      	adds	r7, #32
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	08002d11 	.word	0x08002d11

08002ce8 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8002cf0:	bf00      	nop
 8002cf2:	370c      	adds	r7, #12
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr

08002cfc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002d04:	bf00      	nop
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d1c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002d2c:	68f8      	ldr	r0, [r7, #12]
 8002d2e:	f7ff ffe5 	bl	8002cfc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002d32:	bf00      	nop
 8002d34:	3710      	adds	r7, #16
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}

08002d3a <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002d3a:	b580      	push	{r7, lr}
 8002d3c:	b082      	sub	sp, #8
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d923      	bls.n	8002d96 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	68da      	ldr	r2, [r3, #12]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d58:	b292      	uxth	r2, r2
 8002d5a:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d60:	1c9a      	adds	r2, r3, #2
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount -= 2U;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	3b02      	subs	r3, #2
 8002d70:	b29a      	uxth	r2, r3
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    if (hspi->RxXferCount == 1U)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d11f      	bne.n	8002dc4 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	685a      	ldr	r2, [r3, #4]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002d92:	605a      	str	r2, [r3, #4]
 8002d94:	e016      	b.n	8002dc4 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f103 020c 	add.w	r2, r3, #12
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da2:	7812      	ldrb	r2, [r2, #0]
 8002da4:	b2d2      	uxtb	r2, r2
 8002da6:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dac:	1c5a      	adds	r2, r3, #1
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount--;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	b29a      	uxth	r2, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d10f      	bne.n	8002df0 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	685a      	ldr	r2, [r3, #4]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002dde:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d102      	bne.n	8002df0 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f000 fa14 	bl	8003218 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002df0:	bf00      	nop
 8002df2:	3708      	adds	r7, #8
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d912      	bls.n	8002e30 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e0e:	881a      	ldrh	r2, [r3, #0]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e1a:	1c9a      	adds	r2, r3, #2
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount -= 2U;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	3b02      	subs	r3, #2
 8002e28:	b29a      	uxth	r2, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002e2e:	e012      	b.n	8002e56 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	330c      	adds	r3, #12
 8002e3a:	7812      	ldrb	r2, [r2, #0]
 8002e3c:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e42:	1c5a      	adds	r2, r3, #1
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount--;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	3b01      	subs	r3, #1
 8002e50:	b29a      	uxth	r2, r3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	87da      	strh	r2, [r3, #62]	@ 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d110      	bne.n	8002e82 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	685a      	ldr	r2, [r3, #4]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002e6e:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d102      	bne.n	8002e82 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f000 f9cb 	bl	8003218 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002e82:	bf00      	nop
 8002e84:	3708      	adds	r7, #8
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}

08002e8a <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002e8a:	b580      	push	{r7, lr}
 8002e8c:	b082      	sub	sp, #8
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	68da      	ldr	r2, [r3, #12]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e9c:	b292      	uxth	r2, r2
 8002e9e:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ea4:	1c9a      	adds	r2, r3, #2
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	3b01      	subs	r3, #1
 8002eb4:	b29a      	uxth	r2, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  if (hspi->RxXferCount == 0U)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d10f      	bne.n	8002ee8 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	685a      	ldr	r2, [r3, #4]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ed6:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d102      	bne.n	8002ee8 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f000 f998 	bl	8003218 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002ee8:	bf00      	nop
 8002eea:	3708      	adds	r7, #8
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002efc:	881a      	ldrh	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f08:	1c9a      	adds	r2, r3, #2
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	3b01      	subs	r3, #1
 8002f16:	b29a      	uxth	r2, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d110      	bne.n	8002f48 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	685a      	ldr	r2, [r3, #4]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002f34:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d102      	bne.n	8002f48 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f000 f968 	bl	8003218 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002f48:	bf00      	nop
 8002f4a:	3708      	adds	r7, #8
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}

08002f50 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b088      	sub	sp, #32
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	60b9      	str	r1, [r7, #8]
 8002f5a:	603b      	str	r3, [r7, #0]
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002f60:	f7fe f8ca 	bl	80010f8 <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f68:	1a9b      	subs	r3, r3, r2
 8002f6a:	683a      	ldr	r2, [r7, #0]
 8002f6c:	4413      	add	r3, r2
 8002f6e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002f70:	f7fe f8c2 	bl	80010f8 <HAL_GetTick>
 8002f74:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002f76:	4b39      	ldr	r3, [pc, #228]	@ (800305c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	015b      	lsls	r3, r3, #5
 8002f7c:	0d1b      	lsrs	r3, r3, #20
 8002f7e:	69fa      	ldr	r2, [r7, #28]
 8002f80:	fb02 f303 	mul.w	r3, r2, r3
 8002f84:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f86:	e054      	b.n	8003032 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f8e:	d050      	beq.n	8003032 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002f90:	f7fe f8b2 	bl	80010f8 <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	69bb      	ldr	r3, [r7, #24]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	69fa      	ldr	r2, [r7, #28]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d902      	bls.n	8002fa6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d13d      	bne.n	8003022 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	685a      	ldr	r2, [r3, #4]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002fb4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002fbe:	d111      	bne.n	8002fe4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002fc8:	d004      	beq.n	8002fd4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fd2:	d107      	bne.n	8002fe4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002fe2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fe8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002fec:	d10f      	bne.n	800300e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002ffc:	601a      	str	r2, [r3, #0]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800300c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2201      	movs	r2, #1
 8003012:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e017      	b.n	8003052 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d101      	bne.n	800302c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003028:	2300      	movs	r3, #0
 800302a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	3b01      	subs	r3, #1
 8003030:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	689a      	ldr	r2, [r3, #8]
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	4013      	ands	r3, r2
 800303c:	68ba      	ldr	r2, [r7, #8]
 800303e:	429a      	cmp	r2, r3
 8003040:	bf0c      	ite	eq
 8003042:	2301      	moveq	r3, #1
 8003044:	2300      	movne	r3, #0
 8003046:	b2db      	uxtb	r3, r3
 8003048:	461a      	mov	r2, r3
 800304a:	79fb      	ldrb	r3, [r7, #7]
 800304c:	429a      	cmp	r2, r3
 800304e:	d19b      	bne.n	8002f88 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	3720      	adds	r7, #32
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	20000000 	.word	0x20000000

08003060 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b08a      	sub	sp, #40	@ 0x28
 8003064:	af00      	add	r7, sp, #0
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	60b9      	str	r1, [r7, #8]
 800306a:	607a      	str	r2, [r7, #4]
 800306c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800306e:	2300      	movs	r3, #0
 8003070:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003072:	f7fe f841 	bl	80010f8 <HAL_GetTick>
 8003076:	4602      	mov	r2, r0
 8003078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800307a:	1a9b      	subs	r3, r3, r2
 800307c:	683a      	ldr	r2, [r7, #0]
 800307e:	4413      	add	r3, r2
 8003080:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003082:	f7fe f839 	bl	80010f8 <HAL_GetTick>
 8003086:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	330c      	adds	r3, #12
 800308e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003090:	4b3d      	ldr	r3, [pc, #244]	@ (8003188 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	4613      	mov	r3, r2
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	4413      	add	r3, r2
 800309a:	00da      	lsls	r2, r3, #3
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	0d1b      	lsrs	r3, r3, #20
 80030a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030a2:	fb02 f303 	mul.w	r3, r2, r3
 80030a6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80030a8:	e060      	b.n	800316c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80030b0:	d107      	bne.n	80030c2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d104      	bne.n	80030c2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80030c0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030c8:	d050      	beq.n	800316c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80030ca:	f7fe f815 	bl	80010f8 <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	6a3b      	ldr	r3, [r7, #32]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d902      	bls.n	80030e0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80030da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d13d      	bne.n	800315c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	685a      	ldr	r2, [r3, #4]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80030ee:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80030f8:	d111      	bne.n	800311e <SPI_WaitFifoStateUntilTimeout+0xbe>
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003102:	d004      	beq.n	800310e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800310c:	d107      	bne.n	800311e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800311c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003122:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003126:	d10f      	bne.n	8003148 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003136:	601a      	str	r2, [r3, #0]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003146:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003158:	2303      	movs	r3, #3
 800315a:	e010      	b.n	800317e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d101      	bne.n	8003166 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003162:	2300      	movs	r3, #0
 8003164:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003166:	69bb      	ldr	r3, [r7, #24]
 8003168:	3b01      	subs	r3, #1
 800316a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	689a      	ldr	r2, [r3, #8]
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	4013      	ands	r3, r2
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	429a      	cmp	r2, r3
 800317a:	d196      	bne.n	80030aa <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800317c:	2300      	movs	r3, #0
}
 800317e:	4618      	mov	r0, r3
 8003180:	3728      	adds	r7, #40	@ 0x28
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	20000000 	.word	0x20000000

0800318c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b086      	sub	sp, #24
 8003190:	af02      	add	r7, sp, #8
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	9300      	str	r3, [sp, #0]
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	2200      	movs	r2, #0
 80031a0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80031a4:	68f8      	ldr	r0, [r7, #12]
 80031a6:	f7ff ff5b 	bl	8003060 <SPI_WaitFifoStateUntilTimeout>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d007      	beq.n	80031c0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031b4:	f043 0220 	orr.w	r2, r3, #32
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80031bc:	2303      	movs	r3, #3
 80031be:	e027      	b.n	8003210 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	9300      	str	r3, [sp, #0]
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	2200      	movs	r2, #0
 80031c8:	2180      	movs	r1, #128	@ 0x80
 80031ca:	68f8      	ldr	r0, [r7, #12]
 80031cc:	f7ff fec0 	bl	8002f50 <SPI_WaitFlagStateUntilTimeout>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d007      	beq.n	80031e6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031da:	f043 0220 	orr.w	r2, r3, #32
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e014      	b.n	8003210 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	9300      	str	r3, [sp, #0]
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80031f2:	68f8      	ldr	r0, [r7, #12]
 80031f4:	f7ff ff34 	bl	8003060 <SPI_WaitFifoStateUntilTimeout>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d007      	beq.n	800320e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003202:	f043 0220 	orr.w	r2, r3, #32
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e000      	b.n	8003210 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800320e:	2300      	movs	r3, #0
}
 8003210:	4618      	mov	r0, r3
 8003212:	3710      	adds	r7, #16
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003220:	f7fd ff6a 	bl	80010f8 <HAL_GetTick>
 8003224:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	685a      	ldr	r2, [r3, #4]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f022 0220 	bic.w	r2, r2, #32
 8003234:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003236:	68fa      	ldr	r2, [r7, #12]
 8003238:	2164      	movs	r1, #100	@ 0x64
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f7ff ffa6 	bl	800318c <SPI_EndRxTxTransaction>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d005      	beq.n	8003252 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800324a:	f043 0220 	orr.w	r2, r3, #32
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	661a      	str	r2, [r3, #96]	@ 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003256:	2b00      	cmp	r3, #0
 8003258:	d115      	bne.n	8003286 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b04      	cmp	r3, #4
 8003264:	d107      	bne.n	8003276 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2201      	movs	r2, #1
 800326a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f7ff fd3a 	bl	8002ce8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8003274:	e00e      	b.n	8003294 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2201      	movs	r2, #1
 800327a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f7fd fd4a 	bl	8000d18 <HAL_SPI_TxRxCpltCallback>
}
 8003284:	e006      	b.n	8003294 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2201      	movs	r2, #1
 800328a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      HAL_SPI_ErrorCallback(hspi);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f7ff fd34 	bl	8002cfc <HAL_SPI_ErrorCallback>
}
 8003294:	bf00      	nop
 8003296:	3710      	adds	r7, #16
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}

0800329c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d101      	bne.n	80032ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e054      	b.n	8003358 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d111      	bne.n	80032de <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f000 fb48 	bl	8003958 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d102      	bne.n	80032d6 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	4a23      	ldr	r2, [pc, #140]	@ (8003360 <HAL_TIM_Base_Init+0xc4>)
 80032d4:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2202      	movs	r2, #2
 80032e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	3304      	adds	r3, #4
 80032ee:	4619      	mov	r1, r3
 80032f0:	4610      	mov	r0, r2
 80032f2:	f000 fa7d 	bl	80037f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2201      	movs	r2, #1
 80032fa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2201      	movs	r2, #1
 8003302:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2201      	movs	r2, #1
 800330a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2201      	movs	r2, #1
 8003312:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2201      	movs	r2, #1
 800331a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2201      	movs	r2, #1
 8003322:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2201      	movs	r2, #1
 800332a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2201      	movs	r2, #1
 8003332:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2201      	movs	r2, #1
 800333a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2201      	movs	r2, #1
 8003342:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2201      	movs	r2, #1
 800334a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2201      	movs	r2, #1
 8003352:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003356:	2300      	movs	r3, #0
}
 8003358:	4618      	mov	r0, r3
 800335a:	3708      	adds	r7, #8
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}
 8003360:	08000e25 	.word	0x08000e25

08003364 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d101      	bne.n	8003378 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e04c      	b.n	8003412 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800337e:	b2db      	uxtb	r3, r3
 8003380:	2b00      	cmp	r3, #0
 8003382:	d111      	bne.n	80033a8 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f000 fae3 	bl	8003958 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003396:	2b00      	cmp	r3, #0
 8003398:	d102      	bne.n	80033a0 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a1f      	ldr	r2, [pc, #124]	@ (800341c <HAL_TIM_OnePulse_Init+0xb8>)
 800339e:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2202      	movs	r2, #2
 80033ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	3304      	adds	r3, #4
 80033b8:	4619      	mov	r1, r3
 80033ba:	4610      	mov	r0, r2
 80033bc:	f000 fa18 	bl	80037f0 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f022 0208 	bic.w	r2, r2, #8
 80033ce:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	6819      	ldr	r1, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	683a      	ldr	r2, [r7, #0]
 80033dc:	430a      	orrs	r2, r1
 80033de:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003410:	2300      	movs	r3, #0
}
 8003412:	4618      	mov	r0, r3
 8003414:	3708      	adds	r7, #8
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	08003421 	.word	0x08003421

08003420 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8003428:	bf00      	nop
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	691b      	ldr	r3, [r3, #16]
 800344a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	f003 0302 	and.w	r3, r3, #2
 8003452:	2b00      	cmp	r3, #0
 8003454:	d026      	beq.n	80034a4 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	f003 0302 	and.w	r3, r3, #2
 800345c:	2b00      	cmp	r3, #0
 800345e:	d021      	beq.n	80034a4 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f06f 0202 	mvn.w	r2, #2
 8003468:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2201      	movs	r2, #1
 800346e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	699b      	ldr	r3, [r3, #24]
 8003476:	f003 0303 	and.w	r3, r3, #3
 800347a:	2b00      	cmp	r3, #0
 800347c:	d005      	beq.n	800348a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	4798      	blx	r3
 8003488:	e009      	b.n	800349e <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	f003 0304 	and.w	r3, r3, #4
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d026      	beq.n	80034fc <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f003 0304 	and.w	r3, r3, #4
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d021      	beq.n	80034fc <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f06f 0204 	mvn.w	r2, #4
 80034c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2202      	movs	r2, #2
 80034c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	699b      	ldr	r3, [r3, #24]
 80034ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d005      	beq.n	80034e2 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	4798      	blx	r3
 80034e0:	e009      	b.n	80034f6 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	f003 0308 	and.w	r3, r3, #8
 8003502:	2b00      	cmp	r3, #0
 8003504:	d026      	beq.n	8003554 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	f003 0308 	and.w	r3, r3, #8
 800350c:	2b00      	cmp	r3, #0
 800350e:	d021      	beq.n	8003554 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f06f 0208 	mvn.w	r2, #8
 8003518:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2204      	movs	r2, #4
 800351e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	69db      	ldr	r3, [r3, #28]
 8003526:	f003 0303 	and.w	r3, r3, #3
 800352a:	2b00      	cmp	r3, #0
 800352c:	d005      	beq.n	800353a <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	4798      	blx	r3
 8003538:	e009      	b.n	800354e <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	f003 0310 	and.w	r3, r3, #16
 800355a:	2b00      	cmp	r3, #0
 800355c:	d026      	beq.n	80035ac <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	f003 0310 	and.w	r3, r3, #16
 8003564:	2b00      	cmp	r3, #0
 8003566:	d021      	beq.n	80035ac <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f06f 0210 	mvn.w	r2, #16
 8003570:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2208      	movs	r2, #8
 8003576:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	69db      	ldr	r3, [r3, #28]
 800357e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003582:	2b00      	cmp	r3, #0
 8003584:	d005      	beq.n	8003592 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	4798      	blx	r3
 8003590:	e009      	b.n	80035a6 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	f003 0301 	and.w	r3, r3, #1
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d00e      	beq.n	80035d4 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	f003 0301 	and.w	r3, r3, #1
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d009      	beq.n	80035d4 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f06f 0201 	mvn.w	r2, #1
 80035c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d104      	bne.n	80035e8 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d00e      	beq.n	8003606 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d009      	beq.n	8003606 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80035fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800360c:	2b00      	cmp	r3, #0
 800360e:	d00e      	beq.n	800362e <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003616:	2b00      	cmp	r3, #0
 8003618:	d009      	beq.n	800362e <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003622:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003634:	2b00      	cmp	r3, #0
 8003636:	d00e      	beq.n	8003656 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800363e:	2b00      	cmp	r3, #0
 8003640:	d009      	beq.n	8003656 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800364a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	f003 0320 	and.w	r3, r3, #32
 800365c:	2b00      	cmp	r3, #0
 800365e:	d00e      	beq.n	800367e <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f003 0320 	and.w	r3, r3, #32
 8003666:	2b00      	cmp	r3, #0
 8003668:	d009      	beq.n	800367e <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f06f 0220 	mvn.w	r2, #32
 8003672:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d00e      	beq.n	80036a6 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d009      	beq.n	80036a6 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800369a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d00e      	beq.n	80036ce <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d009      	beq.n	80036ce <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80036c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d00e      	beq.n	80036f6 <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d009      	beq.n	80036f6 <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80036ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d00e      	beq.n	800371e <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d009      	beq.n	800371e <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8003712:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800371e:	bf00      	nop
 8003720:	3710      	adds	r7, #16
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}

08003726 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003726:	b480      	push	{r7}
 8003728:	b083      	sub	sp, #12
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800372e:	bf00      	nop
 8003730:	370c      	adds	r7, #12
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr

0800373a <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800373a:	b480      	push	{r7}
 800373c:	b083      	sub	sp, #12
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8003742:	bf00      	nop
 8003744:	370c      	adds	r7, #12
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr

0800374e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800374e:	b480      	push	{r7}
 8003750:	b083      	sub	sp, #12
 8003752:	af00      	add	r7, sp, #0
 8003754:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003756:	bf00      	nop
 8003758:	370c      	adds	r7, #12
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr

08003762 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003762:	b480      	push	{r7}
 8003764:	b083      	sub	sp, #12
 8003766:	af00      	add	r7, sp, #0
 8003768:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800376a:	bf00      	nop
 800376c:	370c      	adds	r7, #12
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr

08003776 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003776:	b480      	push	{r7}
 8003778:	b083      	sub	sp, #12
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800377e:	bf00      	nop
 8003780:	370c      	adds	r7, #12
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr

0800378a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800378a:	b480      	push	{r7}
 800378c:	b083      	sub	sp, #12
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003792:	bf00      	nop
 8003794:	370c      	adds	r7, #12
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr

0800379e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800379e:	b480      	push	{r7}
 80037a0:	b083      	sub	sp, #12
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80037a6:	bf00      	nop
 80037a8:	370c      	adds	r7, #12
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr

080037b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80037b2:	b480      	push	{r7}
 80037b4:	b083      	sub	sp, #12
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80037ba:	bf00      	nop
 80037bc:	370c      	adds	r7, #12
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr

080037c6 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80037c6:	b480      	push	{r7}
 80037c8:	b083      	sub	sp, #12
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 80037ce:	bf00      	nop
 80037d0:	370c      	adds	r7, #12
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr

080037da <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80037da:	b480      	push	{r7}
 80037dc:	b083      	sub	sp, #12
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80037e2:	bf00      	nop
 80037e4:	370c      	adds	r7, #12
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr
	...

080037f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b085      	sub	sp, #20
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	4a4c      	ldr	r2, [pc, #304]	@ (8003934 <TIM_Base_SetConfig+0x144>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d017      	beq.n	8003838 <TIM_Base_SetConfig+0x48>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800380e:	d013      	beq.n	8003838 <TIM_Base_SetConfig+0x48>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	4a49      	ldr	r2, [pc, #292]	@ (8003938 <TIM_Base_SetConfig+0x148>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d00f      	beq.n	8003838 <TIM_Base_SetConfig+0x48>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	4a48      	ldr	r2, [pc, #288]	@ (800393c <TIM_Base_SetConfig+0x14c>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d00b      	beq.n	8003838 <TIM_Base_SetConfig+0x48>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	4a47      	ldr	r2, [pc, #284]	@ (8003940 <TIM_Base_SetConfig+0x150>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d007      	beq.n	8003838 <TIM_Base_SetConfig+0x48>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	4a46      	ldr	r2, [pc, #280]	@ (8003944 <TIM_Base_SetConfig+0x154>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d003      	beq.n	8003838 <TIM_Base_SetConfig+0x48>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	4a45      	ldr	r2, [pc, #276]	@ (8003948 <TIM_Base_SetConfig+0x158>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d108      	bne.n	800384a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800383e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	68fa      	ldr	r2, [r7, #12]
 8003846:	4313      	orrs	r3, r2
 8003848:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a39      	ldr	r2, [pc, #228]	@ (8003934 <TIM_Base_SetConfig+0x144>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d023      	beq.n	800389a <TIM_Base_SetConfig+0xaa>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003858:	d01f      	beq.n	800389a <TIM_Base_SetConfig+0xaa>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a36      	ldr	r2, [pc, #216]	@ (8003938 <TIM_Base_SetConfig+0x148>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d01b      	beq.n	800389a <TIM_Base_SetConfig+0xaa>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a35      	ldr	r2, [pc, #212]	@ (800393c <TIM_Base_SetConfig+0x14c>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d017      	beq.n	800389a <TIM_Base_SetConfig+0xaa>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a34      	ldr	r2, [pc, #208]	@ (8003940 <TIM_Base_SetConfig+0x150>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d013      	beq.n	800389a <TIM_Base_SetConfig+0xaa>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4a33      	ldr	r2, [pc, #204]	@ (8003944 <TIM_Base_SetConfig+0x154>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d00f      	beq.n	800389a <TIM_Base_SetConfig+0xaa>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a33      	ldr	r2, [pc, #204]	@ (800394c <TIM_Base_SetConfig+0x15c>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d00b      	beq.n	800389a <TIM_Base_SetConfig+0xaa>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a32      	ldr	r2, [pc, #200]	@ (8003950 <TIM_Base_SetConfig+0x160>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d007      	beq.n	800389a <TIM_Base_SetConfig+0xaa>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a31      	ldr	r2, [pc, #196]	@ (8003954 <TIM_Base_SetConfig+0x164>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d003      	beq.n	800389a <TIM_Base_SetConfig+0xaa>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a2c      	ldr	r2, [pc, #176]	@ (8003948 <TIM_Base_SetConfig+0x158>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d108      	bne.n	80038ac <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	68fa      	ldr	r2, [r7, #12]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	695b      	ldr	r3, [r3, #20]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	68fa      	ldr	r2, [r7, #12]
 80038be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	689a      	ldr	r2, [r3, #8]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	4a18      	ldr	r2, [pc, #96]	@ (8003934 <TIM_Base_SetConfig+0x144>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d013      	beq.n	8003900 <TIM_Base_SetConfig+0x110>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	4a1a      	ldr	r2, [pc, #104]	@ (8003944 <TIM_Base_SetConfig+0x154>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d00f      	beq.n	8003900 <TIM_Base_SetConfig+0x110>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	4a1a      	ldr	r2, [pc, #104]	@ (800394c <TIM_Base_SetConfig+0x15c>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d00b      	beq.n	8003900 <TIM_Base_SetConfig+0x110>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	4a19      	ldr	r2, [pc, #100]	@ (8003950 <TIM_Base_SetConfig+0x160>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d007      	beq.n	8003900 <TIM_Base_SetConfig+0x110>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	4a18      	ldr	r2, [pc, #96]	@ (8003954 <TIM_Base_SetConfig+0x164>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d003      	beq.n	8003900 <TIM_Base_SetConfig+0x110>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	4a13      	ldr	r2, [pc, #76]	@ (8003948 <TIM_Base_SetConfig+0x158>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d103      	bne.n	8003908 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	691a      	ldr	r2, [r3, #16]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2201      	movs	r2, #1
 800390c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	f003 0301 	and.w	r3, r3, #1
 8003916:	2b01      	cmp	r3, #1
 8003918:	d105      	bne.n	8003926 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	f023 0201 	bic.w	r2, r3, #1
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	611a      	str	r2, [r3, #16]
  }
}
 8003926:	bf00      	nop
 8003928:	3714      	adds	r7, #20
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	40012c00 	.word	0x40012c00
 8003938:	40000400 	.word	0x40000400
 800393c:	40000800 	.word	0x40000800
 8003940:	40000c00 	.word	0x40000c00
 8003944:	40013400 	.word	0x40013400
 8003948:	40015000 	.word	0x40015000
 800394c:	40014000 	.word	0x40014000
 8003950:	40014400 	.word	0x40014400
 8003954:	40014800 	.word	0x40014800

08003958 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4a26      	ldr	r2, [pc, #152]	@ (80039fc <TIM_ResetCallback+0xa4>)
 8003964:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4a25      	ldr	r2, [pc, #148]	@ (8003a00 <TIM_ResetCallback+0xa8>)
 800396c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4a24      	ldr	r2, [pc, #144]	@ (8003a04 <TIM_ResetCallback+0xac>)
 8003974:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4a23      	ldr	r2, [pc, #140]	@ (8003a08 <TIM_ResetCallback+0xb0>)
 800397c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	4a22      	ldr	r2, [pc, #136]	@ (8003a0c <TIM_ResetCallback+0xb4>)
 8003984:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4a21      	ldr	r2, [pc, #132]	@ (8003a10 <TIM_ResetCallback+0xb8>)
 800398c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	4a20      	ldr	r2, [pc, #128]	@ (8003a14 <TIM_ResetCallback+0xbc>)
 8003994:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4a1f      	ldr	r2, [pc, #124]	@ (8003a18 <TIM_ResetCallback+0xc0>)
 800399c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4a1e      	ldr	r2, [pc, #120]	@ (8003a1c <TIM_ResetCallback+0xc4>)
 80039a4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	4a1d      	ldr	r2, [pc, #116]	@ (8003a20 <TIM_ResetCallback+0xc8>)
 80039ac:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	4a1c      	ldr	r2, [pc, #112]	@ (8003a24 <TIM_ResetCallback+0xcc>)
 80039b4:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	4a1b      	ldr	r2, [pc, #108]	@ (8003a28 <TIM_ResetCallback+0xd0>)
 80039bc:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	4a1a      	ldr	r2, [pc, #104]	@ (8003a2c <TIM_ResetCallback+0xd4>)
 80039c4:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	4a19      	ldr	r2, [pc, #100]	@ (8003a30 <TIM_ResetCallback+0xd8>)
 80039cc:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	4a18      	ldr	r2, [pc, #96]	@ (8003a34 <TIM_ResetCallback+0xdc>)
 80039d4:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	4a17      	ldr	r2, [pc, #92]	@ (8003a38 <TIM_ResetCallback+0xe0>)
 80039dc:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	4a16      	ldr	r2, [pc, #88]	@ (8003a3c <TIM_ResetCallback+0xe4>)
 80039e4:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	4a15      	ldr	r2, [pc, #84]	@ (8003a40 <TIM_ResetCallback+0xe8>)
 80039ec:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 80039f0:	bf00      	nop
 80039f2:	370c      	adds	r7, #12
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr
 80039fc:	08003727 	.word	0x08003727
 8003a00:	0800373b 	.word	0x0800373b
 8003a04:	080037b3 	.word	0x080037b3
 8003a08:	080037c7 	.word	0x080037c7
 8003a0c:	08003763 	.word	0x08003763
 8003a10:	08003777 	.word	0x08003777
 8003a14:	0800374f 	.word	0x0800374f
 8003a18:	0800378b 	.word	0x0800378b
 8003a1c:	0800379f 	.word	0x0800379f
 8003a20:	080037db 	.word	0x080037db
 8003a24:	08003a45 	.word	0x08003a45
 8003a28:	08003a59 	.word	0x08003a59
 8003a2c:	08003a6d 	.word	0x08003a6d
 8003a30:	08003a81 	.word	0x08003a81
 8003a34:	08003a95 	.word	0x08003a95
 8003a38:	08003aa9 	.word	0x08003aa9
 8003a3c:	08003abd 	.word	0x08003abd
 8003a40:	08003ad1 	.word	0x08003ad1

08003a44 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a4c:	bf00      	nop
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8003a60:	bf00      	nop
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr

08003a6c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a74:	bf00      	nop
 8003a76:	370c      	adds	r7, #12
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003a88:	bf00      	nop
 8003a8a:	370c      	adds	r7, #12
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr

08003a94 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8003a9c:	bf00      	nop
 8003a9e:	370c      	adds	r7, #12
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr

08003aa8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8003ab0:	bf00      	nop
 8003ab2:	370c      	adds	r7, #12
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr

08003abc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8003ac4:	bf00      	nop
 8003ac6:	370c      	adds	r7, #12
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr

08003ad0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8003ad8:	bf00      	nop
 8003ada:	370c      	adds	r7, #12
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr

08003ae4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b082      	sub	sp, #8
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d101      	bne.n	8003af6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e050      	b.n	8003b98 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d114      	bne.n	8003b2a <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f000 f8a7 	bl	8003c5c <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d103      	bne.n	8003b20 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	4a21      	ldr	r2, [pc, #132]	@ (8003ba0 <HAL_UART_Init+0xbc>)
 8003b1c:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2224      	movs	r2, #36	@ 0x24
 8003b2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f022 0201 	bic.w	r2, r2, #1
 8003b40:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d002      	beq.n	8003b50 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f000 fbd4 	bl	80042f8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f000 f8d5 	bl	8003d00 <UART_SetConfig>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d101      	bne.n	8003b60 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e01b      	b.n	8003b98 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	685a      	ldr	r2, [r3, #4]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003b6e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	689a      	ldr	r2, [r3, #8]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003b7e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f042 0201 	orr.w	r2, r2, #1
 8003b8e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f000 fc53 	bl	800443c <UART_CheckIdleState>
 8003b96:	4603      	mov	r3, r0
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3708      	adds	r7, #8
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	08000e71 	.word	0x08000e71

08003ba4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003bac:	bf00      	nop
 8003bae:	370c      	adds	r7, #12
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr

08003bb8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8003bc0:	bf00      	nop
 8003bc2:	370c      	adds	r7, #12
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr

08003bcc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003bd4:	bf00      	nop
 8003bd6:	370c      	adds	r7, #12
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr

08003be0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003be8:	bf00      	nop
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003bfc:	bf00      	nop
 8003bfe:	370c      	adds	r7, #12
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr

08003c08 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8003c10:	bf00      	nop
 8003c12:	370c      	adds	r7, #12
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr

08003c1c <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8003c24:	bf00      	nop
 8003c26:	370c      	adds	r7, #12
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8003c38:	bf00      	nop
 8003c3a:	370c      	adds	r7, #12
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr

08003c44 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	460b      	mov	r3, r1
 8003c4e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c50:	bf00      	nop
 8003c52:	370c      	adds	r7, #12
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr

08003c5c <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	4a1a      	ldr	r2, [pc, #104]	@ (8003cd0 <UART_InitCallbacksToDefault+0x74>)
 8003c68:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	4a19      	ldr	r2, [pc, #100]	@ (8003cd4 <UART_InitCallbacksToDefault+0x78>)
 8003c70:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	4a18      	ldr	r2, [pc, #96]	@ (8003cd8 <UART_InitCallbacksToDefault+0x7c>)
 8003c78:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	4a17      	ldr	r2, [pc, #92]	@ (8003cdc <UART_InitCallbacksToDefault+0x80>)
 8003c80:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	4a16      	ldr	r2, [pc, #88]	@ (8003ce0 <UART_InitCallbacksToDefault+0x84>)
 8003c88:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	4a15      	ldr	r2, [pc, #84]	@ (8003ce4 <UART_InitCallbacksToDefault+0x88>)
 8003c90:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	4a14      	ldr	r2, [pc, #80]	@ (8003ce8 <UART_InitCallbacksToDefault+0x8c>)
 8003c98:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	4a13      	ldr	r2, [pc, #76]	@ (8003cec <UART_InitCallbacksToDefault+0x90>)
 8003ca0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	4a12      	ldr	r2, [pc, #72]	@ (8003cf0 <UART_InitCallbacksToDefault+0x94>)
 8003ca8:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	4a11      	ldr	r2, [pc, #68]	@ (8003cf4 <UART_InitCallbacksToDefault+0x98>)
 8003cb0:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	4a10      	ldr	r2, [pc, #64]	@ (8003cf8 <UART_InitCallbacksToDefault+0x9c>)
 8003cb8:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	4a0f      	ldr	r2, [pc, #60]	@ (8003cfc <UART_InitCallbacksToDefault+0xa0>)
 8003cc0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 8003cc4:	bf00      	nop
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr
 8003cd0:	08003bb9 	.word	0x08003bb9
 8003cd4:	08003ba5 	.word	0x08003ba5
 8003cd8:	08003be1 	.word	0x08003be1
 8003cdc:	08003bcd 	.word	0x08003bcd
 8003ce0:	08003bf5 	.word	0x08003bf5
 8003ce4:	08003c09 	.word	0x08003c09
 8003ce8:	08003c1d 	.word	0x08003c1d
 8003cec:	08003c31 	.word	0x08003c31
 8003cf0:	08004737 	.word	0x08004737
 8003cf4:	0800474b 	.word	0x0800474b
 8003cf8:	0800475f 	.word	0x0800475f
 8003cfc:	08003c45 	.word	0x08003c45

08003d00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d04:	b08c      	sub	sp, #48	@ 0x30
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	689a      	ldr	r2, [r3, #8]
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	691b      	ldr	r3, [r3, #16]
 8003d18:	431a      	orrs	r2, r3
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	695b      	ldr	r3, [r3, #20]
 8003d1e:	431a      	orrs	r2, r3
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	69db      	ldr	r3, [r3, #28]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	4baa      	ldr	r3, [pc, #680]	@ (8003fd8 <UART_SetConfig+0x2d8>)
 8003d30:	4013      	ands	r3, r2
 8003d32:	697a      	ldr	r2, [r7, #20]
 8003d34:	6812      	ldr	r2, [r2, #0]
 8003d36:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003d38:	430b      	orrs	r3, r1
 8003d3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	68da      	ldr	r2, [r3, #12]
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	430a      	orrs	r2, r1
 8003d50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	699b      	ldr	r3, [r3, #24]
 8003d56:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a9f      	ldr	r2, [pc, #636]	@ (8003fdc <UART_SetConfig+0x2dc>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d004      	beq.n	8003d6c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	6a1b      	ldr	r3, [r3, #32]
 8003d66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8003d76:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003d7a:	697a      	ldr	r2, [r7, #20]
 8003d7c:	6812      	ldr	r2, [r2, #0]
 8003d7e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003d80:	430b      	orrs	r3, r1
 8003d82:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d8a:	f023 010f 	bic.w	r1, r3, #15
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	430a      	orrs	r2, r1
 8003d98:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a90      	ldr	r2, [pc, #576]	@ (8003fe0 <UART_SetConfig+0x2e0>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d125      	bne.n	8003df0 <UART_SetConfig+0xf0>
 8003da4:	4b8f      	ldr	r3, [pc, #572]	@ (8003fe4 <UART_SetConfig+0x2e4>)
 8003da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003daa:	f003 0303 	and.w	r3, r3, #3
 8003dae:	2b03      	cmp	r3, #3
 8003db0:	d81a      	bhi.n	8003de8 <UART_SetConfig+0xe8>
 8003db2:	a201      	add	r2, pc, #4	@ (adr r2, 8003db8 <UART_SetConfig+0xb8>)
 8003db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003db8:	08003dc9 	.word	0x08003dc9
 8003dbc:	08003dd9 	.word	0x08003dd9
 8003dc0:	08003dd1 	.word	0x08003dd1
 8003dc4:	08003de1 	.word	0x08003de1
 8003dc8:	2301      	movs	r3, #1
 8003dca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003dce:	e116      	b.n	8003ffe <UART_SetConfig+0x2fe>
 8003dd0:	2302      	movs	r3, #2
 8003dd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003dd6:	e112      	b.n	8003ffe <UART_SetConfig+0x2fe>
 8003dd8:	2304      	movs	r3, #4
 8003dda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003dde:	e10e      	b.n	8003ffe <UART_SetConfig+0x2fe>
 8003de0:	2308      	movs	r3, #8
 8003de2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003de6:	e10a      	b.n	8003ffe <UART_SetConfig+0x2fe>
 8003de8:	2310      	movs	r3, #16
 8003dea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003dee:	e106      	b.n	8003ffe <UART_SetConfig+0x2fe>
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a7c      	ldr	r2, [pc, #496]	@ (8003fe8 <UART_SetConfig+0x2e8>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d138      	bne.n	8003e6c <UART_SetConfig+0x16c>
 8003dfa:	4b7a      	ldr	r3, [pc, #488]	@ (8003fe4 <UART_SetConfig+0x2e4>)
 8003dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e00:	f003 030c 	and.w	r3, r3, #12
 8003e04:	2b0c      	cmp	r3, #12
 8003e06:	d82d      	bhi.n	8003e64 <UART_SetConfig+0x164>
 8003e08:	a201      	add	r2, pc, #4	@ (adr r2, 8003e10 <UART_SetConfig+0x110>)
 8003e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e0e:	bf00      	nop
 8003e10:	08003e45 	.word	0x08003e45
 8003e14:	08003e65 	.word	0x08003e65
 8003e18:	08003e65 	.word	0x08003e65
 8003e1c:	08003e65 	.word	0x08003e65
 8003e20:	08003e55 	.word	0x08003e55
 8003e24:	08003e65 	.word	0x08003e65
 8003e28:	08003e65 	.word	0x08003e65
 8003e2c:	08003e65 	.word	0x08003e65
 8003e30:	08003e4d 	.word	0x08003e4d
 8003e34:	08003e65 	.word	0x08003e65
 8003e38:	08003e65 	.word	0x08003e65
 8003e3c:	08003e65 	.word	0x08003e65
 8003e40:	08003e5d 	.word	0x08003e5d
 8003e44:	2300      	movs	r3, #0
 8003e46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e4a:	e0d8      	b.n	8003ffe <UART_SetConfig+0x2fe>
 8003e4c:	2302      	movs	r3, #2
 8003e4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e52:	e0d4      	b.n	8003ffe <UART_SetConfig+0x2fe>
 8003e54:	2304      	movs	r3, #4
 8003e56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e5a:	e0d0      	b.n	8003ffe <UART_SetConfig+0x2fe>
 8003e5c:	2308      	movs	r3, #8
 8003e5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e62:	e0cc      	b.n	8003ffe <UART_SetConfig+0x2fe>
 8003e64:	2310      	movs	r3, #16
 8003e66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e6a:	e0c8      	b.n	8003ffe <UART_SetConfig+0x2fe>
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a5e      	ldr	r2, [pc, #376]	@ (8003fec <UART_SetConfig+0x2ec>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d125      	bne.n	8003ec2 <UART_SetConfig+0x1c2>
 8003e76:	4b5b      	ldr	r3, [pc, #364]	@ (8003fe4 <UART_SetConfig+0x2e4>)
 8003e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e7c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003e80:	2b30      	cmp	r3, #48	@ 0x30
 8003e82:	d016      	beq.n	8003eb2 <UART_SetConfig+0x1b2>
 8003e84:	2b30      	cmp	r3, #48	@ 0x30
 8003e86:	d818      	bhi.n	8003eba <UART_SetConfig+0x1ba>
 8003e88:	2b20      	cmp	r3, #32
 8003e8a:	d00a      	beq.n	8003ea2 <UART_SetConfig+0x1a2>
 8003e8c:	2b20      	cmp	r3, #32
 8003e8e:	d814      	bhi.n	8003eba <UART_SetConfig+0x1ba>
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d002      	beq.n	8003e9a <UART_SetConfig+0x19a>
 8003e94:	2b10      	cmp	r3, #16
 8003e96:	d008      	beq.n	8003eaa <UART_SetConfig+0x1aa>
 8003e98:	e00f      	b.n	8003eba <UART_SetConfig+0x1ba>
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ea0:	e0ad      	b.n	8003ffe <UART_SetConfig+0x2fe>
 8003ea2:	2302      	movs	r3, #2
 8003ea4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ea8:	e0a9      	b.n	8003ffe <UART_SetConfig+0x2fe>
 8003eaa:	2304      	movs	r3, #4
 8003eac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003eb0:	e0a5      	b.n	8003ffe <UART_SetConfig+0x2fe>
 8003eb2:	2308      	movs	r3, #8
 8003eb4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003eb8:	e0a1      	b.n	8003ffe <UART_SetConfig+0x2fe>
 8003eba:	2310      	movs	r3, #16
 8003ebc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ec0:	e09d      	b.n	8003ffe <UART_SetConfig+0x2fe>
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a4a      	ldr	r2, [pc, #296]	@ (8003ff0 <UART_SetConfig+0x2f0>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d125      	bne.n	8003f18 <UART_SetConfig+0x218>
 8003ecc:	4b45      	ldr	r3, [pc, #276]	@ (8003fe4 <UART_SetConfig+0x2e4>)
 8003ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ed2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003ed6:	2bc0      	cmp	r3, #192	@ 0xc0
 8003ed8:	d016      	beq.n	8003f08 <UART_SetConfig+0x208>
 8003eda:	2bc0      	cmp	r3, #192	@ 0xc0
 8003edc:	d818      	bhi.n	8003f10 <UART_SetConfig+0x210>
 8003ede:	2b80      	cmp	r3, #128	@ 0x80
 8003ee0:	d00a      	beq.n	8003ef8 <UART_SetConfig+0x1f8>
 8003ee2:	2b80      	cmp	r3, #128	@ 0x80
 8003ee4:	d814      	bhi.n	8003f10 <UART_SetConfig+0x210>
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d002      	beq.n	8003ef0 <UART_SetConfig+0x1f0>
 8003eea:	2b40      	cmp	r3, #64	@ 0x40
 8003eec:	d008      	beq.n	8003f00 <UART_SetConfig+0x200>
 8003eee:	e00f      	b.n	8003f10 <UART_SetConfig+0x210>
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ef6:	e082      	b.n	8003ffe <UART_SetConfig+0x2fe>
 8003ef8:	2302      	movs	r3, #2
 8003efa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003efe:	e07e      	b.n	8003ffe <UART_SetConfig+0x2fe>
 8003f00:	2304      	movs	r3, #4
 8003f02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f06:	e07a      	b.n	8003ffe <UART_SetConfig+0x2fe>
 8003f08:	2308      	movs	r3, #8
 8003f0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f0e:	e076      	b.n	8003ffe <UART_SetConfig+0x2fe>
 8003f10:	2310      	movs	r3, #16
 8003f12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f16:	e072      	b.n	8003ffe <UART_SetConfig+0x2fe>
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a35      	ldr	r2, [pc, #212]	@ (8003ff4 <UART_SetConfig+0x2f4>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d12a      	bne.n	8003f78 <UART_SetConfig+0x278>
 8003f22:	4b30      	ldr	r3, [pc, #192]	@ (8003fe4 <UART_SetConfig+0x2e4>)
 8003f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f28:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f2c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f30:	d01a      	beq.n	8003f68 <UART_SetConfig+0x268>
 8003f32:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f36:	d81b      	bhi.n	8003f70 <UART_SetConfig+0x270>
 8003f38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f3c:	d00c      	beq.n	8003f58 <UART_SetConfig+0x258>
 8003f3e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f42:	d815      	bhi.n	8003f70 <UART_SetConfig+0x270>
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d003      	beq.n	8003f50 <UART_SetConfig+0x250>
 8003f48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f4c:	d008      	beq.n	8003f60 <UART_SetConfig+0x260>
 8003f4e:	e00f      	b.n	8003f70 <UART_SetConfig+0x270>
 8003f50:	2300      	movs	r3, #0
 8003f52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f56:	e052      	b.n	8003ffe <UART_SetConfig+0x2fe>
 8003f58:	2302      	movs	r3, #2
 8003f5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f5e:	e04e      	b.n	8003ffe <UART_SetConfig+0x2fe>
 8003f60:	2304      	movs	r3, #4
 8003f62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f66:	e04a      	b.n	8003ffe <UART_SetConfig+0x2fe>
 8003f68:	2308      	movs	r3, #8
 8003f6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f6e:	e046      	b.n	8003ffe <UART_SetConfig+0x2fe>
 8003f70:	2310      	movs	r3, #16
 8003f72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f76:	e042      	b.n	8003ffe <UART_SetConfig+0x2fe>
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a17      	ldr	r2, [pc, #92]	@ (8003fdc <UART_SetConfig+0x2dc>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d13a      	bne.n	8003ff8 <UART_SetConfig+0x2f8>
 8003f82:	4b18      	ldr	r3, [pc, #96]	@ (8003fe4 <UART_SetConfig+0x2e4>)
 8003f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f88:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003f8c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003f90:	d01a      	beq.n	8003fc8 <UART_SetConfig+0x2c8>
 8003f92:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003f96:	d81b      	bhi.n	8003fd0 <UART_SetConfig+0x2d0>
 8003f98:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f9c:	d00c      	beq.n	8003fb8 <UART_SetConfig+0x2b8>
 8003f9e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003fa2:	d815      	bhi.n	8003fd0 <UART_SetConfig+0x2d0>
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d003      	beq.n	8003fb0 <UART_SetConfig+0x2b0>
 8003fa8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fac:	d008      	beq.n	8003fc0 <UART_SetConfig+0x2c0>
 8003fae:	e00f      	b.n	8003fd0 <UART_SetConfig+0x2d0>
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003fb6:	e022      	b.n	8003ffe <UART_SetConfig+0x2fe>
 8003fb8:	2302      	movs	r3, #2
 8003fba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003fbe:	e01e      	b.n	8003ffe <UART_SetConfig+0x2fe>
 8003fc0:	2304      	movs	r3, #4
 8003fc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003fc6:	e01a      	b.n	8003ffe <UART_SetConfig+0x2fe>
 8003fc8:	2308      	movs	r3, #8
 8003fca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003fce:	e016      	b.n	8003ffe <UART_SetConfig+0x2fe>
 8003fd0:	2310      	movs	r3, #16
 8003fd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003fd6:	e012      	b.n	8003ffe <UART_SetConfig+0x2fe>
 8003fd8:	cfff69f3 	.word	0xcfff69f3
 8003fdc:	40008000 	.word	0x40008000
 8003fe0:	40013800 	.word	0x40013800
 8003fe4:	40021000 	.word	0x40021000
 8003fe8:	40004400 	.word	0x40004400
 8003fec:	40004800 	.word	0x40004800
 8003ff0:	40004c00 	.word	0x40004c00
 8003ff4:	40005000 	.word	0x40005000
 8003ff8:	2310      	movs	r3, #16
 8003ffa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4aae      	ldr	r2, [pc, #696]	@ (80042bc <UART_SetConfig+0x5bc>)
 8004004:	4293      	cmp	r3, r2
 8004006:	f040 8097 	bne.w	8004138 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800400a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800400e:	2b08      	cmp	r3, #8
 8004010:	d823      	bhi.n	800405a <UART_SetConfig+0x35a>
 8004012:	a201      	add	r2, pc, #4	@ (adr r2, 8004018 <UART_SetConfig+0x318>)
 8004014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004018:	0800403d 	.word	0x0800403d
 800401c:	0800405b 	.word	0x0800405b
 8004020:	08004045 	.word	0x08004045
 8004024:	0800405b 	.word	0x0800405b
 8004028:	0800404b 	.word	0x0800404b
 800402c:	0800405b 	.word	0x0800405b
 8004030:	0800405b 	.word	0x0800405b
 8004034:	0800405b 	.word	0x0800405b
 8004038:	08004053 	.word	0x08004053
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800403c:	f7fe f946 	bl	80022cc <HAL_RCC_GetPCLK1Freq>
 8004040:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004042:	e010      	b.n	8004066 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004044:	4b9e      	ldr	r3, [pc, #632]	@ (80042c0 <UART_SetConfig+0x5c0>)
 8004046:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004048:	e00d      	b.n	8004066 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800404a:	f7fe f8d1 	bl	80021f0 <HAL_RCC_GetSysClockFreq>
 800404e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004050:	e009      	b.n	8004066 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004052:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004056:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004058:	e005      	b.n	8004066 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800405a:	2300      	movs	r3, #0
 800405c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004064:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004068:	2b00      	cmp	r3, #0
 800406a:	f000 8130 	beq.w	80042ce <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004072:	4a94      	ldr	r2, [pc, #592]	@ (80042c4 <UART_SetConfig+0x5c4>)
 8004074:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004078:	461a      	mov	r2, r3
 800407a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800407c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004080:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	685a      	ldr	r2, [r3, #4]
 8004086:	4613      	mov	r3, r2
 8004088:	005b      	lsls	r3, r3, #1
 800408a:	4413      	add	r3, r2
 800408c:	69ba      	ldr	r2, [r7, #24]
 800408e:	429a      	cmp	r2, r3
 8004090:	d305      	bcc.n	800409e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004098:	69ba      	ldr	r2, [r7, #24]
 800409a:	429a      	cmp	r2, r3
 800409c:	d903      	bls.n	80040a6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80040a4:	e113      	b.n	80042ce <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80040a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040a8:	2200      	movs	r2, #0
 80040aa:	60bb      	str	r3, [r7, #8]
 80040ac:	60fa      	str	r2, [r7, #12]
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b2:	4a84      	ldr	r2, [pc, #528]	@ (80042c4 <UART_SetConfig+0x5c4>)
 80040b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	2200      	movs	r2, #0
 80040bc:	603b      	str	r3, [r7, #0]
 80040be:	607a      	str	r2, [r7, #4]
 80040c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80040c4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80040c8:	f7fc f8a6 	bl	8000218 <__aeabi_uldivmod>
 80040cc:	4602      	mov	r2, r0
 80040ce:	460b      	mov	r3, r1
 80040d0:	4610      	mov	r0, r2
 80040d2:	4619      	mov	r1, r3
 80040d4:	f04f 0200 	mov.w	r2, #0
 80040d8:	f04f 0300 	mov.w	r3, #0
 80040dc:	020b      	lsls	r3, r1, #8
 80040de:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80040e2:	0202      	lsls	r2, r0, #8
 80040e4:	6979      	ldr	r1, [r7, #20]
 80040e6:	6849      	ldr	r1, [r1, #4]
 80040e8:	0849      	lsrs	r1, r1, #1
 80040ea:	2000      	movs	r0, #0
 80040ec:	460c      	mov	r4, r1
 80040ee:	4605      	mov	r5, r0
 80040f0:	eb12 0804 	adds.w	r8, r2, r4
 80040f4:	eb43 0905 	adc.w	r9, r3, r5
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	469a      	mov	sl, r3
 8004100:	4693      	mov	fp, r2
 8004102:	4652      	mov	r2, sl
 8004104:	465b      	mov	r3, fp
 8004106:	4640      	mov	r0, r8
 8004108:	4649      	mov	r1, r9
 800410a:	f7fc f885 	bl	8000218 <__aeabi_uldivmod>
 800410e:	4602      	mov	r2, r0
 8004110:	460b      	mov	r3, r1
 8004112:	4613      	mov	r3, r2
 8004114:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004116:	6a3b      	ldr	r3, [r7, #32]
 8004118:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800411c:	d308      	bcc.n	8004130 <UART_SetConfig+0x430>
 800411e:	6a3b      	ldr	r3, [r7, #32]
 8004120:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004124:	d204      	bcs.n	8004130 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	6a3a      	ldr	r2, [r7, #32]
 800412c:	60da      	str	r2, [r3, #12]
 800412e:	e0ce      	b.n	80042ce <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004136:	e0ca      	b.n	80042ce <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	69db      	ldr	r3, [r3, #28]
 800413c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004140:	d166      	bne.n	8004210 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004142:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004146:	2b08      	cmp	r3, #8
 8004148:	d827      	bhi.n	800419a <UART_SetConfig+0x49a>
 800414a:	a201      	add	r2, pc, #4	@ (adr r2, 8004150 <UART_SetConfig+0x450>)
 800414c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004150:	08004175 	.word	0x08004175
 8004154:	0800417d 	.word	0x0800417d
 8004158:	08004185 	.word	0x08004185
 800415c:	0800419b 	.word	0x0800419b
 8004160:	0800418b 	.word	0x0800418b
 8004164:	0800419b 	.word	0x0800419b
 8004168:	0800419b 	.word	0x0800419b
 800416c:	0800419b 	.word	0x0800419b
 8004170:	08004193 	.word	0x08004193
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004174:	f7fe f8aa 	bl	80022cc <HAL_RCC_GetPCLK1Freq>
 8004178:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800417a:	e014      	b.n	80041a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800417c:	f7fe f8bc 	bl	80022f8 <HAL_RCC_GetPCLK2Freq>
 8004180:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004182:	e010      	b.n	80041a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004184:	4b4e      	ldr	r3, [pc, #312]	@ (80042c0 <UART_SetConfig+0x5c0>)
 8004186:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004188:	e00d      	b.n	80041a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800418a:	f7fe f831 	bl	80021f0 <HAL_RCC_GetSysClockFreq>
 800418e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004190:	e009      	b.n	80041a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004192:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004196:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004198:	e005      	b.n	80041a6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800419a:	2300      	movs	r3, #0
 800419c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80041a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80041a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	f000 8090 	beq.w	80042ce <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041b2:	4a44      	ldr	r2, [pc, #272]	@ (80042c4 <UART_SetConfig+0x5c4>)
 80041b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80041b8:	461a      	mov	r2, r3
 80041ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80041c0:	005a      	lsls	r2, r3, #1
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	085b      	lsrs	r3, r3, #1
 80041c8:	441a      	add	r2, r3
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80041d2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041d4:	6a3b      	ldr	r3, [r7, #32]
 80041d6:	2b0f      	cmp	r3, #15
 80041d8:	d916      	bls.n	8004208 <UART_SetConfig+0x508>
 80041da:	6a3b      	ldr	r3, [r7, #32]
 80041dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041e0:	d212      	bcs.n	8004208 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80041e2:	6a3b      	ldr	r3, [r7, #32]
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	f023 030f 	bic.w	r3, r3, #15
 80041ea:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80041ec:	6a3b      	ldr	r3, [r7, #32]
 80041ee:	085b      	lsrs	r3, r3, #1
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	f003 0307 	and.w	r3, r3, #7
 80041f6:	b29a      	uxth	r2, r3
 80041f8:	8bfb      	ldrh	r3, [r7, #30]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	8bfa      	ldrh	r2, [r7, #30]
 8004204:	60da      	str	r2, [r3, #12]
 8004206:	e062      	b.n	80042ce <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800420e:	e05e      	b.n	80042ce <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004210:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004214:	2b08      	cmp	r3, #8
 8004216:	d828      	bhi.n	800426a <UART_SetConfig+0x56a>
 8004218:	a201      	add	r2, pc, #4	@ (adr r2, 8004220 <UART_SetConfig+0x520>)
 800421a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800421e:	bf00      	nop
 8004220:	08004245 	.word	0x08004245
 8004224:	0800424d 	.word	0x0800424d
 8004228:	08004255 	.word	0x08004255
 800422c:	0800426b 	.word	0x0800426b
 8004230:	0800425b 	.word	0x0800425b
 8004234:	0800426b 	.word	0x0800426b
 8004238:	0800426b 	.word	0x0800426b
 800423c:	0800426b 	.word	0x0800426b
 8004240:	08004263 	.word	0x08004263
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004244:	f7fe f842 	bl	80022cc <HAL_RCC_GetPCLK1Freq>
 8004248:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800424a:	e014      	b.n	8004276 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800424c:	f7fe f854 	bl	80022f8 <HAL_RCC_GetPCLK2Freq>
 8004250:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004252:	e010      	b.n	8004276 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004254:	4b1a      	ldr	r3, [pc, #104]	@ (80042c0 <UART_SetConfig+0x5c0>)
 8004256:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004258:	e00d      	b.n	8004276 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800425a:	f7fd ffc9 	bl	80021f0 <HAL_RCC_GetSysClockFreq>
 800425e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004260:	e009      	b.n	8004276 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004262:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004266:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004268:	e005      	b.n	8004276 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800426a:	2300      	movs	r3, #0
 800426c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004274:	bf00      	nop
    }

    if (pclk != 0U)
 8004276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004278:	2b00      	cmp	r3, #0
 800427a:	d028      	beq.n	80042ce <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004280:	4a10      	ldr	r2, [pc, #64]	@ (80042c4 <UART_SetConfig+0x5c4>)
 8004282:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004286:	461a      	mov	r2, r3
 8004288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800428a:	fbb3 f2f2 	udiv	r2, r3, r2
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	085b      	lsrs	r3, r3, #1
 8004294:	441a      	add	r2, r3
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	fbb2 f3f3 	udiv	r3, r2, r3
 800429e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042a0:	6a3b      	ldr	r3, [r7, #32]
 80042a2:	2b0f      	cmp	r3, #15
 80042a4:	d910      	bls.n	80042c8 <UART_SetConfig+0x5c8>
 80042a6:	6a3b      	ldr	r3, [r7, #32]
 80042a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042ac:	d20c      	bcs.n	80042c8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80042ae:	6a3b      	ldr	r3, [r7, #32]
 80042b0:	b29a      	uxth	r2, r3
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	60da      	str	r2, [r3, #12]
 80042b8:	e009      	b.n	80042ce <UART_SetConfig+0x5ce>
 80042ba:	bf00      	nop
 80042bc:	40008000 	.word	0x40008000
 80042c0:	00f42400 	.word	0x00f42400
 80042c4:	08004a00 	.word	0x08004a00
      }
      else
      {
        ret = HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	2201      	movs	r2, #1
 80042d2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	2201      	movs	r2, #1
 80042da:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	2200      	movs	r2, #0
 80042e2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	2200      	movs	r2, #0
 80042e8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80042ea:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3730      	adds	r7, #48	@ 0x30
 80042f2:	46bd      	mov	sp, r7
 80042f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080042f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004304:	f003 0308 	and.w	r3, r3, #8
 8004308:	2b00      	cmp	r3, #0
 800430a:	d00a      	beq.n	8004322 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	430a      	orrs	r2, r1
 8004320:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004326:	f003 0301 	and.w	r3, r3, #1
 800432a:	2b00      	cmp	r3, #0
 800432c:	d00a      	beq.n	8004344 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	430a      	orrs	r2, r1
 8004342:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004348:	f003 0302 	and.w	r3, r3, #2
 800434c:	2b00      	cmp	r3, #0
 800434e:	d00a      	beq.n	8004366 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	430a      	orrs	r2, r1
 8004364:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800436a:	f003 0304 	and.w	r3, r3, #4
 800436e:	2b00      	cmp	r3, #0
 8004370:	d00a      	beq.n	8004388 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	430a      	orrs	r2, r1
 8004386:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800438c:	f003 0310 	and.w	r3, r3, #16
 8004390:	2b00      	cmp	r3, #0
 8004392:	d00a      	beq.n	80043aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	430a      	orrs	r2, r1
 80043a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043ae:	f003 0320 	and.w	r3, r3, #32
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d00a      	beq.n	80043cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	430a      	orrs	r2, r1
 80043ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d01a      	beq.n	800440e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	430a      	orrs	r2, r1
 80043ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80043f6:	d10a      	bne.n	800440e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	430a      	orrs	r2, r1
 800440c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004412:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004416:	2b00      	cmp	r3, #0
 8004418:	d00a      	beq.n	8004430 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	430a      	orrs	r2, r1
 800442e:	605a      	str	r2, [r3, #4]
  }
}
 8004430:	bf00      	nop
 8004432:	370c      	adds	r7, #12
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr

0800443c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b098      	sub	sp, #96	@ 0x60
 8004440:	af02      	add	r7, sp, #8
 8004442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800444c:	f7fc fe54 	bl	80010f8 <HAL_GetTick>
 8004450:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 0308 	and.w	r3, r3, #8
 800445c:	2b08      	cmp	r3, #8
 800445e:	d12f      	bne.n	80044c0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004460:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004464:	9300      	str	r3, [sp, #0]
 8004466:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004468:	2200      	movs	r2, #0
 800446a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f000 f88e 	bl	8004590 <UART_WaitOnFlagUntilTimeout>
 8004474:	4603      	mov	r3, r0
 8004476:	2b00      	cmp	r3, #0
 8004478:	d022      	beq.n	80044c0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004482:	e853 3f00 	ldrex	r3, [r3]
 8004486:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004488:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800448a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800448e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	461a      	mov	r2, r3
 8004496:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004498:	647b      	str	r3, [r7, #68]	@ 0x44
 800449a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800449c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800449e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80044a0:	e841 2300 	strex	r3, r2, [r1]
 80044a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80044a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d1e6      	bne.n	800447a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2220      	movs	r2, #32
 80044b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044bc:	2303      	movs	r3, #3
 80044be:	e063      	b.n	8004588 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 0304 	and.w	r3, r3, #4
 80044ca:	2b04      	cmp	r3, #4
 80044cc:	d149      	bne.n	8004562 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044ce:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80044d2:	9300      	str	r3, [sp, #0]
 80044d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044d6:	2200      	movs	r2, #0
 80044d8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f000 f857 	bl	8004590 <UART_WaitOnFlagUntilTimeout>
 80044e2:	4603      	mov	r3, r0
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d03c      	beq.n	8004562 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044f0:	e853 3f00 	ldrex	r3, [r3]
 80044f4:	623b      	str	r3, [r7, #32]
   return(result);
 80044f6:	6a3b      	ldr	r3, [r7, #32]
 80044f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80044fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	461a      	mov	r2, r3
 8004504:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004506:	633b      	str	r3, [r7, #48]	@ 0x30
 8004508:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800450a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800450c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800450e:	e841 2300 	strex	r3, r2, [r1]
 8004512:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004516:	2b00      	cmp	r3, #0
 8004518:	d1e6      	bne.n	80044e8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	3308      	adds	r3, #8
 8004520:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	e853 3f00 	ldrex	r3, [r3]
 8004528:	60fb      	str	r3, [r7, #12]
   return(result);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	f023 0301 	bic.w	r3, r3, #1
 8004530:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	3308      	adds	r3, #8
 8004538:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800453a:	61fa      	str	r2, [r7, #28]
 800453c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800453e:	69b9      	ldr	r1, [r7, #24]
 8004540:	69fa      	ldr	r2, [r7, #28]
 8004542:	e841 2300 	strex	r3, r2, [r1]
 8004546:	617b      	str	r3, [r7, #20]
   return(result);
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d1e5      	bne.n	800451a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2220      	movs	r2, #32
 8004552:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	e012      	b.n	8004588 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2220      	movs	r2, #32
 8004566:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2220      	movs	r2, #32
 800456e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004586:	2300      	movs	r3, #0
}
 8004588:	4618      	mov	r0, r3
 800458a:	3758      	adds	r7, #88	@ 0x58
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}

08004590 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	60f8      	str	r0, [r7, #12]
 8004598:	60b9      	str	r1, [r7, #8]
 800459a:	603b      	str	r3, [r7, #0]
 800459c:	4613      	mov	r3, r2
 800459e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045a0:	e04f      	b.n	8004642 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045a2:	69bb      	ldr	r3, [r7, #24]
 80045a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045a8:	d04b      	beq.n	8004642 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045aa:	f7fc fda5 	bl	80010f8 <HAL_GetTick>
 80045ae:	4602      	mov	r2, r0
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	69ba      	ldr	r2, [r7, #24]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d302      	bcc.n	80045c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80045ba:	69bb      	ldr	r3, [r7, #24]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d101      	bne.n	80045c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	e04e      	b.n	8004662 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0304 	and.w	r3, r3, #4
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d037      	beq.n	8004642 <UART_WaitOnFlagUntilTimeout+0xb2>
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	2b80      	cmp	r3, #128	@ 0x80
 80045d6:	d034      	beq.n	8004642 <UART_WaitOnFlagUntilTimeout+0xb2>
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	2b40      	cmp	r3, #64	@ 0x40
 80045dc:	d031      	beq.n	8004642 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	69db      	ldr	r3, [r3, #28]
 80045e4:	f003 0308 	and.w	r3, r3, #8
 80045e8:	2b08      	cmp	r3, #8
 80045ea:	d110      	bne.n	800460e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	2208      	movs	r2, #8
 80045f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80045f4:	68f8      	ldr	r0, [r7, #12]
 80045f6:	f000 f838 	bl	800466a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2208      	movs	r2, #8
 80045fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2200      	movs	r2, #0
 8004606:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e029      	b.n	8004662 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	69db      	ldr	r3, [r3, #28]
 8004614:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004618:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800461c:	d111      	bne.n	8004642 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004626:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004628:	68f8      	ldr	r0, [r7, #12]
 800462a:	f000 f81e 	bl	800466a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2220      	movs	r2, #32
 8004632:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2200      	movs	r2, #0
 800463a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	e00f      	b.n	8004662 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	69da      	ldr	r2, [r3, #28]
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	4013      	ands	r3, r2
 800464c:	68ba      	ldr	r2, [r7, #8]
 800464e:	429a      	cmp	r2, r3
 8004650:	bf0c      	ite	eq
 8004652:	2301      	moveq	r3, #1
 8004654:	2300      	movne	r3, #0
 8004656:	b2db      	uxtb	r3, r3
 8004658:	461a      	mov	r2, r3
 800465a:	79fb      	ldrb	r3, [r7, #7]
 800465c:	429a      	cmp	r2, r3
 800465e:	d0a0      	beq.n	80045a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	3710      	adds	r7, #16
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}

0800466a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800466a:	b480      	push	{r7}
 800466c:	b095      	sub	sp, #84	@ 0x54
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004678:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800467a:	e853 3f00 	ldrex	r3, [r3]
 800467e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004682:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004686:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	461a      	mov	r2, r3
 800468e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004690:	643b      	str	r3, [r7, #64]	@ 0x40
 8004692:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004694:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004696:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004698:	e841 2300 	strex	r3, r2, [r1]
 800469c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800469e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d1e6      	bne.n	8004672 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	3308      	adds	r3, #8
 80046aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ac:	6a3b      	ldr	r3, [r7, #32]
 80046ae:	e853 3f00 	ldrex	r3, [r3]
 80046b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046ba:	f023 0301 	bic.w	r3, r3, #1
 80046be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	3308      	adds	r3, #8
 80046c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80046c8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80046ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80046ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80046d0:	e841 2300 	strex	r3, r2, [r1]
 80046d4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80046d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d1e3      	bne.n	80046a4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d118      	bne.n	8004716 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	e853 3f00 	ldrex	r3, [r3]
 80046f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	f023 0310 	bic.w	r3, r3, #16
 80046f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	461a      	mov	r2, r3
 8004700:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004702:	61bb      	str	r3, [r7, #24]
 8004704:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004706:	6979      	ldr	r1, [r7, #20]
 8004708:	69ba      	ldr	r2, [r7, #24]
 800470a:	e841 2300 	strex	r3, r2, [r1]
 800470e:	613b      	str	r3, [r7, #16]
   return(result);
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d1e6      	bne.n	80046e4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2220      	movs	r2, #32
 800471a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800472a:	bf00      	nop
 800472c:	3754      	adds	r7, #84	@ 0x54
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr

08004736 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004736:	b480      	push	{r7}
 8004738:	b083      	sub	sp, #12
 800473a:	af00      	add	r7, sp, #0
 800473c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800473e:	bf00      	nop
 8004740:	370c      	adds	r7, #12
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr

0800474a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800474a:	b480      	push	{r7}
 800474c:	b083      	sub	sp, #12
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004752:	bf00      	nop
 8004754:	370c      	adds	r7, #12
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr

0800475e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800475e:	b480      	push	{r7}
 8004760:	b083      	sub	sp, #12
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004766:	bf00      	nop
 8004768:	370c      	adds	r7, #12
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr

08004772 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004772:	b480      	push	{r7}
 8004774:	b085      	sub	sp, #20
 8004776:	af00      	add	r7, sp, #0
 8004778:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004780:	2b01      	cmp	r3, #1
 8004782:	d101      	bne.n	8004788 <HAL_UARTEx_DisableFifoMode+0x16>
 8004784:	2302      	movs	r3, #2
 8004786:	e027      	b.n	80047d8 <HAL_UARTEx_DisableFifoMode+0x66>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2224      	movs	r2, #36	@ 0x24
 8004794:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f022 0201 	bic.w	r2, r2, #1
 80047ae:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80047b6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	68fa      	ldr	r2, [r7, #12]
 80047c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2220      	movs	r2, #32
 80047ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2200      	movs	r2, #0
 80047d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80047d6:	2300      	movs	r3, #0
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3714      	adds	r7, #20
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b084      	sub	sp, #16
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d101      	bne.n	80047fc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80047f8:	2302      	movs	r3, #2
 80047fa:	e02d      	b.n	8004858 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2224      	movs	r2, #36	@ 0x24
 8004808:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f022 0201 	bic.w	r2, r2, #1
 8004822:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	683a      	ldr	r2, [r7, #0]
 8004834:	430a      	orrs	r2, r1
 8004836:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f000 f84f 	bl	80048dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	68fa      	ldr	r2, [r7, #12]
 8004844:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2220      	movs	r2, #32
 800484a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004856:	2300      	movs	r3, #0
}
 8004858:	4618      	mov	r0, r3
 800485a:	3710      	adds	r7, #16
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}

08004860 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b084      	sub	sp, #16
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004870:	2b01      	cmp	r3, #1
 8004872:	d101      	bne.n	8004878 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004874:	2302      	movs	r3, #2
 8004876:	e02d      	b.n	80048d4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2224      	movs	r2, #36	@ 0x24
 8004884:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f022 0201 	bic.w	r2, r2, #1
 800489e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	683a      	ldr	r2, [r7, #0]
 80048b0:	430a      	orrs	r2, r1
 80048b2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f000 f811 	bl	80048dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	68fa      	ldr	r2, [r7, #12]
 80048c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2220      	movs	r2, #32
 80048c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80048d2:	2300      	movs	r3, #0
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3710      	adds	r7, #16
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}

080048dc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80048dc:	b480      	push	{r7}
 80048de:	b085      	sub	sp, #20
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d108      	bne.n	80048fe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80048fc:	e031      	b.n	8004962 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80048fe:	2308      	movs	r3, #8
 8004900:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004902:	2308      	movs	r3, #8
 8004904:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	0e5b      	lsrs	r3, r3, #25
 800490e:	b2db      	uxtb	r3, r3
 8004910:	f003 0307 	and.w	r3, r3, #7
 8004914:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	0f5b      	lsrs	r3, r3, #29
 800491e:	b2db      	uxtb	r3, r3
 8004920:	f003 0307 	and.w	r3, r3, #7
 8004924:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004926:	7bbb      	ldrb	r3, [r7, #14]
 8004928:	7b3a      	ldrb	r2, [r7, #12]
 800492a:	4911      	ldr	r1, [pc, #68]	@ (8004970 <UARTEx_SetNbDataToProcess+0x94>)
 800492c:	5c8a      	ldrb	r2, [r1, r2]
 800492e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004932:	7b3a      	ldrb	r2, [r7, #12]
 8004934:	490f      	ldr	r1, [pc, #60]	@ (8004974 <UARTEx_SetNbDataToProcess+0x98>)
 8004936:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004938:	fb93 f3f2 	sdiv	r3, r3, r2
 800493c:	b29a      	uxth	r2, r3
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004944:	7bfb      	ldrb	r3, [r7, #15]
 8004946:	7b7a      	ldrb	r2, [r7, #13]
 8004948:	4909      	ldr	r1, [pc, #36]	@ (8004970 <UARTEx_SetNbDataToProcess+0x94>)
 800494a:	5c8a      	ldrb	r2, [r1, r2]
 800494c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004950:	7b7a      	ldrb	r2, [r7, #13]
 8004952:	4908      	ldr	r1, [pc, #32]	@ (8004974 <UARTEx_SetNbDataToProcess+0x98>)
 8004954:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004956:	fb93 f3f2 	sdiv	r3, r3, r2
 800495a:	b29a      	uxth	r2, r3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8004962:	bf00      	nop
 8004964:	3714      	adds	r7, #20
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr
 800496e:	bf00      	nop
 8004970:	08004a18 	.word	0x08004a18
 8004974:	08004a20 	.word	0x08004a20

08004978 <memset>:
 8004978:	4402      	add	r2, r0
 800497a:	4603      	mov	r3, r0
 800497c:	4293      	cmp	r3, r2
 800497e:	d100      	bne.n	8004982 <memset+0xa>
 8004980:	4770      	bx	lr
 8004982:	f803 1b01 	strb.w	r1, [r3], #1
 8004986:	e7f9      	b.n	800497c <memset+0x4>

08004988 <__libc_init_array>:
 8004988:	b570      	push	{r4, r5, r6, lr}
 800498a:	4d0d      	ldr	r5, [pc, #52]	@ (80049c0 <__libc_init_array+0x38>)
 800498c:	4c0d      	ldr	r4, [pc, #52]	@ (80049c4 <__libc_init_array+0x3c>)
 800498e:	1b64      	subs	r4, r4, r5
 8004990:	10a4      	asrs	r4, r4, #2
 8004992:	2600      	movs	r6, #0
 8004994:	42a6      	cmp	r6, r4
 8004996:	d109      	bne.n	80049ac <__libc_init_array+0x24>
 8004998:	4d0b      	ldr	r5, [pc, #44]	@ (80049c8 <__libc_init_array+0x40>)
 800499a:	4c0c      	ldr	r4, [pc, #48]	@ (80049cc <__libc_init_array+0x44>)
 800499c:	f000 f818 	bl	80049d0 <_init>
 80049a0:	1b64      	subs	r4, r4, r5
 80049a2:	10a4      	asrs	r4, r4, #2
 80049a4:	2600      	movs	r6, #0
 80049a6:	42a6      	cmp	r6, r4
 80049a8:	d105      	bne.n	80049b6 <__libc_init_array+0x2e>
 80049aa:	bd70      	pop	{r4, r5, r6, pc}
 80049ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80049b0:	4798      	blx	r3
 80049b2:	3601      	adds	r6, #1
 80049b4:	e7ee      	b.n	8004994 <__libc_init_array+0xc>
 80049b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80049ba:	4798      	blx	r3
 80049bc:	3601      	adds	r6, #1
 80049be:	e7f2      	b.n	80049a6 <__libc_init_array+0x1e>
 80049c0:	08004a30 	.word	0x08004a30
 80049c4:	08004a30 	.word	0x08004a30
 80049c8:	08004a30 	.word	0x08004a30
 80049cc:	08004a34 	.word	0x08004a34

080049d0 <_init>:
 80049d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049d2:	bf00      	nop
 80049d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049d6:	bc08      	pop	{r3}
 80049d8:	469e      	mov	lr, r3
 80049da:	4770      	bx	lr

080049dc <_fini>:
 80049dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049de:	bf00      	nop
 80049e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049e2:	bc08      	pop	{r3}
 80049e4:	469e      	mov	lr, r3
 80049e6:	4770      	bx	lr
