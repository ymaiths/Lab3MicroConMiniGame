
SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a54  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08005c2c  08005c2c  00006c2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c6c  08005c6c  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  08005c6c  08005c6c  00006c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c74  08005c74  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c74  08005c74  00006c74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005c78  08005c78  00006c78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005c7c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000224  20000010  08005c88  00007010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000234  08005c88  00007234  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013f34  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026a4  00000000  00000000  0001af70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001050  00000000  00000000  0001d618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c9c  00000000  00000000  0001e668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002684f  00000000  00000000  0001f304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000133e0  00000000  00000000  00045b53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fea6f  00000000  00000000  00058f33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001579a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004528  00000000  00000000  001579e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  0015bf10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005c14 	.word	0x08005c14

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	08005c14 	.word	0x08005c14

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800050c:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 800050e:	f000 fe04 	bl	800111a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000512:	f000 f85f 	bl	80005d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000516:	f000 f9d3 	bl	80008c0 <MX_GPIO_Init>
  MX_DMA_Init();
 800051a:	f000 f9a7 	bl	800086c <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 800051e:	f000 f91d 	bl	800075c <MX_LPUART1_UART_Init>
  MX_SPI3_Init();
 8000522:	f000 f965 	bl	80007f0 <MX_SPI3_Init>
  MX_ADC1_Init();
 8000526:	f000 f8a1 	bl	800066c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  SPITxRx_Setup();
 800052a:	f000 fb93 	bl	8000c54 <SPITxRx_Setup>
  IODIRB_Init();
 800052e:	f000 fba7 	bl	8000c80 <IODIRB_Init>
  IODIRA_Init();
 8000532:	f000 fbcf 	bl	8000cd4 <IODIRA_Init>
  num = 5;
 8000536:	4b21      	ldr	r3, [pc, #132]	@ (80005bc <main+0xb4>)
 8000538:	2205      	movs	r2, #5
 800053a:	701a      	strb	r2, [r3, #0]
  mode = 2;
 800053c:	4b20      	ldr	r3, [pc, #128]	@ (80005c0 <main+0xb8>)
 800053e:	2202      	movs	r2, #2
 8000540:	701a      	strb	r2, [r3, #0]

    /* USER CODE BEGIN 3 */



		  if(mode == 1){
 8000542:	4b1f      	ldr	r3, [pc, #124]	@ (80005c0 <main+0xb8>)
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	2b01      	cmp	r3, #1
 8000548:	d128      	bne.n	800059c <main+0x94>
			  static uint64_t timestamp = 0;
			  if (HAL_GetTick() > timestamp){
 800054a:	f000 fe4b 	bl	80011e4 <HAL_GetTick>
 800054e:	4603      	mov	r3, r0
 8000550:	2200      	movs	r2, #0
 8000552:	461c      	mov	r4, r3
 8000554:	4615      	mov	r5, r2
 8000556:	4b1b      	ldr	r3, [pc, #108]	@ (80005c4 <main+0xbc>)
 8000558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800055c:	42a2      	cmp	r2, r4
 800055e:	41ab      	sbcs	r3, r5
 8000560:	d222      	bcs.n	80005a8 <main+0xa0>
				  RandNum = (b%4)+1;
 8000562:	4b19      	ldr	r3, [pc, #100]	@ (80005c8 <main+0xc0>)
 8000564:	781b      	ldrb	r3, [r3, #0]
 8000566:	f003 0303 	and.w	r3, r3, #3
 800056a:	b2db      	uxtb	r3, r3
 800056c:	3301      	adds	r3, #1
 800056e:	b2da      	uxtb	r2, r3
 8000570:	4b16      	ldr	r3, [pc, #88]	@ (80005cc <main+0xc4>)
 8000572:	701a      	strb	r2, [r3, #0]
				  SPITxRx_writeIO();
 8000574:	f000 fa98 	bl	8000aa8 <SPITxRx_writeIO>
				  a[0] += 1;
 8000578:	4b15      	ldr	r3, [pc, #84]	@ (80005d0 <main+0xc8>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	3301      	adds	r3, #1
 800057e:	b2da      	uxtb	r2, r3
 8000580:	4b13      	ldr	r3, [pc, #76]	@ (80005d0 <main+0xc8>)
 8000582:	701a      	strb	r2, [r3, #0]
				  timestamp = HAL_GetTick() + 1000;
 8000584:	f000 fe2e 	bl	80011e4 <HAL_GetTick>
 8000588:	4603      	mov	r3, r0
 800058a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800058e:	2200      	movs	r2, #0
 8000590:	4698      	mov	r8, r3
 8000592:	4691      	mov	r9, r2
 8000594:	4b0b      	ldr	r3, [pc, #44]	@ (80005c4 <main+0xbc>)
 8000596:	e9c3 8900 	strd	r8, r9, [r3]
 800059a:	e005      	b.n	80005a8 <main+0xa0>
			  }
		  }else if(mode == 2){
 800059c:	4b08      	ldr	r3, [pc, #32]	@ (80005c0 <main+0xb8>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b02      	cmp	r3, #2
 80005a2:	d101      	bne.n	80005a8 <main+0xa0>
			  SPITxRx_readIO();
 80005a4:	f000 fa1c 	bl	80009e0 <SPITxRx_readIO>
			  }
		  AnsCheck();
 80005a8:	f000 fb26 	bl	8000bf8 <AnsCheck>





	  b+=1;
 80005ac:	4b06      	ldr	r3, [pc, #24]	@ (80005c8 <main+0xc0>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	3301      	adds	r3, #1
 80005b2:	b2da      	uxtb	r2, r3
 80005b4:	4b04      	ldr	r3, [pc, #16]	@ (80005c8 <main+0xc0>)
 80005b6:	701a      	strb	r2, [r3, #0]
		  if(mode == 1){
 80005b8:	e7c3      	b.n	8000542 <main+0x3a>
 80005ba:	bf00      	nop
 80005bc:	2000021f 	.word	0x2000021f
 80005c0:	20000206 	.word	0x20000206
 80005c4:	20000228 	.word	0x20000228
 80005c8:	20000225 	.word	0x20000225
 80005cc:	20000226 	.word	0x20000226
 80005d0:	20000220 	.word	0x20000220

080005d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b094      	sub	sp, #80	@ 0x50
 80005d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005da:	f107 0318 	add.w	r3, r7, #24
 80005de:	2238      	movs	r2, #56	@ 0x38
 80005e0:	2100      	movs	r1, #0
 80005e2:	4618      	mov	r0, r3
 80005e4:	f005 faea 	bl	8005bbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e8:	1d3b      	adds	r3, r7, #4
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	605a      	str	r2, [r3, #4]
 80005f0:	609a      	str	r2, [r3, #8]
 80005f2:	60da      	str	r2, [r3, #12]
 80005f4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80005f6:	2000      	movs	r0, #0
 80005f8:	f002 ff1a 	bl	8003430 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005fc:	2302      	movs	r3, #2
 80005fe:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000600:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000604:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000606:	2340      	movs	r3, #64	@ 0x40
 8000608:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060a:	2302      	movs	r3, #2
 800060c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800060e:	2302      	movs	r3, #2
 8000610:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000612:	2304      	movs	r3, #4
 8000614:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000616:	2355      	movs	r3, #85	@ 0x55
 8000618:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800061a:	2302      	movs	r3, #2
 800061c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800061e:	2302      	movs	r3, #2
 8000620:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000622:	2302      	movs	r3, #2
 8000624:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000626:	f107 0318 	add.w	r3, r7, #24
 800062a:	4618      	mov	r0, r3
 800062c:	f002 ffb4 	bl	8003598 <HAL_RCC_OscConfig>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000636:	f000 fb87 	bl	8000d48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063a:	230f      	movs	r3, #15
 800063c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800063e:	2303      	movs	r3, #3
 8000640:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000642:	2300      	movs	r3, #0
 8000644:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000646:	2300      	movs	r3, #0
 8000648:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800064a:	2300      	movs	r3, #0
 800064c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800064e:	1d3b      	adds	r3, r7, #4
 8000650:	2104      	movs	r1, #4
 8000652:	4618      	mov	r0, r3
 8000654:	f003 fab2 	bl	8003bbc <HAL_RCC_ClockConfig>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800065e:	f000 fb73 	bl	8000d48 <Error_Handler>
  }
}
 8000662:	bf00      	nop
 8000664:	3750      	adds	r7, #80	@ 0x50
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
	...

0800066c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b08c      	sub	sp, #48	@ 0x30
 8000670:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000672:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
 800067a:	605a      	str	r2, [r3, #4]
 800067c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800067e:	1d3b      	adds	r3, r7, #4
 8000680:	2220      	movs	r2, #32
 8000682:	2100      	movs	r1, #0
 8000684:	4618      	mov	r0, r3
 8000686:	f005 fa99 	bl	8005bbc <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800068a:	4b32      	ldr	r3, [pc, #200]	@ (8000754 <MX_ADC1_Init+0xe8>)
 800068c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000690:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000692:	4b30      	ldr	r3, [pc, #192]	@ (8000754 <MX_ADC1_Init+0xe8>)
 8000694:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000698:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800069a:	4b2e      	ldr	r3, [pc, #184]	@ (8000754 <MX_ADC1_Init+0xe8>)
 800069c:	2200      	movs	r2, #0
 800069e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006a0:	4b2c      	ldr	r3, [pc, #176]	@ (8000754 <MX_ADC1_Init+0xe8>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80006a6:	4b2b      	ldr	r3, [pc, #172]	@ (8000754 <MX_ADC1_Init+0xe8>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006ac:	4b29      	ldr	r3, [pc, #164]	@ (8000754 <MX_ADC1_Init+0xe8>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006b2:	4b28      	ldr	r3, [pc, #160]	@ (8000754 <MX_ADC1_Init+0xe8>)
 80006b4:	2204      	movs	r2, #4
 80006b6:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006b8:	4b26      	ldr	r3, [pc, #152]	@ (8000754 <MX_ADC1_Init+0xe8>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80006be:	4b25      	ldr	r3, [pc, #148]	@ (8000754 <MX_ADC1_Init+0xe8>)
 80006c0:	2201      	movs	r2, #1
 80006c2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80006c4:	4b23      	ldr	r3, [pc, #140]	@ (8000754 <MX_ADC1_Init+0xe8>)
 80006c6:	2201      	movs	r2, #1
 80006c8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006ca:	4b22      	ldr	r3, [pc, #136]	@ (8000754 <MX_ADC1_Init+0xe8>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006d2:	4b20      	ldr	r3, [pc, #128]	@ (8000754 <MX_ADC1_Init+0xe8>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006d8:	4b1e      	ldr	r3, [pc, #120]	@ (8000754 <MX_ADC1_Init+0xe8>)
 80006da:	2200      	movs	r2, #0
 80006dc:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80006de:	4b1d      	ldr	r3, [pc, #116]	@ (8000754 <MX_ADC1_Init+0xe8>)
 80006e0:	2201      	movs	r2, #1
 80006e2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006e6:	4b1b      	ldr	r3, [pc, #108]	@ (8000754 <MX_ADC1_Init+0xe8>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80006ec:	4b19      	ldr	r3, [pc, #100]	@ (8000754 <MX_ADC1_Init+0xe8>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006f4:	4817      	ldr	r0, [pc, #92]	@ (8000754 <MX_ADC1_Init+0xe8>)
 80006f6:	f000 ffbb 	bl	8001670 <HAL_ADC_Init>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000700:	f000 fb22 	bl	8000d48 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000704:	2300      	movs	r3, #0
 8000706:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000708:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800070c:	4619      	mov	r1, r3
 800070e:	4811      	ldr	r0, [pc, #68]	@ (8000754 <MX_ADC1_Init+0xe8>)
 8000710:	f002 f880 	bl	8002814 <HAL_ADCEx_MultiModeConfigChannel>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800071a:	f000 fb15 	bl	8000d48 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800071e:	4b0e      	ldr	r3, [pc, #56]	@ (8000758 <MX_ADC1_Init+0xec>)
 8000720:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000722:	2306      	movs	r3, #6
 8000724:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000726:	2300      	movs	r3, #0
 8000728:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800072a:	237f      	movs	r3, #127	@ 0x7f
 800072c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800072e:	2304      	movs	r3, #4
 8000730:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000732:	2300      	movs	r3, #0
 8000734:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000736:	1d3b      	adds	r3, r7, #4
 8000738:	4619      	mov	r1, r3
 800073a:	4806      	ldr	r0, [pc, #24]	@ (8000754 <MX_ADC1_Init+0xe8>)
 800073c:	f001 fbd2 	bl	8001ee4 <HAL_ADC_ConfigChannel>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000746:	f000 faff 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800074a:	bf00      	nop
 800074c:	3730      	adds	r7, #48	@ 0x30
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	2000002c 	.word	0x2000002c
 8000758:	04300002 	.word	0x04300002

0800075c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000760:	4b21      	ldr	r3, [pc, #132]	@ (80007e8 <MX_LPUART1_UART_Init+0x8c>)
 8000762:	4a22      	ldr	r2, [pc, #136]	@ (80007ec <MX_LPUART1_UART_Init+0x90>)
 8000764:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000766:	4b20      	ldr	r3, [pc, #128]	@ (80007e8 <MX_LPUART1_UART_Init+0x8c>)
 8000768:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800076c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800076e:	4b1e      	ldr	r3, [pc, #120]	@ (80007e8 <MX_LPUART1_UART_Init+0x8c>)
 8000770:	2200      	movs	r2, #0
 8000772:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000774:	4b1c      	ldr	r3, [pc, #112]	@ (80007e8 <MX_LPUART1_UART_Init+0x8c>)
 8000776:	2200      	movs	r2, #0
 8000778:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800077a:	4b1b      	ldr	r3, [pc, #108]	@ (80007e8 <MX_LPUART1_UART_Init+0x8c>)
 800077c:	2200      	movs	r2, #0
 800077e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000780:	4b19      	ldr	r3, [pc, #100]	@ (80007e8 <MX_LPUART1_UART_Init+0x8c>)
 8000782:	220c      	movs	r2, #12
 8000784:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000786:	4b18      	ldr	r3, [pc, #96]	@ (80007e8 <MX_LPUART1_UART_Init+0x8c>)
 8000788:	2200      	movs	r2, #0
 800078a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800078c:	4b16      	ldr	r3, [pc, #88]	@ (80007e8 <MX_LPUART1_UART_Init+0x8c>)
 800078e:	2200      	movs	r2, #0
 8000790:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000792:	4b15      	ldr	r3, [pc, #84]	@ (80007e8 <MX_LPUART1_UART_Init+0x8c>)
 8000794:	2200      	movs	r2, #0
 8000796:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000798:	4b13      	ldr	r3, [pc, #76]	@ (80007e8 <MX_LPUART1_UART_Init+0x8c>)
 800079a:	2200      	movs	r2, #0
 800079c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800079e:	4812      	ldr	r0, [pc, #72]	@ (80007e8 <MX_LPUART1_UART_Init+0x8c>)
 80007a0:	f004 fb9e 	bl	8004ee0 <HAL_UART_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80007aa:	f000 facd 	bl	8000d48 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007ae:	2100      	movs	r1, #0
 80007b0:	480d      	ldr	r0, [pc, #52]	@ (80007e8 <MX_LPUART1_UART_Init+0x8c>)
 80007b2:	f005 f939 	bl	8005a28 <HAL_UARTEx_SetTxFifoThreshold>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80007bc:	f000 fac4 	bl	8000d48 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007c0:	2100      	movs	r1, #0
 80007c2:	4809      	ldr	r0, [pc, #36]	@ (80007e8 <MX_LPUART1_UART_Init+0x8c>)
 80007c4:	f005 f96e 	bl	8005aa4 <HAL_UARTEx_SetRxFifoThreshold>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80007ce:	f000 fabb 	bl	8000d48 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80007d2:	4805      	ldr	r0, [pc, #20]	@ (80007e8 <MX_LPUART1_UART_Init+0x8c>)
 80007d4:	f005 f8ef 	bl	80059b6 <HAL_UARTEx_DisableFifoMode>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80007de:	f000 fab3 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	200000f8 	.word	0x200000f8
 80007ec:	40008000 	.word	0x40008000

080007f0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80007f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000864 <MX_SPI3_Init+0x74>)
 80007f6:	4a1c      	ldr	r2, [pc, #112]	@ (8000868 <MX_SPI3_Init+0x78>)
 80007f8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80007fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000864 <MX_SPI3_Init+0x74>)
 80007fc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000800:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000802:	4b18      	ldr	r3, [pc, #96]	@ (8000864 <MX_SPI3_Init+0x74>)
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000808:	4b16      	ldr	r3, [pc, #88]	@ (8000864 <MX_SPI3_Init+0x74>)
 800080a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800080e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000810:	4b14      	ldr	r3, [pc, #80]	@ (8000864 <MX_SPI3_Init+0x74>)
 8000812:	2200      	movs	r2, #0
 8000814:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000816:	4b13      	ldr	r3, [pc, #76]	@ (8000864 <MX_SPI3_Init+0x74>)
 8000818:	2200      	movs	r2, #0
 800081a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800081c:	4b11      	ldr	r3, [pc, #68]	@ (8000864 <MX_SPI3_Init+0x74>)
 800081e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000822:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000824:	4b0f      	ldr	r3, [pc, #60]	@ (8000864 <MX_SPI3_Init+0x74>)
 8000826:	2228      	movs	r2, #40	@ 0x28
 8000828:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800082a:	4b0e      	ldr	r3, [pc, #56]	@ (8000864 <MX_SPI3_Init+0x74>)
 800082c:	2200      	movs	r2, #0
 800082e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000830:	4b0c      	ldr	r3, [pc, #48]	@ (8000864 <MX_SPI3_Init+0x74>)
 8000832:	2200      	movs	r2, #0
 8000834:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000836:	4b0b      	ldr	r3, [pc, #44]	@ (8000864 <MX_SPI3_Init+0x74>)
 8000838:	2200      	movs	r2, #0
 800083a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 800083c:	4b09      	ldr	r3, [pc, #36]	@ (8000864 <MX_SPI3_Init+0x74>)
 800083e:	2207      	movs	r2, #7
 8000840:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000842:	4b08      	ldr	r3, [pc, #32]	@ (8000864 <MX_SPI3_Init+0x74>)
 8000844:	2200      	movs	r2, #0
 8000846:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000848:	4b06      	ldr	r3, [pc, #24]	@ (8000864 <MX_SPI3_Init+0x74>)
 800084a:	2208      	movs	r2, #8
 800084c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800084e:	4805      	ldr	r0, [pc, #20]	@ (8000864 <MX_SPI3_Init+0x74>)
 8000850:	f003 fe1e 	bl	8004490 <HAL_SPI_Init>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800085a:	f000 fa75 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	2000018c 	.word	0x2000018c
 8000868:	40003c00 	.word	0x40003c00

0800086c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000872:	4b12      	ldr	r3, [pc, #72]	@ (80008bc <MX_DMA_Init+0x50>)
 8000874:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000876:	4a11      	ldr	r2, [pc, #68]	@ (80008bc <MX_DMA_Init+0x50>)
 8000878:	f043 0304 	orr.w	r3, r3, #4
 800087c:	6493      	str	r3, [r2, #72]	@ 0x48
 800087e:	4b0f      	ldr	r3, [pc, #60]	@ (80008bc <MX_DMA_Init+0x50>)
 8000880:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000882:	f003 0304 	and.w	r3, r3, #4
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800088a:	4b0c      	ldr	r3, [pc, #48]	@ (80008bc <MX_DMA_Init+0x50>)
 800088c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800088e:	4a0b      	ldr	r2, [pc, #44]	@ (80008bc <MX_DMA_Init+0x50>)
 8000890:	f043 0301 	orr.w	r3, r3, #1
 8000894:	6493      	str	r3, [r2, #72]	@ 0x48
 8000896:	4b09      	ldr	r3, [pc, #36]	@ (80008bc <MX_DMA_Init+0x50>)
 8000898:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800089a:	f003 0301 	and.w	r3, r3, #1
 800089e:	603b      	str	r3, [r7, #0]
 80008a0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80008a2:	2200      	movs	r2, #0
 80008a4:	2100      	movs	r1, #0
 80008a6:	200b      	movs	r0, #11
 80008a8:	f002 f997 	bl	8002bda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80008ac:	200b      	movs	r0, #11
 80008ae:	f002 f9ae 	bl	8002c0e <HAL_NVIC_EnableIRQ>

}
 80008b2:	bf00      	nop
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	40021000 	.word	0x40021000

080008c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b08a      	sub	sp, #40	@ 0x28
 80008c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c6:	f107 0314 	add.w	r3, r7, #20
 80008ca:	2200      	movs	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]
 80008ce:	605a      	str	r2, [r3, #4]
 80008d0:	609a      	str	r2, [r3, #8]
 80008d2:	60da      	str	r2, [r3, #12]
 80008d4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008d6:	4b3f      	ldr	r3, [pc, #252]	@ (80009d4 <MX_GPIO_Init+0x114>)
 80008d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008da:	4a3e      	ldr	r2, [pc, #248]	@ (80009d4 <MX_GPIO_Init+0x114>)
 80008dc:	f043 0304 	orr.w	r3, r3, #4
 80008e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008e2:	4b3c      	ldr	r3, [pc, #240]	@ (80009d4 <MX_GPIO_Init+0x114>)
 80008e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008e6:	f003 0304 	and.w	r3, r3, #4
 80008ea:	613b      	str	r3, [r7, #16]
 80008ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008ee:	4b39      	ldr	r3, [pc, #228]	@ (80009d4 <MX_GPIO_Init+0x114>)
 80008f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008f2:	4a38      	ldr	r2, [pc, #224]	@ (80009d4 <MX_GPIO_Init+0x114>)
 80008f4:	f043 0320 	orr.w	r3, r3, #32
 80008f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008fa:	4b36      	ldr	r3, [pc, #216]	@ (80009d4 <MX_GPIO_Init+0x114>)
 80008fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008fe:	f003 0320 	and.w	r3, r3, #32
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000906:	4b33      	ldr	r3, [pc, #204]	@ (80009d4 <MX_GPIO_Init+0x114>)
 8000908:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800090a:	4a32      	ldr	r2, [pc, #200]	@ (80009d4 <MX_GPIO_Init+0x114>)
 800090c:	f043 0301 	orr.w	r3, r3, #1
 8000910:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000912:	4b30      	ldr	r3, [pc, #192]	@ (80009d4 <MX_GPIO_Init+0x114>)
 8000914:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000916:	f003 0301 	and.w	r3, r3, #1
 800091a:	60bb      	str	r3, [r7, #8]
 800091c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800091e:	4b2d      	ldr	r3, [pc, #180]	@ (80009d4 <MX_GPIO_Init+0x114>)
 8000920:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000922:	4a2c      	ldr	r2, [pc, #176]	@ (80009d4 <MX_GPIO_Init+0x114>)
 8000924:	f043 0308 	orr.w	r3, r3, #8
 8000928:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800092a:	4b2a      	ldr	r3, [pc, #168]	@ (80009d4 <MX_GPIO_Init+0x114>)
 800092c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800092e:	f003 0308 	and.w	r3, r3, #8
 8000932:	607b      	str	r3, [r7, #4]
 8000934:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000936:	4b27      	ldr	r3, [pc, #156]	@ (80009d4 <MX_GPIO_Init+0x114>)
 8000938:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800093a:	4a26      	ldr	r2, [pc, #152]	@ (80009d4 <MX_GPIO_Init+0x114>)
 800093c:	f043 0302 	orr.w	r3, r3, #2
 8000940:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000942:	4b24      	ldr	r3, [pc, #144]	@ (80009d4 <MX_GPIO_Init+0x114>)
 8000944:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000946:	f003 0302 	and.w	r3, r3, #2
 800094a:	603b      	str	r3, [r7, #0]
 800094c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800094e:	2200      	movs	r2, #0
 8000950:	2120      	movs	r1, #32
 8000952:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000956:	f002 fd2f 	bl	80033b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 800095a:	2201      	movs	r2, #1
 800095c:	2104      	movs	r1, #4
 800095e:	481e      	ldr	r0, [pc, #120]	@ (80009d8 <MX_GPIO_Init+0x118>)
 8000960:	f002 fd2a 	bl	80033b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000964:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000968:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800096a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800096e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000974:	f107 0314 	add.w	r3, r7, #20
 8000978:	4619      	mov	r1, r3
 800097a:	4818      	ldr	r0, [pc, #96]	@ (80009dc <MX_GPIO_Init+0x11c>)
 800097c:	f002 fb82 	bl	8003084 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000980:	2320      	movs	r3, #32
 8000982:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000984:	2301      	movs	r3, #1
 8000986:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098c:	2300      	movs	r3, #0
 800098e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000990:	f107 0314 	add.w	r3, r7, #20
 8000994:	4619      	mov	r1, r3
 8000996:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800099a:	f002 fb73 	bl	8003084 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800099e:	2304      	movs	r3, #4
 80009a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a2:	2301      	movs	r3, #1
 80009a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	2300      	movs	r3, #0
 80009ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009ae:	f107 0314 	add.w	r3, r7, #20
 80009b2:	4619      	mov	r1, r3
 80009b4:	4808      	ldr	r0, [pc, #32]	@ (80009d8 <MX_GPIO_Init+0x118>)
 80009b6:	f002 fb65 	bl	8003084 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80009ba:	2200      	movs	r2, #0
 80009bc:	2100      	movs	r1, #0
 80009be:	2028      	movs	r0, #40	@ 0x28
 80009c0:	f002 f90b 	bl	8002bda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009c4:	2028      	movs	r0, #40	@ 0x28
 80009c6:	f002 f922 	bl	8002c0e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009ca:	bf00      	nop
 80009cc:	3728      	adds	r7, #40	@ 0x28
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40021000 	.word	0x40021000
 80009d8:	48000c00 	.word	0x48000c00
 80009dc:	48000800 	.word	0x48000800

080009e0 <SPITxRx_readIO>:

/* USER CODE BEGIN 4 */

void SPITxRx_readIO() //mode2
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_2)){
 80009e4:	2104      	movs	r1, #4
 80009e6:	482b      	ldr	r0, [pc, #172]	@ (8000a94 <SPITxRx_readIO+0xb4>)
 80009e8:	f002 fcce 	bl	8003388 <HAL_GPIO_ReadPin>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d04d      	beq.n	8000a8e <SPITxRx_readIO+0xae>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0); // CS Select
 80009f2:	2200      	movs	r2, #0
 80009f4:	2104      	movs	r1, #4
 80009f6:	4827      	ldr	r0, [pc, #156]	@ (8000a94 <SPITxRx_readIO+0xb4>)
 80009f8:	f002 fcde 	bl	80033b8 <HAL_GPIO_WritePin>
		SPITx[0] = 0b01000001;
 80009fc:	4b26      	ldr	r3, [pc, #152]	@ (8000a98 <SPITxRx_readIO+0xb8>)
 80009fe:	2241      	movs	r2, #65	@ 0x41
 8000a00:	701a      	strb	r2, [r3, #0]
		SPITx[1] = 0x12;
 8000a02:	4b25      	ldr	r3, [pc, #148]	@ (8000a98 <SPITxRx_readIO+0xb8>)
 8000a04:	2212      	movs	r2, #18
 8000a06:	705a      	strb	r2, [r3, #1]
		SPITx[2] = 0;
 8000a08:	4b23      	ldr	r3, [pc, #140]	@ (8000a98 <SPITxRx_readIO+0xb8>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	709a      	strb	r2, [r3, #2]
		SPITx[3] = 0;
 8000a0e:	4b22      	ldr	r3, [pc, #136]	@ (8000a98 <SPITxRx_readIO+0xb8>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	70da      	strb	r2, [r3, #3]

	//for(int i = 0;i<=num;i++){
		if(SPIRx[2]== 14){
 8000a14:	4b21      	ldr	r3, [pc, #132]	@ (8000a9c <SPITxRx_readIO+0xbc>)
 8000a16:	789b      	ldrb	r3, [r3, #2]
 8000a18:	2b0e      	cmp	r3, #14
 8000a1a:	d109      	bne.n	8000a30 <SPITxRx_readIO+0x50>
			//PushOrder[i] = 1;
			a[4] = 1;
 8000a1c:	4b20      	ldr	r3, [pc, #128]	@ (8000aa0 <SPITxRx_readIO+0xc0>)
 8000a1e:	2201      	movs	r2, #1
 8000a20:	711a      	strb	r2, [r3, #4]
			a[2]+=1;
 8000a22:	4b1f      	ldr	r3, [pc, #124]	@ (8000aa0 <SPITxRx_readIO+0xc0>)
 8000a24:	789b      	ldrb	r3, [r3, #2]
 8000a26:	3301      	adds	r3, #1
 8000a28:	b2da      	uxtb	r2, r3
 8000a2a:	4b1d      	ldr	r3, [pc, #116]	@ (8000aa0 <SPITxRx_readIO+0xc0>)
 8000a2c:	709a      	strb	r2, [r3, #2]
 8000a2e:	e028      	b.n	8000a82 <SPITxRx_readIO+0xa2>
		}else if(SPIRx[2]== 13){
 8000a30:	4b1a      	ldr	r3, [pc, #104]	@ (8000a9c <SPITxRx_readIO+0xbc>)
 8000a32:	789b      	ldrb	r3, [r3, #2]
 8000a34:	2b0d      	cmp	r3, #13
 8000a36:	d109      	bne.n	8000a4c <SPITxRx_readIO+0x6c>
			//PushOrder[i] = 2;
			a[4] = 2;
 8000a38:	4b19      	ldr	r3, [pc, #100]	@ (8000aa0 <SPITxRx_readIO+0xc0>)
 8000a3a:	2202      	movs	r2, #2
 8000a3c:	711a      	strb	r2, [r3, #4]
			a[2]+=1;
 8000a3e:	4b18      	ldr	r3, [pc, #96]	@ (8000aa0 <SPITxRx_readIO+0xc0>)
 8000a40:	789b      	ldrb	r3, [r3, #2]
 8000a42:	3301      	adds	r3, #1
 8000a44:	b2da      	uxtb	r2, r3
 8000a46:	4b16      	ldr	r3, [pc, #88]	@ (8000aa0 <SPITxRx_readIO+0xc0>)
 8000a48:	709a      	strb	r2, [r3, #2]
 8000a4a:	e01a      	b.n	8000a82 <SPITxRx_readIO+0xa2>
		}else if(SPIRx[2]== 11){
 8000a4c:	4b13      	ldr	r3, [pc, #76]	@ (8000a9c <SPITxRx_readIO+0xbc>)
 8000a4e:	789b      	ldrb	r3, [r3, #2]
 8000a50:	2b0b      	cmp	r3, #11
 8000a52:	d109      	bne.n	8000a68 <SPITxRx_readIO+0x88>
			a[4] = 3;
 8000a54:	4b12      	ldr	r3, [pc, #72]	@ (8000aa0 <SPITxRx_readIO+0xc0>)
 8000a56:	2203      	movs	r2, #3
 8000a58:	711a      	strb	r2, [r3, #4]
			a[2]+=1;
 8000a5a:	4b11      	ldr	r3, [pc, #68]	@ (8000aa0 <SPITxRx_readIO+0xc0>)
 8000a5c:	789b      	ldrb	r3, [r3, #2]
 8000a5e:	3301      	adds	r3, #1
 8000a60:	b2da      	uxtb	r2, r3
 8000a62:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa0 <SPITxRx_readIO+0xc0>)
 8000a64:	709a      	strb	r2, [r3, #2]
 8000a66:	e00c      	b.n	8000a82 <SPITxRx_readIO+0xa2>
			//PushOrder[i] = 3;
		}else if(SPIRx[2]== 7){
 8000a68:	4b0c      	ldr	r3, [pc, #48]	@ (8000a9c <SPITxRx_readIO+0xbc>)
 8000a6a:	789b      	ldrb	r3, [r3, #2]
 8000a6c:	2b07      	cmp	r3, #7
 8000a6e:	d108      	bne.n	8000a82 <SPITxRx_readIO+0xa2>
			a[4] = 4;
 8000a70:	4b0b      	ldr	r3, [pc, #44]	@ (8000aa0 <SPITxRx_readIO+0xc0>)
 8000a72:	2204      	movs	r2, #4
 8000a74:	711a      	strb	r2, [r3, #4]
			a[2]+=1;
 8000a76:	4b0a      	ldr	r3, [pc, #40]	@ (8000aa0 <SPITxRx_readIO+0xc0>)
 8000a78:	789b      	ldrb	r3, [r3, #2]
 8000a7a:	3301      	adds	r3, #1
 8000a7c:	b2da      	uxtb	r2, r3
 8000a7e:	4b08      	ldr	r3, [pc, #32]	@ (8000aa0 <SPITxRx_readIO+0xc0>)
 8000a80:	709a      	strb	r2, [r3, #2]
			//PushOrder[i] = 4;
		}
	//}

	HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 4);
 8000a82:	2304      	movs	r3, #4
 8000a84:	4a05      	ldr	r2, [pc, #20]	@ (8000a9c <SPITxRx_readIO+0xbc>)
 8000a86:	4904      	ldr	r1, [pc, #16]	@ (8000a98 <SPITxRx_readIO+0xb8>)
 8000a88:	4806      	ldr	r0, [pc, #24]	@ (8000aa4 <SPITxRx_readIO+0xc4>)
 8000a8a:	f003 fdad 	bl	80045e8 <HAL_SPI_TransmitReceive_IT>
//		}
//		for(int i = 0;i<=num-1;i++){
//			LedOrder[i] = 0;
//		}
	}
}}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	48000c00 	.word	0x48000c00
 8000a98:	200001fc 	.word	0x200001fc
 8000a9c:	200001f0 	.word	0x200001f0
 8000aa0:	20000220 	.word	0x20000220
 8000aa4:	2000018c 	.word	0x2000018c

08000aa8 <SPITxRx_writeIO>:

void SPITxRx_writeIO(){ //mode1
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_2)){
 8000aac:	2104      	movs	r1, #4
 8000aae:	4848      	ldr	r0, [pc, #288]	@ (8000bd0 <SPITxRx_writeIO+0x128>)
 8000ab0:	f002 fc6a 	bl	8003388 <HAL_GPIO_ReadPin>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	f000 8088 	beq.w	8000bcc <SPITxRx_writeIO+0x124>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0); // CS Select
 8000abc:	2200      	movs	r2, #0
 8000abe:	2104      	movs	r1, #4
 8000ac0:	4843      	ldr	r0, [pc, #268]	@ (8000bd0 <SPITxRx_writeIO+0x128>)
 8000ac2:	f002 fc79 	bl	80033b8 <HAL_GPIO_WritePin>
		if(LedOff == 0){
 8000ac6:	4b43      	ldr	r3, [pc, #268]	@ (8000bd4 <SPITxRx_writeIO+0x12c>)
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d165      	bne.n	8000b9a <SPITxRx_writeIO+0xf2>
			SPITx[0] = 0b01000000;
 8000ace:	4b42      	ldr	r3, [pc, #264]	@ (8000bd8 <SPITxRx_writeIO+0x130>)
 8000ad0:	2240      	movs	r2, #64	@ 0x40
 8000ad2:	701a      	strb	r2, [r3, #0]
			SPITx[1] = 0x15;
 8000ad4:	4b40      	ldr	r3, [pc, #256]	@ (8000bd8 <SPITxRx_writeIO+0x130>)
 8000ad6:	2215      	movs	r2, #21
 8000ad8:	705a      	strb	r2, [r3, #1]
				if(RandNum == 1){
 8000ada:	4b40      	ldr	r3, [pc, #256]	@ (8000bdc <SPITxRx_writeIO+0x134>)
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	2b01      	cmp	r3, #1
 8000ae0:	d109      	bne.n	8000af6 <SPITxRx_writeIO+0x4e>
					SPITx[2] = ~(0b00000001);
 8000ae2:	4b3d      	ldr	r3, [pc, #244]	@ (8000bd8 <SPITxRx_writeIO+0x130>)
 8000ae4:	22fe      	movs	r2, #254	@ 0xfe
 8000ae6:	709a      	strb	r2, [r3, #2]
					LedOff = 1 ;
 8000ae8:	4b3a      	ldr	r3, [pc, #232]	@ (8000bd4 <SPITxRx_writeIO+0x12c>)
 8000aea:	2201      	movs	r2, #1
 8000aec:	701a      	strb	r2, [r3, #0]
					a[3] = 1;
 8000aee:	4b3c      	ldr	r3, [pc, #240]	@ (8000be0 <SPITxRx_writeIO+0x138>)
 8000af0:	2201      	movs	r2, #1
 8000af2:	70da      	strb	r2, [r3, #3]
 8000af4:	e028      	b.n	8000b48 <SPITxRx_writeIO+0xa0>
				}else if(RandNum == 2){
 8000af6:	4b39      	ldr	r3, [pc, #228]	@ (8000bdc <SPITxRx_writeIO+0x134>)
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	2b02      	cmp	r3, #2
 8000afc:	d109      	bne.n	8000b12 <SPITxRx_writeIO+0x6a>
					SPITx[2] = ~(0b00000010);
 8000afe:	4b36      	ldr	r3, [pc, #216]	@ (8000bd8 <SPITxRx_writeIO+0x130>)
 8000b00:	22fd      	movs	r2, #253	@ 0xfd
 8000b02:	709a      	strb	r2, [r3, #2]
					LedOff = 1 ;
 8000b04:	4b33      	ldr	r3, [pc, #204]	@ (8000bd4 <SPITxRx_writeIO+0x12c>)
 8000b06:	2201      	movs	r2, #1
 8000b08:	701a      	strb	r2, [r3, #0]
					a[3] = 2;
 8000b0a:	4b35      	ldr	r3, [pc, #212]	@ (8000be0 <SPITxRx_writeIO+0x138>)
 8000b0c:	2202      	movs	r2, #2
 8000b0e:	70da      	strb	r2, [r3, #3]
 8000b10:	e01a      	b.n	8000b48 <SPITxRx_writeIO+0xa0>
				}else if(RandNum == 3){
 8000b12:	4b32      	ldr	r3, [pc, #200]	@ (8000bdc <SPITxRx_writeIO+0x134>)
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	2b03      	cmp	r3, #3
 8000b18:	d109      	bne.n	8000b2e <SPITxRx_writeIO+0x86>
					SPITx[2] = ~(0b00000100);
 8000b1a:	4b2f      	ldr	r3, [pc, #188]	@ (8000bd8 <SPITxRx_writeIO+0x130>)
 8000b1c:	22fb      	movs	r2, #251	@ 0xfb
 8000b1e:	709a      	strb	r2, [r3, #2]
					LedOff = 1 ;
 8000b20:	4b2c      	ldr	r3, [pc, #176]	@ (8000bd4 <SPITxRx_writeIO+0x12c>)
 8000b22:	2201      	movs	r2, #1
 8000b24:	701a      	strb	r2, [r3, #0]
					a[3] = 3;
 8000b26:	4b2e      	ldr	r3, [pc, #184]	@ (8000be0 <SPITxRx_writeIO+0x138>)
 8000b28:	2203      	movs	r2, #3
 8000b2a:	70da      	strb	r2, [r3, #3]
 8000b2c:	e00c      	b.n	8000b48 <SPITxRx_writeIO+0xa0>
				}else if(RandNum == 4){
 8000b2e:	4b2b      	ldr	r3, [pc, #172]	@ (8000bdc <SPITxRx_writeIO+0x134>)
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	2b04      	cmp	r3, #4
 8000b34:	d108      	bne.n	8000b48 <SPITxRx_writeIO+0xa0>
					SPITx[2] = ~(0b00001000);
 8000b36:	4b28      	ldr	r3, [pc, #160]	@ (8000bd8 <SPITxRx_writeIO+0x130>)
 8000b38:	22f7      	movs	r2, #247	@ 0xf7
 8000b3a:	709a      	strb	r2, [r3, #2]
					LedOff = 1 ;
 8000b3c:	4b25      	ldr	r3, [pc, #148]	@ (8000bd4 <SPITxRx_writeIO+0x12c>)
 8000b3e:	2201      	movs	r2, #1
 8000b40:	701a      	strb	r2, [r3, #0]
					a[3] = 4;
 8000b42:	4b27      	ldr	r3, [pc, #156]	@ (8000be0 <SPITxRx_writeIO+0x138>)
 8000b44:	2204      	movs	r2, #4
 8000b46:	70da      	strb	r2, [r3, #3]
				}
			LightOrder[a[1]] = a[3];
 8000b48:	4b25      	ldr	r3, [pc, #148]	@ (8000be0 <SPITxRx_writeIO+0x138>)
 8000b4a:	785b      	ldrb	r3, [r3, #1]
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	4b24      	ldr	r3, [pc, #144]	@ (8000be0 <SPITxRx_writeIO+0x138>)
 8000b50:	78d9      	ldrb	r1, [r3, #3]
 8000b52:	4b24      	ldr	r3, [pc, #144]	@ (8000be4 <SPITxRx_writeIO+0x13c>)
 8000b54:	5499      	strb	r1, [r3, r2]
			a[1] = a[1]+1;
 8000b56:	4b22      	ldr	r3, [pc, #136]	@ (8000be0 <SPITxRx_writeIO+0x138>)
 8000b58:	785b      	ldrb	r3, [r3, #1]
 8000b5a:	3301      	adds	r3, #1
 8000b5c:	b2da      	uxtb	r2, r3
 8000b5e:	4b20      	ldr	r3, [pc, #128]	@ (8000be0 <SPITxRx_writeIO+0x138>)
 8000b60:	705a      	strb	r2, [r3, #1]
			if(a[1] >= num){
 8000b62:	4b1f      	ldr	r3, [pc, #124]	@ (8000be0 <SPITxRx_writeIO+0x138>)
 8000b64:	785a      	ldrb	r2, [r3, #1]
 8000b66:	4b20      	ldr	r3, [pc, #128]	@ (8000be8 <SPITxRx_writeIO+0x140>)
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	429a      	cmp	r2, r3
 8000b6c:	d30e      	bcc.n	8000b8c <SPITxRx_writeIO+0xe4>
				num += 1;
 8000b6e:	4b1e      	ldr	r3, [pc, #120]	@ (8000be8 <SPITxRx_writeIO+0x140>)
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	3301      	adds	r3, #1
 8000b74:	b2da      	uxtb	r2, r3
 8000b76:	4b1c      	ldr	r3, [pc, #112]	@ (8000be8 <SPITxRx_writeIO+0x140>)
 8000b78:	701a      	strb	r2, [r3, #0]
				SPITx[2] = 0b00000000;
 8000b7a:	4b17      	ldr	r3, [pc, #92]	@ (8000bd8 <SPITxRx_writeIO+0x130>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	709a      	strb	r2, [r3, #2]
				mode = 2;
 8000b80:	4b1a      	ldr	r3, [pc, #104]	@ (8000bec <SPITxRx_writeIO+0x144>)
 8000b82:	2202      	movs	r2, #2
 8000b84:	701a      	strb	r2, [r3, #0]
				a[1] = 0;
 8000b86:	4b16      	ldr	r3, [pc, #88]	@ (8000be0 <SPITxRx_writeIO+0x138>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	705a      	strb	r2, [r3, #1]
			}
			HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 3);
 8000b8c:	2303      	movs	r3, #3
 8000b8e:	4a18      	ldr	r2, [pc, #96]	@ (8000bf0 <SPITxRx_writeIO+0x148>)
 8000b90:	4911      	ldr	r1, [pc, #68]	@ (8000bd8 <SPITxRx_writeIO+0x130>)
 8000b92:	4818      	ldr	r0, [pc, #96]	@ (8000bf4 <SPITxRx_writeIO+0x14c>)
 8000b94:	f003 fd28 	bl	80045e8 <HAL_SPI_TransmitReceive_IT>
			LedOff = 0;
			HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 4);
		}


	}}
 8000b98:	e018      	b.n	8000bcc <SPITxRx_writeIO+0x124>
		else if(LedOff == 1){
 8000b9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000bd4 <SPITxRx_writeIO+0x12c>)
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	2b01      	cmp	r3, #1
 8000ba0:	d114      	bne.n	8000bcc <SPITxRx_writeIO+0x124>
			SPITx[0] = 0b01000000;
 8000ba2:	4b0d      	ldr	r3, [pc, #52]	@ (8000bd8 <SPITxRx_writeIO+0x130>)
 8000ba4:	2240      	movs	r2, #64	@ 0x40
 8000ba6:	701a      	strb	r2, [r3, #0]
			SPITx[1] = 0x15;
 8000ba8:	4b0b      	ldr	r3, [pc, #44]	@ (8000bd8 <SPITxRx_writeIO+0x130>)
 8000baa:	2215      	movs	r2, #21
 8000bac:	705a      	strb	r2, [r3, #1]
			SPITx[2] = 0b11111111;
 8000bae:	4b0a      	ldr	r3, [pc, #40]	@ (8000bd8 <SPITxRx_writeIO+0x130>)
 8000bb0:	22ff      	movs	r2, #255	@ 0xff
 8000bb2:	709a      	strb	r2, [r3, #2]
			SPITx[3] = 0;
 8000bb4:	4b08      	ldr	r3, [pc, #32]	@ (8000bd8 <SPITxRx_writeIO+0x130>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	70da      	strb	r2, [r3, #3]
			LedOff = 0;
 8000bba:	4b06      	ldr	r3, [pc, #24]	@ (8000bd4 <SPITxRx_writeIO+0x12c>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	701a      	strb	r2, [r3, #0]
			HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 4);
 8000bc0:	2304      	movs	r3, #4
 8000bc2:	4a0b      	ldr	r2, [pc, #44]	@ (8000bf0 <SPITxRx_writeIO+0x148>)
 8000bc4:	4904      	ldr	r1, [pc, #16]	@ (8000bd8 <SPITxRx_writeIO+0x130>)
 8000bc6:	480b      	ldr	r0, [pc, #44]	@ (8000bf4 <SPITxRx_writeIO+0x14c>)
 8000bc8:	f003 fd0e 	bl	80045e8 <HAL_SPI_TransmitReceive_IT>
	}}
 8000bcc:	bf00      	nop
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	48000c00 	.word	0x48000c00
 8000bd4:	20000227 	.word	0x20000227
 8000bd8:	200001fc 	.word	0x200001fc
 8000bdc:	20000226 	.word	0x20000226
 8000be0:	20000220 	.word	0x20000220
 8000be4:	20000208 	.word	0x20000208
 8000be8:	2000021f 	.word	0x2000021f
 8000bec:	20000206 	.word	0x20000206
 8000bf0:	200001f0 	.word	0x200001f0
 8000bf4:	2000018c 	.word	0x2000018c

08000bf8 <AnsCheck>:

void AnsCheck(){
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
	for(int i = 1; i<11;i++){
 8000bfe:	2301      	movs	r3, #1
 8000c00:	607b      	str	r3, [r7, #4]
 8000c02:	e017      	b.n	8000c34 <AnsCheck+0x3c>
		if(LightOrder[i]!=PushOrder[i]){
 8000c04:	4a10      	ldr	r2, [pc, #64]	@ (8000c48 <AnsCheck+0x50>)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	4413      	add	r3, r2
 8000c0a:	781a      	ldrb	r2, [r3, #0]
 8000c0c:	490f      	ldr	r1, [pc, #60]	@ (8000c4c <AnsCheck+0x54>)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	440b      	add	r3, r1
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	429a      	cmp	r2, r3
 8000c16:	d003      	beq.n	8000c20 <AnsCheck+0x28>
			AnsCorrect &= 0;
 8000c18:	4b0d      	ldr	r3, [pc, #52]	@ (8000c50 <AnsCheck+0x58>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	701a      	strb	r2, [r3, #0]
 8000c1e:	e006      	b.n	8000c2e <AnsCheck+0x36>
		}else{
			AnsCorrect &= 1;
 8000c20:	4b0b      	ldr	r3, [pc, #44]	@ (8000c50 <AnsCheck+0x58>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	f003 0301 	and.w	r3, r3, #1
 8000c28:	b2da      	uxtb	r2, r3
 8000c2a:	4b09      	ldr	r3, [pc, #36]	@ (8000c50 <AnsCheck+0x58>)
 8000c2c:	701a      	strb	r2, [r3, #0]
	for(int i = 1; i<11;i++){
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	3301      	adds	r3, #1
 8000c32:	607b      	str	r3, [r7, #4]
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	2b0a      	cmp	r3, #10
 8000c38:	dde4      	ble.n	8000c04 <AnsCheck+0xc>
		}
	}
}
 8000c3a:	bf00      	nop
 8000c3c:	bf00      	nop
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	20000208 	.word	0x20000208
 8000c4c:	20000214 	.word	0x20000214
 8000c50:	2000021e 	.word	0x2000021e

08000c54 <SPITxRx_Setup>:


//void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
//	if()
//}
void SPITxRx_Setup(){
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
	//CS pulse
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0); // CS Select
 8000c58:	2200      	movs	r2, #0
 8000c5a:	2104      	movs	r1, #4
 8000c5c:	4807      	ldr	r0, [pc, #28]	@ (8000c7c <SPITxRx_Setup+0x28>)
 8000c5e:	f002 fbab 	bl	80033b8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000c62:	2001      	movs	r0, #1
 8000c64:	f000 faca 	bl	80011fc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1); // CS deSelect
 8000c68:	2201      	movs	r2, #1
 8000c6a:	2104      	movs	r1, #4
 8000c6c:	4803      	ldr	r0, [pc, #12]	@ (8000c7c <SPITxRx_Setup+0x28>)
 8000c6e:	f002 fba3 	bl	80033b8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000c72:	2001      	movs	r0, #1
 8000c74:	f000 fac2 	bl	80011fc <HAL_Delay>
}
 8000c78:	bf00      	nop
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	48000c00 	.word	0x48000c00

08000c80 <IODIRB_Init>:

void IODIRB_Init(){
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_2)){
 8000c84:	2104      	movs	r1, #4
 8000c86:	480f      	ldr	r0, [pc, #60]	@ (8000cc4 <IODIRB_Init+0x44>)
 8000c88:	f002 fb7e 	bl	8003388 <HAL_GPIO_ReadPin>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d016      	beq.n	8000cc0 <IODIRB_Init+0x40>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0); // CS Select
 8000c92:	2200      	movs	r2, #0
 8000c94:	2104      	movs	r1, #4
 8000c96:	480b      	ldr	r0, [pc, #44]	@ (8000cc4 <IODIRB_Init+0x44>)
 8000c98:	f002 fb8e 	bl	80033b8 <HAL_GPIO_WritePin>
		SPITx[0] = 0b01000000;
 8000c9c:	4b0a      	ldr	r3, [pc, #40]	@ (8000cc8 <IODIRB_Init+0x48>)
 8000c9e:	2240      	movs	r2, #64	@ 0x40
 8000ca0:	701a      	strb	r2, [r3, #0]
		SPITx[1] = 0x01;
 8000ca2:	4b09      	ldr	r3, [pc, #36]	@ (8000cc8 <IODIRB_Init+0x48>)
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	705a      	strb	r2, [r3, #1]
		SPITx[2] = 0;
 8000ca8:	4b07      	ldr	r3, [pc, #28]	@ (8000cc8 <IODIRB_Init+0x48>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	709a      	strb	r2, [r3, #2]
		SPITx[3] = 0;
 8000cae:	4b06      	ldr	r3, [pc, #24]	@ (8000cc8 <IODIRB_Init+0x48>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	70da      	strb	r2, [r3, #3]
		HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 4);
 8000cb4:	2304      	movs	r3, #4
 8000cb6:	4a05      	ldr	r2, [pc, #20]	@ (8000ccc <IODIRB_Init+0x4c>)
 8000cb8:	4903      	ldr	r1, [pc, #12]	@ (8000cc8 <IODIRB_Init+0x48>)
 8000cba:	4805      	ldr	r0, [pc, #20]	@ (8000cd0 <IODIRB_Init+0x50>)
 8000cbc:	f003 fc94 	bl	80045e8 <HAL_SPI_TransmitReceive_IT>
}}
 8000cc0:	bf00      	nop
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	48000c00 	.word	0x48000c00
 8000cc8:	200001fc 	.word	0x200001fc
 8000ccc:	200001f0 	.word	0x200001f0
 8000cd0:	2000018c 	.word	0x2000018c

08000cd4 <IODIRA_Init>:

void IODIRA_Init(){
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_2)){
 8000cd8:	2104      	movs	r1, #4
 8000cda:	480f      	ldr	r0, [pc, #60]	@ (8000d18 <IODIRA_Init+0x44>)
 8000cdc:	f002 fb54 	bl	8003388 <HAL_GPIO_ReadPin>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d016      	beq.n	8000d14 <IODIRA_Init+0x40>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0); // CS Select
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	2104      	movs	r1, #4
 8000cea:	480b      	ldr	r0, [pc, #44]	@ (8000d18 <IODIRA_Init+0x44>)
 8000cec:	f002 fb64 	bl	80033b8 <HAL_GPIO_WritePin>
		SPITx[0] = 0b01000001;
 8000cf0:	4b0a      	ldr	r3, [pc, #40]	@ (8000d1c <IODIRA_Init+0x48>)
 8000cf2:	2241      	movs	r2, #65	@ 0x41
 8000cf4:	701a      	strb	r2, [r3, #0]
		SPITx[1] = 0x00;
 8000cf6:	4b09      	ldr	r3, [pc, #36]	@ (8000d1c <IODIRA_Init+0x48>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	705a      	strb	r2, [r3, #1]
		SPITx[2] = 0;
 8000cfc:	4b07      	ldr	r3, [pc, #28]	@ (8000d1c <IODIRA_Init+0x48>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	709a      	strb	r2, [r3, #2]
		SPITx[3] = 0;
 8000d02:	4b06      	ldr	r3, [pc, #24]	@ (8000d1c <IODIRA_Init+0x48>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	70da      	strb	r2, [r3, #3]
		HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 4);
 8000d08:	2304      	movs	r3, #4
 8000d0a:	4a05      	ldr	r2, [pc, #20]	@ (8000d20 <IODIRA_Init+0x4c>)
 8000d0c:	4903      	ldr	r1, [pc, #12]	@ (8000d1c <IODIRA_Init+0x48>)
 8000d0e:	4805      	ldr	r0, [pc, #20]	@ (8000d24 <IODIRA_Init+0x50>)
 8000d10:	f003 fc6a 	bl	80045e8 <HAL_SPI_TransmitReceive_IT>
}}
 8000d14:	bf00      	nop
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	48000c00 	.word	0x48000c00
 8000d1c:	200001fc 	.word	0x200001fc
 8000d20:	200001f0 	.word	0x200001f0
 8000d24:	2000018c 	.word	0x2000018c

08000d28 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1); //CS dnSelect
 8000d30:	2201      	movs	r2, #1
 8000d32:	2104      	movs	r1, #4
 8000d34:	4803      	ldr	r0, [pc, #12]	@ (8000d44 <HAL_SPI_TxRxCpltCallback+0x1c>)
 8000d36:	f002 fb3f 	bl	80033b8 <HAL_GPIO_WritePin>
}
 8000d3a:	bf00      	nop
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	48000c00 	.word	0x48000c00

08000d48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d4c:	b672      	cpsid	i
}
 8000d4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d50:	bf00      	nop
 8000d52:	e7fd      	b.n	8000d50 <Error_Handler+0x8>

08000d54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d5a:	4b0f      	ldr	r3, [pc, #60]	@ (8000d98 <HAL_MspInit+0x44>)
 8000d5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d5e:	4a0e      	ldr	r2, [pc, #56]	@ (8000d98 <HAL_MspInit+0x44>)
 8000d60:	f043 0301 	orr.w	r3, r3, #1
 8000d64:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d66:	4b0c      	ldr	r3, [pc, #48]	@ (8000d98 <HAL_MspInit+0x44>)
 8000d68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d6a:	f003 0301 	and.w	r3, r3, #1
 8000d6e:	607b      	str	r3, [r7, #4]
 8000d70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d72:	4b09      	ldr	r3, [pc, #36]	@ (8000d98 <HAL_MspInit+0x44>)
 8000d74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d76:	4a08      	ldr	r2, [pc, #32]	@ (8000d98 <HAL_MspInit+0x44>)
 8000d78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d7e:	4b06      	ldr	r3, [pc, #24]	@ (8000d98 <HAL_MspInit+0x44>)
 8000d80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d86:	603b      	str	r3, [r7, #0]
 8000d88:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000d8a:	f002 fbf5 	bl	8003578 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40021000 	.word	0x40021000

08000d9c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b09e      	sub	sp, #120	@ 0x78
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	605a      	str	r2, [r3, #4]
 8000dae:	609a      	str	r2, [r3, #8]
 8000db0:	60da      	str	r2, [r3, #12]
 8000db2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000db4:	f107 0310 	add.w	r3, r7, #16
 8000db8:	2254      	movs	r2, #84	@ 0x54
 8000dba:	2100      	movs	r1, #0
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f004 fefd 	bl	8005bbc <memset>
  if(hadc->Instance==ADC1)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000dca:	d167      	bne.n	8000e9c <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000dcc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000dd0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000dd2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000dd6:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dd8:	f107 0310 	add.w	r3, r7, #16
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f003 f909 	bl	8003ff4 <HAL_RCCEx_PeriphCLKConfig>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000de8:	f7ff ffae 	bl	8000d48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000dec:	4b2d      	ldr	r3, [pc, #180]	@ (8000ea4 <HAL_ADC_MspInit+0x108>)
 8000dee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000df0:	4a2c      	ldr	r2, [pc, #176]	@ (8000ea4 <HAL_ADC_MspInit+0x108>)
 8000df2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000df6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000df8:	4b2a      	ldr	r3, [pc, #168]	@ (8000ea4 <HAL_ADC_MspInit+0x108>)
 8000dfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dfc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e00:	60fb      	str	r3, [r7, #12]
 8000e02:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e04:	4b27      	ldr	r3, [pc, #156]	@ (8000ea4 <HAL_ADC_MspInit+0x108>)
 8000e06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e08:	4a26      	ldr	r2, [pc, #152]	@ (8000ea4 <HAL_ADC_MspInit+0x108>)
 8000e0a:	f043 0301 	orr.w	r3, r3, #1
 8000e0e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e10:	4b24      	ldr	r3, [pc, #144]	@ (8000ea4 <HAL_ADC_MspInit+0x108>)
 8000e12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e14:	f003 0301 	and.w	r3, r3, #1
 8000e18:	60bb      	str	r3, [r7, #8]
 8000e1a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e20:	2303      	movs	r3, #3
 8000e22:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e24:	2300      	movs	r3, #0
 8000e26:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e28:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e32:	f002 f927 	bl	8003084 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000e36:	4b1c      	ldr	r3, [pc, #112]	@ (8000ea8 <HAL_ADC_MspInit+0x10c>)
 8000e38:	4a1c      	ldr	r2, [pc, #112]	@ (8000eac <HAL_ADC_MspInit+0x110>)
 8000e3a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000e3c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ea8 <HAL_ADC_MspInit+0x10c>)
 8000e3e:	2205      	movs	r2, #5
 8000e40:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e42:	4b19      	ldr	r3, [pc, #100]	@ (8000ea8 <HAL_ADC_MspInit+0x10c>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e48:	4b17      	ldr	r3, [pc, #92]	@ (8000ea8 <HAL_ADC_MspInit+0x10c>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e4e:	4b16      	ldr	r3, [pc, #88]	@ (8000ea8 <HAL_ADC_MspInit+0x10c>)
 8000e50:	2280      	movs	r2, #128	@ 0x80
 8000e52:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e54:	4b14      	ldr	r3, [pc, #80]	@ (8000ea8 <HAL_ADC_MspInit+0x10c>)
 8000e56:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e5a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e5c:	4b12      	ldr	r3, [pc, #72]	@ (8000ea8 <HAL_ADC_MspInit+0x10c>)
 8000e5e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e62:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000e64:	4b10      	ldr	r3, [pc, #64]	@ (8000ea8 <HAL_ADC_MspInit+0x10c>)
 8000e66:	2220      	movs	r2, #32
 8000e68:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000e6a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ea8 <HAL_ADC_MspInit+0x10c>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e70:	480d      	ldr	r0, [pc, #52]	@ (8000ea8 <HAL_ADC_MspInit+0x10c>)
 8000e72:	f001 fee7 	bl	8002c44 <HAL_DMA_Init>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8000e7c:	f7ff ff64 	bl	8000d48 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	4a09      	ldr	r2, [pc, #36]	@ (8000ea8 <HAL_ADC_MspInit+0x10c>)
 8000e84:	655a      	str	r2, [r3, #84]	@ 0x54
 8000e86:	4a08      	ldr	r2, [pc, #32]	@ (8000ea8 <HAL_ADC_MspInit+0x10c>)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	2100      	movs	r1, #0
 8000e90:	2012      	movs	r0, #18
 8000e92:	f001 fea2 	bl	8002bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000e96:	2012      	movs	r0, #18
 8000e98:	f001 feb9 	bl	8002c0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e9c:	bf00      	nop
 8000e9e:	3778      	adds	r7, #120	@ 0x78
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	40021000 	.word	0x40021000
 8000ea8:	20000098 	.word	0x20000098
 8000eac:	40020008 	.word	0x40020008

08000eb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b09e      	sub	sp, #120	@ 0x78
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
 8000ec6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ec8:	f107 0310 	add.w	r3, r7, #16
 8000ecc:	2254      	movs	r2, #84	@ 0x54
 8000ece:	2100      	movs	r1, #0
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f004 fe73 	bl	8005bbc <memset>
  if(huart->Instance==LPUART1)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a1f      	ldr	r2, [pc, #124]	@ (8000f58 <HAL_UART_MspInit+0xa8>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d136      	bne.n	8000f4e <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000ee0:	2320      	movs	r3, #32
 8000ee2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ee8:	f107 0310 	add.w	r3, r7, #16
 8000eec:	4618      	mov	r0, r3
 8000eee:	f003 f881 	bl	8003ff4 <HAL_RCCEx_PeriphCLKConfig>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ef8:	f7ff ff26 	bl	8000d48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000efc:	4b17      	ldr	r3, [pc, #92]	@ (8000f5c <HAL_UART_MspInit+0xac>)
 8000efe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000f00:	4a16      	ldr	r2, [pc, #88]	@ (8000f5c <HAL_UART_MspInit+0xac>)
 8000f02:	f043 0301 	orr.w	r3, r3, #1
 8000f06:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000f08:	4b14      	ldr	r3, [pc, #80]	@ (8000f5c <HAL_UART_MspInit+0xac>)
 8000f0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000f0c:	f003 0301 	and.w	r3, r3, #1
 8000f10:	60fb      	str	r3, [r7, #12]
 8000f12:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f14:	4b11      	ldr	r3, [pc, #68]	@ (8000f5c <HAL_UART_MspInit+0xac>)
 8000f16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f18:	4a10      	ldr	r2, [pc, #64]	@ (8000f5c <HAL_UART_MspInit+0xac>)
 8000f1a:	f043 0301 	orr.w	r3, r3, #1
 8000f1e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f20:	4b0e      	ldr	r3, [pc, #56]	@ (8000f5c <HAL_UART_MspInit+0xac>)
 8000f22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f24:	f003 0301 	and.w	r3, r3, #1
 8000f28:	60bb      	str	r3, [r7, #8]
 8000f2a:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000f2c:	230c      	movs	r3, #12
 8000f2e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f30:	2302      	movs	r3, #2
 8000f32:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	2300      	movs	r3, #0
 8000f36:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000f3c:	230c      	movs	r3, #12
 8000f3e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f40:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000f44:	4619      	mov	r1, r3
 8000f46:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f4a:	f002 f89b 	bl	8003084 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000f4e:	bf00      	nop
 8000f50:	3778      	adds	r7, #120	@ 0x78
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40008000 	.word	0x40008000
 8000f5c:	40021000 	.word	0x40021000

08000f60 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b08a      	sub	sp, #40	@ 0x28
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f68:	f107 0314 	add.w	r3, r7, #20
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
 8000f76:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a1b      	ldr	r2, [pc, #108]	@ (8000fec <HAL_SPI_MspInit+0x8c>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d130      	bne.n	8000fe4 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000f82:	4b1b      	ldr	r3, [pc, #108]	@ (8000ff0 <HAL_SPI_MspInit+0x90>)
 8000f84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f86:	4a1a      	ldr	r2, [pc, #104]	@ (8000ff0 <HAL_SPI_MspInit+0x90>)
 8000f88:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000f8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f8e:	4b18      	ldr	r3, [pc, #96]	@ (8000ff0 <HAL_SPI_MspInit+0x90>)
 8000f90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f92:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000f96:	613b      	str	r3, [r7, #16]
 8000f98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f9a:	4b15      	ldr	r3, [pc, #84]	@ (8000ff0 <HAL_SPI_MspInit+0x90>)
 8000f9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f9e:	4a14      	ldr	r2, [pc, #80]	@ (8000ff0 <HAL_SPI_MspInit+0x90>)
 8000fa0:	f043 0304 	orr.w	r3, r3, #4
 8000fa4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fa6:	4b12      	ldr	r3, [pc, #72]	@ (8000ff0 <HAL_SPI_MspInit+0x90>)
 8000fa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000faa:	f003 0304 	and.w	r3, r3, #4
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000fb2:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000fb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000fc4:	2306      	movs	r3, #6
 8000fc6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fc8:	f107 0314 	add.w	r3, r7, #20
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4809      	ldr	r0, [pc, #36]	@ (8000ff4 <HAL_SPI_MspInit+0x94>)
 8000fd0:	f002 f858 	bl	8003084 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	2033      	movs	r0, #51	@ 0x33
 8000fda:	f001 fdfe 	bl	8002bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8000fde:	2033      	movs	r0, #51	@ 0x33
 8000fe0:	f001 fe15 	bl	8002c0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000fe4:	bf00      	nop
 8000fe6:	3728      	adds	r7, #40	@ 0x28
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40003c00 	.word	0x40003c00
 8000ff0:	40021000 	.word	0x40021000
 8000ff4:	48000800 	.word	0x48000800

08000ff8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ffc:	bf00      	nop
 8000ffe:	e7fd      	b.n	8000ffc <NMI_Handler+0x4>

08001000 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001004:	bf00      	nop
 8001006:	e7fd      	b.n	8001004 <HardFault_Handler+0x4>

08001008 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800100c:	bf00      	nop
 800100e:	e7fd      	b.n	800100c <MemManage_Handler+0x4>

08001010 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001014:	bf00      	nop
 8001016:	e7fd      	b.n	8001014 <BusFault_Handler+0x4>

08001018 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800101c:	bf00      	nop
 800101e:	e7fd      	b.n	800101c <UsageFault_Handler+0x4>

08001020 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001024:	bf00      	nop
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr

0800102e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800102e:	b480      	push	{r7}
 8001030:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001032:	bf00      	nop
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr

0800104a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800104e:	f000 f8b7 	bl	80011c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
	...

08001058 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800105c:	4802      	ldr	r0, [pc, #8]	@ (8001068 <DMA1_Channel1_IRQHandler+0x10>)
 800105e:	f001 ff00 	bl	8002e62 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	20000098 	.word	0x20000098

0800106c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001070:	4802      	ldr	r0, [pc, #8]	@ (800107c <ADC1_2_IRQHandler+0x10>)
 8001072:	f000 fcb9 	bl	80019e8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	2000002c 	.word	0x2000002c

08001080 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001084:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001088:	f002 f9ae 	bl	80033e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800108c:	bf00      	nop
 800108e:	bd80      	pop	{r7, pc}

08001090 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8001094:	4802      	ldr	r0, [pc, #8]	@ (80010a0 <SPI3_IRQHandler+0x10>)
 8001096:	f003 fb55 	bl	8004744 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	2000018c 	.word	0x2000018c

080010a4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80010a8:	4b06      	ldr	r3, [pc, #24]	@ (80010c4 <SystemInit+0x20>)
 80010aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010ae:	4a05      	ldr	r2, [pc, #20]	@ (80010c4 <SystemInit+0x20>)
 80010b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010b8:	bf00      	nop
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	e000ed00 	.word	0xe000ed00

080010c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010c8:	480d      	ldr	r0, [pc, #52]	@ (8001100 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010ca:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010cc:	f7ff ffea 	bl	80010a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010d0:	480c      	ldr	r0, [pc, #48]	@ (8001104 <LoopForever+0x6>)
  ldr r1, =_edata
 80010d2:	490d      	ldr	r1, [pc, #52]	@ (8001108 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010d4:	4a0d      	ldr	r2, [pc, #52]	@ (800110c <LoopForever+0xe>)
  movs r3, #0
 80010d6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80010d8:	e002      	b.n	80010e0 <LoopCopyDataInit>

080010da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010de:	3304      	adds	r3, #4

080010e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010e4:	d3f9      	bcc.n	80010da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001110 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010e8:	4c0a      	ldr	r4, [pc, #40]	@ (8001114 <LoopForever+0x16>)
  movs r3, #0
 80010ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010ec:	e001      	b.n	80010f2 <LoopFillZerobss>

080010ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010f0:	3204      	adds	r2, #4

080010f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010f4:	d3fb      	bcc.n	80010ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010f6:	f004 fd69 	bl	8005bcc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010fa:	f7ff fa05 	bl	8000508 <main>

080010fe <LoopForever>:

LoopForever:
    b LoopForever
 80010fe:	e7fe      	b.n	80010fe <LoopForever>
  ldr   r0, =_estack
 8001100:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001104:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001108:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800110c:	08005c7c 	.word	0x08005c7c
  ldr r2, =_sbss
 8001110:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001114:	20000234 	.word	0x20000234

08001118 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001118:	e7fe      	b.n	8001118 <ADC3_IRQHandler>

0800111a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800111a:	b580      	push	{r7, lr}
 800111c:	b082      	sub	sp, #8
 800111e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001120:	2300      	movs	r3, #0
 8001122:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001124:	2003      	movs	r0, #3
 8001126:	f001 fd4d 	bl	8002bc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800112a:	2000      	movs	r0, #0
 800112c:	f000 f80e 	bl	800114c <HAL_InitTick>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d002      	beq.n	800113c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	71fb      	strb	r3, [r7, #7]
 800113a:	e001      	b.n	8001140 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800113c:	f7ff fe0a 	bl	8000d54 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001140:	79fb      	ldrb	r3, [r7, #7]

}
 8001142:	4618      	mov	r0, r3
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
	...

0800114c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001154:	2300      	movs	r3, #0
 8001156:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001158:	4b16      	ldr	r3, [pc, #88]	@ (80011b4 <HAL_InitTick+0x68>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d022      	beq.n	80011a6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001160:	4b15      	ldr	r3, [pc, #84]	@ (80011b8 <HAL_InitTick+0x6c>)
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	4b13      	ldr	r3, [pc, #76]	@ (80011b4 <HAL_InitTick+0x68>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800116c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001170:	fbb2 f3f3 	udiv	r3, r2, r3
 8001174:	4618      	mov	r0, r3
 8001176:	f001 fd58 	bl	8002c2a <HAL_SYSTICK_Config>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d10f      	bne.n	80011a0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2b0f      	cmp	r3, #15
 8001184:	d809      	bhi.n	800119a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001186:	2200      	movs	r2, #0
 8001188:	6879      	ldr	r1, [r7, #4]
 800118a:	f04f 30ff 	mov.w	r0, #4294967295
 800118e:	f001 fd24 	bl	8002bda <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001192:	4a0a      	ldr	r2, [pc, #40]	@ (80011bc <HAL_InitTick+0x70>)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6013      	str	r3, [r2, #0]
 8001198:	e007      	b.n	80011aa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	73fb      	strb	r3, [r7, #15]
 800119e:	e004      	b.n	80011aa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011a0:	2301      	movs	r3, #1
 80011a2:	73fb      	strb	r3, [r7, #15]
 80011a4:	e001      	b.n	80011aa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3710      	adds	r7, #16
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	20000008 	.word	0x20000008
 80011b8:	20000000 	.word	0x20000000
 80011bc:	20000004 	.word	0x20000004

080011c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011c4:	4b05      	ldr	r3, [pc, #20]	@ (80011dc <HAL_IncTick+0x1c>)
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	4b05      	ldr	r3, [pc, #20]	@ (80011e0 <HAL_IncTick+0x20>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4413      	add	r3, r2
 80011ce:	4a03      	ldr	r2, [pc, #12]	@ (80011dc <HAL_IncTick+0x1c>)
 80011d0:	6013      	str	r3, [r2, #0]
}
 80011d2:	bf00      	nop
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr
 80011dc:	20000230 	.word	0x20000230
 80011e0:	20000008 	.word	0x20000008

080011e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  return uwTick;
 80011e8:	4b03      	ldr	r3, [pc, #12]	@ (80011f8 <HAL_GetTick+0x14>)
 80011ea:	681b      	ldr	r3, [r3, #0]
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	20000230 	.word	0x20000230

080011fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001204:	f7ff ffee 	bl	80011e4 <HAL_GetTick>
 8001208:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001214:	d004      	beq.n	8001220 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001216:	4b09      	ldr	r3, [pc, #36]	@ (800123c <HAL_Delay+0x40>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	68fa      	ldr	r2, [r7, #12]
 800121c:	4413      	add	r3, r2
 800121e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001220:	bf00      	nop
 8001222:	f7ff ffdf 	bl	80011e4 <HAL_GetTick>
 8001226:	4602      	mov	r2, r0
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	1ad3      	subs	r3, r2, r3
 800122c:	68fa      	ldr	r2, [r7, #12]
 800122e:	429a      	cmp	r2, r3
 8001230:	d8f7      	bhi.n	8001222 <HAL_Delay+0x26>
  {
  }
}
 8001232:	bf00      	nop
 8001234:	bf00      	nop
 8001236:	3710      	adds	r7, #16
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	20000008 	.word	0x20000008

08001240 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	431a      	orrs	r2, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	609a      	str	r2, [r3, #8]
}
 800125a:	bf00      	nop
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr

08001266 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001266:	b480      	push	{r7}
 8001268:	b083      	sub	sp, #12
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
 800126e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	431a      	orrs	r2, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	609a      	str	r2, [r3, #8]
}
 8001280:	bf00      	nop
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800129c:	4618      	mov	r0, r3
 800129e:	370c      	adds	r7, #12
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr

080012a8 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b087      	sub	sp, #28
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	60f8      	str	r0, [r7, #12]
 80012b0:	60b9      	str	r1, [r7, #8]
 80012b2:	607a      	str	r2, [r7, #4]
 80012b4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	3360      	adds	r3, #96	@ 0x60
 80012ba:	461a      	mov	r2, r3
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	4413      	add	r3, r2
 80012c2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	4b08      	ldr	r3, [pc, #32]	@ (80012ec <LL_ADC_SetOffset+0x44>)
 80012ca:	4013      	ands	r3, r2
 80012cc:	687a      	ldr	r2, [r7, #4]
 80012ce:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80012d2:	683a      	ldr	r2, [r7, #0]
 80012d4:	430a      	orrs	r2, r1
 80012d6:	4313      	orrs	r3, r2
 80012d8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80012e0:	bf00      	nop
 80012e2:	371c      	adds	r7, #28
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr
 80012ec:	03fff000 	.word	0x03fff000

080012f0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b085      	sub	sp, #20
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	3360      	adds	r3, #96	@ 0x60
 80012fe:	461a      	mov	r2, r3
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	4413      	add	r3, r2
 8001306:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001310:	4618      	mov	r0, r3
 8001312:	3714      	adds	r7, #20
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800131c:	b480      	push	{r7}
 800131e:	b087      	sub	sp, #28
 8001320:	af00      	add	r7, sp, #0
 8001322:	60f8      	str	r0, [r7, #12]
 8001324:	60b9      	str	r1, [r7, #8]
 8001326:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	3360      	adds	r3, #96	@ 0x60
 800132c:	461a      	mov	r2, r3
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	4413      	add	r3, r2
 8001334:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	431a      	orrs	r2, r3
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001346:	bf00      	nop
 8001348:	371c      	adds	r7, #28
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr

08001352 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001352:	b480      	push	{r7}
 8001354:	b087      	sub	sp, #28
 8001356:	af00      	add	r7, sp, #0
 8001358:	60f8      	str	r0, [r7, #12]
 800135a:	60b9      	str	r1, [r7, #8]
 800135c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	3360      	adds	r3, #96	@ 0x60
 8001362:	461a      	mov	r2, r3
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	4413      	add	r3, r2
 800136a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	431a      	orrs	r2, r3
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800137c:	bf00      	nop
 800137e:	371c      	adds	r7, #28
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001388:	b480      	push	{r7}
 800138a:	b087      	sub	sp, #28
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	3360      	adds	r3, #96	@ 0x60
 8001398:	461a      	mov	r2, r3
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	4413      	add	r3, r2
 80013a0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	431a      	orrs	r2, r3
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80013b2:	bf00      	nop
 80013b4:	371c      	adds	r7, #28
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr

080013be <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80013be:	b480      	push	{r7}
 80013c0:	b083      	sub	sp, #12
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	6078      	str	r0, [r7, #4]
 80013c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	695b      	ldr	r3, [r3, #20]
 80013cc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	431a      	orrs	r2, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	615a      	str	r2, [r3, #20]
}
 80013d8:	bf00      	nop
 80013da:	370c      	adds	r7, #12
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr

080013e4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d101      	bne.n	80013fc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80013f8:	2301      	movs	r3, #1
 80013fa:	e000      	b.n	80013fe <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80013fc:	2300      	movs	r3, #0
}
 80013fe:	4618      	mov	r0, r3
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr

0800140a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800140a:	b480      	push	{r7}
 800140c:	b087      	sub	sp, #28
 800140e:	af00      	add	r7, sp, #0
 8001410:	60f8      	str	r0, [r7, #12]
 8001412:	60b9      	str	r1, [r7, #8]
 8001414:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	3330      	adds	r3, #48	@ 0x30
 800141a:	461a      	mov	r2, r3
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	0a1b      	lsrs	r3, r3, #8
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	f003 030c 	and.w	r3, r3, #12
 8001426:	4413      	add	r3, r2
 8001428:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	68bb      	ldr	r3, [r7, #8]
 8001430:	f003 031f 	and.w	r3, r3, #31
 8001434:	211f      	movs	r1, #31
 8001436:	fa01 f303 	lsl.w	r3, r1, r3
 800143a:	43db      	mvns	r3, r3
 800143c:	401a      	ands	r2, r3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	0e9b      	lsrs	r3, r3, #26
 8001442:	f003 011f 	and.w	r1, r3, #31
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	f003 031f 	and.w	r3, r3, #31
 800144c:	fa01 f303 	lsl.w	r3, r1, r3
 8001450:	431a      	orrs	r2, r3
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001456:	bf00      	nop
 8001458:	371c      	adds	r7, #28
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr

08001462 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001462:	b480      	push	{r7}
 8001464:	b083      	sub	sp, #12
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800146e:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8001472:	2b00      	cmp	r3, #0
 8001474:	d101      	bne.n	800147a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001476:	2301      	movs	r3, #1
 8001478:	e000      	b.n	800147c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800147a:	2300      	movs	r3, #0
}
 800147c:	4618      	mov	r0, r3
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001488:	b480      	push	{r7}
 800148a:	b087      	sub	sp, #28
 800148c:	af00      	add	r7, sp, #0
 800148e:	60f8      	str	r0, [r7, #12]
 8001490:	60b9      	str	r1, [r7, #8]
 8001492:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	3314      	adds	r3, #20
 8001498:	461a      	mov	r2, r3
 800149a:	68bb      	ldr	r3, [r7, #8]
 800149c:	0e5b      	lsrs	r3, r3, #25
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	f003 0304 	and.w	r3, r3, #4
 80014a4:	4413      	add	r3, r2
 80014a6:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	0d1b      	lsrs	r3, r3, #20
 80014b0:	f003 031f 	and.w	r3, r3, #31
 80014b4:	2107      	movs	r1, #7
 80014b6:	fa01 f303 	lsl.w	r3, r1, r3
 80014ba:	43db      	mvns	r3, r3
 80014bc:	401a      	ands	r2, r3
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	0d1b      	lsrs	r3, r3, #20
 80014c2:	f003 031f 	and.w	r3, r3, #31
 80014c6:	6879      	ldr	r1, [r7, #4]
 80014c8:	fa01 f303 	lsl.w	r3, r1, r3
 80014cc:	431a      	orrs	r2, r3
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80014d2:	bf00      	nop
 80014d4:	371c      	adds	r7, #28
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
	...

080014e0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b085      	sub	sp, #20
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	60b9      	str	r1, [r7, #8]
 80014ea:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014f8:	43db      	mvns	r3, r3
 80014fa:	401a      	ands	r2, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f003 0318 	and.w	r3, r3, #24
 8001502:	4908      	ldr	r1, [pc, #32]	@ (8001524 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001504:	40d9      	lsrs	r1, r3
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	400b      	ands	r3, r1
 800150a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800150e:	431a      	orrs	r2, r3
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001516:	bf00      	nop
 8001518:	3714      	adds	r7, #20
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	0007ffff 	.word	0x0007ffff

08001528 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	f003 031f 	and.w	r3, r3, #31
}
 8001538:	4618      	mov	r0, r3
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001554:	4618      	mov	r0, r3
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001570:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001574:	687a      	ldr	r2, [r7, #4]
 8001576:	6093      	str	r3, [r2, #8]
}
 8001578:	bf00      	nop
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001594:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001598:	d101      	bne.n	800159e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800159a:	2301      	movs	r3, #1
 800159c:	e000      	b.n	80015a0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800159e:	2300      	movs	r3, #0
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80015bc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80015c0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80015c8:	bf00      	nop
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80015e8:	d101      	bne.n	80015ee <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80015ea:	2301      	movs	r3, #1
 80015ec:	e000      	b.n	80015f0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80015ee:	2300      	movs	r3, #0
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	370c      	adds	r7, #12
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	f003 0301 	and.w	r3, r3, #1
 800160c:	2b01      	cmp	r3, #1
 800160e:	d101      	bne.n	8001614 <LL_ADC_IsEnabled+0x18>
 8001610:	2301      	movs	r3, #1
 8001612:	e000      	b.n	8001616 <LL_ADC_IsEnabled+0x1a>
 8001614:	2300      	movs	r3, #0
}
 8001616:	4618      	mov	r0, r3
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr

08001622 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001622:	b480      	push	{r7}
 8001624:	b083      	sub	sp, #12
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	f003 0304 	and.w	r3, r3, #4
 8001632:	2b04      	cmp	r3, #4
 8001634:	d101      	bne.n	800163a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001636:	2301      	movs	r3, #1
 8001638:	e000      	b.n	800163c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800163a:	2300      	movs	r3, #0
}
 800163c:	4618      	mov	r0, r3
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	f003 0308 	and.w	r3, r3, #8
 8001658:	2b08      	cmp	r3, #8
 800165a:	d101      	bne.n	8001660 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800165c:	2301      	movs	r3, #1
 800165e:	e000      	b.n	8001662 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001660:	2300      	movs	r3, #0
}
 8001662:	4618      	mov	r0, r3
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
	...

08001670 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001670:	b590      	push	{r4, r7, lr}
 8001672:	b089      	sub	sp, #36	@ 0x24
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001678:	2300      	movs	r3, #0
 800167a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800167c:	2300      	movs	r3, #0
 800167e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d101      	bne.n	800168a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e1a9      	b.n	80019de <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	695b      	ldr	r3, [r3, #20]
 800168e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001694:	2b00      	cmp	r3, #0
 8001696:	d109      	bne.n	80016ac <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f7ff fb7f 	bl	8000d9c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2200      	movs	r2, #0
 80016a2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2200      	movs	r2, #0
 80016a8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7ff ff67 	bl	8001584 <LL_ADC_IsDeepPowerDownEnabled>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d004      	beq.n	80016c6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff ff4d 	bl	8001560 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7ff ff82 	bl	80015d4 <LL_ADC_IsInternalRegulatorEnabled>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d115      	bne.n	8001702 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4618      	mov	r0, r3
 80016dc:	f7ff ff66 	bl	80015ac <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80016e0:	4b9c      	ldr	r3, [pc, #624]	@ (8001954 <HAL_ADC_Init+0x2e4>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	099b      	lsrs	r3, r3, #6
 80016e6:	4a9c      	ldr	r2, [pc, #624]	@ (8001958 <HAL_ADC_Init+0x2e8>)
 80016e8:	fba2 2303 	umull	r2, r3, r2, r3
 80016ec:	099b      	lsrs	r3, r3, #6
 80016ee:	3301      	adds	r3, #1
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80016f4:	e002      	b.n	80016fc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	3b01      	subs	r3, #1
 80016fa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d1f9      	bne.n	80016f6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4618      	mov	r0, r3
 8001708:	f7ff ff64 	bl	80015d4 <LL_ADC_IsInternalRegulatorEnabled>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d10d      	bne.n	800172e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001716:	f043 0210 	orr.w	r2, r3, #16
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001722:	f043 0201 	orr.w	r2, r3, #1
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4618      	mov	r0, r3
 8001734:	f7ff ff75 	bl	8001622 <LL_ADC_REG_IsConversionOngoing>
 8001738:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800173e:	f003 0310 	and.w	r3, r3, #16
 8001742:	2b00      	cmp	r3, #0
 8001744:	f040 8142 	bne.w	80019cc <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	2b00      	cmp	r3, #0
 800174c:	f040 813e 	bne.w	80019cc <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001754:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001758:	f043 0202 	orr.w	r2, r3, #2
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff ff49 	bl	80015fc <LL_ADC_IsEnabled>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d141      	bne.n	80017f4 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001778:	d004      	beq.n	8001784 <HAL_ADC_Init+0x114>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a77      	ldr	r2, [pc, #476]	@ (800195c <HAL_ADC_Init+0x2ec>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d10f      	bne.n	80017a4 <HAL_ADC_Init+0x134>
 8001784:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001788:	f7ff ff38 	bl	80015fc <LL_ADC_IsEnabled>
 800178c:	4604      	mov	r4, r0
 800178e:	4873      	ldr	r0, [pc, #460]	@ (800195c <HAL_ADC_Init+0x2ec>)
 8001790:	f7ff ff34 	bl	80015fc <LL_ADC_IsEnabled>
 8001794:	4603      	mov	r3, r0
 8001796:	4323      	orrs	r3, r4
 8001798:	2b00      	cmp	r3, #0
 800179a:	bf0c      	ite	eq
 800179c:	2301      	moveq	r3, #1
 800179e:	2300      	movne	r3, #0
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	e012      	b.n	80017ca <HAL_ADC_Init+0x15a>
 80017a4:	486e      	ldr	r0, [pc, #440]	@ (8001960 <HAL_ADC_Init+0x2f0>)
 80017a6:	f7ff ff29 	bl	80015fc <LL_ADC_IsEnabled>
 80017aa:	4604      	mov	r4, r0
 80017ac:	486d      	ldr	r0, [pc, #436]	@ (8001964 <HAL_ADC_Init+0x2f4>)
 80017ae:	f7ff ff25 	bl	80015fc <LL_ADC_IsEnabled>
 80017b2:	4603      	mov	r3, r0
 80017b4:	431c      	orrs	r4, r3
 80017b6:	486c      	ldr	r0, [pc, #432]	@ (8001968 <HAL_ADC_Init+0x2f8>)
 80017b8:	f7ff ff20 	bl	80015fc <LL_ADC_IsEnabled>
 80017bc:	4603      	mov	r3, r0
 80017be:	4323      	orrs	r3, r4
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	bf0c      	ite	eq
 80017c4:	2301      	moveq	r3, #1
 80017c6:	2300      	movne	r3, #0
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d012      	beq.n	80017f4 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80017d6:	d004      	beq.n	80017e2 <HAL_ADC_Init+0x172>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a5f      	ldr	r2, [pc, #380]	@ (800195c <HAL_ADC_Init+0x2ec>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d101      	bne.n	80017e6 <HAL_ADC_Init+0x176>
 80017e2:	4a62      	ldr	r2, [pc, #392]	@ (800196c <HAL_ADC_Init+0x2fc>)
 80017e4:	e000      	b.n	80017e8 <HAL_ADC_Init+0x178>
 80017e6:	4a62      	ldr	r2, [pc, #392]	@ (8001970 <HAL_ADC_Init+0x300>)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	4619      	mov	r1, r3
 80017ee:	4610      	mov	r0, r2
 80017f0:	f7ff fd26 	bl	8001240 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	7f5b      	ldrb	r3, [r3, #29]
 80017f8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80017fe:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001804:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800180a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001812:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001814:	4313      	orrs	r3, r2
 8001816:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800181e:	2b01      	cmp	r3, #1
 8001820:	d106      	bne.n	8001830 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001826:	3b01      	subs	r3, #1
 8001828:	045b      	lsls	r3, r3, #17
 800182a:	69ba      	ldr	r2, [r7, #24]
 800182c:	4313      	orrs	r3, r2
 800182e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001834:	2b00      	cmp	r3, #0
 8001836:	d009      	beq.n	800184c <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800183c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001844:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001846:	69ba      	ldr	r2, [r7, #24]
 8001848:	4313      	orrs	r3, r2
 800184a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	68da      	ldr	r2, [r3, #12]
 8001852:	4b48      	ldr	r3, [pc, #288]	@ (8001974 <HAL_ADC_Init+0x304>)
 8001854:	4013      	ands	r3, r2
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	6812      	ldr	r2, [r2, #0]
 800185a:	69b9      	ldr	r1, [r7, #24]
 800185c:	430b      	orrs	r3, r1
 800185e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	691b      	ldr	r3, [r3, #16]
 8001866:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	430a      	orrs	r2, r1
 8001874:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4618      	mov	r0, r3
 800187c:	f7ff fee4 	bl	8001648 <LL_ADC_INJ_IsConversionOngoing>
 8001880:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d17f      	bne.n	8001988 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d17c      	bne.n	8001988 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001892:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800189a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800189c:	4313      	orrs	r3, r2
 800189e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	68db      	ldr	r3, [r3, #12]
 80018a6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80018aa:	f023 0302 	bic.w	r3, r3, #2
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	6812      	ldr	r2, [r2, #0]
 80018b2:	69b9      	ldr	r1, [r7, #24]
 80018b4:	430b      	orrs	r3, r1
 80018b6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	691b      	ldr	r3, [r3, #16]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d017      	beq.n	80018f0 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	691a      	ldr	r2, [r3, #16]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80018ce:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80018d8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80018dc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80018e0:	687a      	ldr	r2, [r7, #4]
 80018e2:	6911      	ldr	r1, [r2, #16]
 80018e4:	687a      	ldr	r2, [r7, #4]
 80018e6:	6812      	ldr	r2, [r2, #0]
 80018e8:	430b      	orrs	r3, r1
 80018ea:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80018ee:	e013      	b.n	8001918 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	691a      	ldr	r2, [r3, #16]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80018fe:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001908:	687a      	ldr	r2, [r7, #4]
 800190a:	6812      	ldr	r2, [r2, #0]
 800190c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001910:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001914:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800191e:	2b01      	cmp	r3, #1
 8001920:	d12a      	bne.n	8001978 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	691b      	ldr	r3, [r3, #16]
 8001928:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800192c:	f023 0304 	bic.w	r3, r3, #4
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001934:	687a      	ldr	r2, [r7, #4]
 8001936:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001938:	4311      	orrs	r1, r2
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800193e:	4311      	orrs	r1, r2
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001944:	430a      	orrs	r2, r1
 8001946:	431a      	orrs	r2, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f042 0201 	orr.w	r2, r2, #1
 8001950:	611a      	str	r2, [r3, #16]
 8001952:	e019      	b.n	8001988 <HAL_ADC_Init+0x318>
 8001954:	20000000 	.word	0x20000000
 8001958:	053e2d63 	.word	0x053e2d63
 800195c:	50000100 	.word	0x50000100
 8001960:	50000400 	.word	0x50000400
 8001964:	50000500 	.word	0x50000500
 8001968:	50000600 	.word	0x50000600
 800196c:	50000300 	.word	0x50000300
 8001970:	50000700 	.word	0x50000700
 8001974:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	691a      	ldr	r2, [r3, #16]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f022 0201 	bic.w	r2, r2, #1
 8001986:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	695b      	ldr	r3, [r3, #20]
 800198c:	2b01      	cmp	r3, #1
 800198e:	d10c      	bne.n	80019aa <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001996:	f023 010f 	bic.w	r1, r3, #15
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6a1b      	ldr	r3, [r3, #32]
 800199e:	1e5a      	subs	r2, r3, #1
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	430a      	orrs	r2, r1
 80019a6:	631a      	str	r2, [r3, #48]	@ 0x30
 80019a8:	e007      	b.n	80019ba <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f022 020f 	bic.w	r2, r2, #15
 80019b8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019be:	f023 0303 	bic.w	r3, r3, #3
 80019c2:	f043 0201 	orr.w	r2, r3, #1
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80019ca:	e007      	b.n	80019dc <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019d0:	f043 0210 	orr.w	r2, r3, #16
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80019dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3724      	adds	r7, #36	@ 0x24
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd90      	pop	{r4, r7, pc}
 80019e6:	bf00      	nop

080019e8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b08a      	sub	sp, #40	@ 0x28
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80019f0:	2300      	movs	r3, #0
 80019f2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001a0c:	d004      	beq.n	8001a18 <HAL_ADC_IRQHandler+0x30>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a8e      	ldr	r2, [pc, #568]	@ (8001c4c <HAL_ADC_IRQHandler+0x264>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d101      	bne.n	8001a1c <HAL_ADC_IRQHandler+0x34>
 8001a18:	4b8d      	ldr	r3, [pc, #564]	@ (8001c50 <HAL_ADC_IRQHandler+0x268>)
 8001a1a:	e000      	b.n	8001a1e <HAL_ADC_IRQHandler+0x36>
 8001a1c:	4b8d      	ldr	r3, [pc, #564]	@ (8001c54 <HAL_ADC_IRQHandler+0x26c>)
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7ff fd82 	bl	8001528 <LL_ADC_GetMultimode>
 8001a24:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	f003 0302 	and.w	r3, r3, #2
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d017      	beq.n	8001a60 <HAL_ADC_IRQHandler+0x78>
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	f003 0302 	and.w	r3, r3, #2
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d012      	beq.n	8001a60 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a3e:	f003 0310 	and.w	r3, r3, #16
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d105      	bne.n	8001a52 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a4a:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f000 fed4 	bl	8002800 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2202      	movs	r2, #2
 8001a5e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	f003 0304 	and.w	r3, r3, #4
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d004      	beq.n	8001a74 <HAL_ADC_IRQHandler+0x8c>
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	f003 0304 	and.w	r3, r3, #4
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d10b      	bne.n	8001a8c <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	f000 8094 	beq.w	8001ba8 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	f003 0308 	and.w	r3, r3, #8
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	f000 808e 	beq.w	8001ba8 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a90:	f003 0310 	and.w	r3, r3, #16
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d105      	bne.n	8001aa4 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a9c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff fc9b 	bl	80013e4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d072      	beq.n	8001b9a <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a64      	ldr	r2, [pc, #400]	@ (8001c4c <HAL_ADC_IRQHandler+0x264>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d009      	beq.n	8001ad2 <HAL_ADC_IRQHandler+0xea>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a65      	ldr	r2, [pc, #404]	@ (8001c58 <HAL_ADC_IRQHandler+0x270>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d002      	beq.n	8001ace <HAL_ADC_IRQHandler+0xe6>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	e003      	b.n	8001ad6 <HAL_ADC_IRQHandler+0xee>
 8001ace:	4b63      	ldr	r3, [pc, #396]	@ (8001c5c <HAL_ADC_IRQHandler+0x274>)
 8001ad0:	e001      	b.n	8001ad6 <HAL_ADC_IRQHandler+0xee>
 8001ad2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	6812      	ldr	r2, [r2, #0]
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d008      	beq.n	8001af0 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d005      	beq.n	8001af0 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	2b05      	cmp	r3, #5
 8001ae8:	d002      	beq.n	8001af0 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	2b09      	cmp	r3, #9
 8001aee:	d104      	bne.n	8001afa <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	68db      	ldr	r3, [r3, #12]
 8001af6:	623b      	str	r3, [r7, #32]
 8001af8:	e014      	b.n	8001b24 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a53      	ldr	r2, [pc, #332]	@ (8001c4c <HAL_ADC_IRQHandler+0x264>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d009      	beq.n	8001b18 <HAL_ADC_IRQHandler+0x130>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a53      	ldr	r2, [pc, #332]	@ (8001c58 <HAL_ADC_IRQHandler+0x270>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d002      	beq.n	8001b14 <HAL_ADC_IRQHandler+0x12c>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	e003      	b.n	8001b1c <HAL_ADC_IRQHandler+0x134>
 8001b14:	4b51      	ldr	r3, [pc, #324]	@ (8001c5c <HAL_ADC_IRQHandler+0x274>)
 8001b16:	e001      	b.n	8001b1c <HAL_ADC_IRQHandler+0x134>
 8001b18:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001b1c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	68db      	ldr	r3, [r3, #12]
 8001b22:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001b24:	6a3b      	ldr	r3, [r7, #32]
 8001b26:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d135      	bne.n	8001b9a <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0308 	and.w	r3, r3, #8
 8001b38:	2b08      	cmp	r3, #8
 8001b3a:	d12e      	bne.n	8001b9a <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7ff fd6e 	bl	8001622 <LL_ADC_REG_IsConversionOngoing>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d11a      	bne.n	8001b82 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	685a      	ldr	r2, [r3, #4]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f022 020c 	bic.w	r2, r2, #12
 8001b5a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b60:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b6c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d112      	bne.n	8001b9a <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b78:	f043 0201 	orr.w	r2, r3, #1
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001b80:	e00b      	b.n	8001b9a <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b86:	f043 0210 	orr.w	r2, r3, #16
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b92:	f043 0201 	orr.w	r2, r3, #1
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f000 f984 	bl	8001ea8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	220c      	movs	r2, #12
 8001ba6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	f003 0320 	and.w	r3, r3, #32
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d004      	beq.n	8001bbc <HAL_ADC_IRQHandler+0x1d4>
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	f003 0320 	and.w	r3, r3, #32
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d10b      	bne.n	8001bd4 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	f000 80b3 	beq.w	8001d2e <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	f000 80ad 	beq.w	8001d2e <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bd8:	f003 0310 	and.w	r3, r3, #16
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d105      	bne.n	8001bec <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001be4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff fc36 	bl	8001462 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001bf6:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7ff fbf1 	bl	80013e4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001c02:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a10      	ldr	r2, [pc, #64]	@ (8001c4c <HAL_ADC_IRQHandler+0x264>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d009      	beq.n	8001c22 <HAL_ADC_IRQHandler+0x23a>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a11      	ldr	r2, [pc, #68]	@ (8001c58 <HAL_ADC_IRQHandler+0x270>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d002      	beq.n	8001c1e <HAL_ADC_IRQHandler+0x236>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	e003      	b.n	8001c26 <HAL_ADC_IRQHandler+0x23e>
 8001c1e:	4b0f      	ldr	r3, [pc, #60]	@ (8001c5c <HAL_ADC_IRQHandler+0x274>)
 8001c20:	e001      	b.n	8001c26 <HAL_ADC_IRQHandler+0x23e>
 8001c22:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	6812      	ldr	r2, [r2, #0]
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d008      	beq.n	8001c40 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d005      	beq.n	8001c40 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	2b06      	cmp	r3, #6
 8001c38:	d002      	beq.n	8001c40 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	2b07      	cmp	r3, #7
 8001c3e:	d10f      	bne.n	8001c60 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	68db      	ldr	r3, [r3, #12]
 8001c46:	623b      	str	r3, [r7, #32]
 8001c48:	e01f      	b.n	8001c8a <HAL_ADC_IRQHandler+0x2a2>
 8001c4a:	bf00      	nop
 8001c4c:	50000100 	.word	0x50000100
 8001c50:	50000300 	.word	0x50000300
 8001c54:	50000700 	.word	0x50000700
 8001c58:	50000500 	.word	0x50000500
 8001c5c:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a8b      	ldr	r2, [pc, #556]	@ (8001e94 <HAL_ADC_IRQHandler+0x4ac>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d009      	beq.n	8001c7e <HAL_ADC_IRQHandler+0x296>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a8a      	ldr	r2, [pc, #552]	@ (8001e98 <HAL_ADC_IRQHandler+0x4b0>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d002      	beq.n	8001c7a <HAL_ADC_IRQHandler+0x292>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	e003      	b.n	8001c82 <HAL_ADC_IRQHandler+0x29a>
 8001c7a:	4b88      	ldr	r3, [pc, #544]	@ (8001e9c <HAL_ADC_IRQHandler+0x4b4>)
 8001c7c:	e001      	b.n	8001c82 <HAL_ADC_IRQHandler+0x29a>
 8001c7e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001c82:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d047      	beq.n	8001d20 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001c90:	6a3b      	ldr	r3, [r7, #32]
 8001c92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d007      	beq.n	8001caa <HAL_ADC_IRQHandler+0x2c2>
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d03f      	beq.n	8001d20 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001ca0:	6a3b      	ldr	r3, [r7, #32]
 8001ca2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d13a      	bne.n	8001d20 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cb4:	2b40      	cmp	r3, #64	@ 0x40
 8001cb6:	d133      	bne.n	8001d20 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001cb8:	6a3b      	ldr	r3, [r7, #32]
 8001cba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d12e      	bne.n	8001d20 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7ff fcbe 	bl	8001648 <LL_ADC_INJ_IsConversionOngoing>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d11a      	bne.n	8001d08 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	685a      	ldr	r2, [r3, #4]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001ce0:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ce6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d112      	bne.n	8001d20 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cfe:	f043 0201 	orr.w	r2, r3, #1
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001d06:	e00b      	b.n	8001d20 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d0c:	f043 0210 	orr.w	r2, r3, #16
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d18:	f043 0201 	orr.w	r2, r3, #1
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f000 fd45 	bl	80027b0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	2260      	movs	r2, #96	@ 0x60
 8001d2c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d011      	beq.n	8001d5c <HAL_ADC_IRQHandler+0x374>
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d00c      	beq.n	8001d5c <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d46:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f000 f8b4 	bl	8001ebc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2280      	movs	r2, #128	@ 0x80
 8001d5a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d012      	beq.n	8001d8c <HAL_ADC_IRQHandler+0x3a4>
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d00d      	beq.n	8001d8c <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d74:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f000 fd2b 	bl	80027d8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d8a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d012      	beq.n	8001dbc <HAL_ADC_IRQHandler+0x3d4>
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d00d      	beq.n	8001dbc <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001da4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f000 fd1d 	bl	80027ec <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001dba:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	f003 0310 	and.w	r3, r3, #16
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d043      	beq.n	8001e4e <HAL_ADC_IRQHandler+0x466>
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	f003 0310 	and.w	r3, r3, #16
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d03e      	beq.n	8001e4e <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d102      	bne.n	8001dde <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ddc:	e021      	b.n	8001e22 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d015      	beq.n	8001e10 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001dec:	d004      	beq.n	8001df8 <HAL_ADC_IRQHandler+0x410>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a28      	ldr	r2, [pc, #160]	@ (8001e94 <HAL_ADC_IRQHandler+0x4ac>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d101      	bne.n	8001dfc <HAL_ADC_IRQHandler+0x414>
 8001df8:	4b29      	ldr	r3, [pc, #164]	@ (8001ea0 <HAL_ADC_IRQHandler+0x4b8>)
 8001dfa:	e000      	b.n	8001dfe <HAL_ADC_IRQHandler+0x416>
 8001dfc:	4b29      	ldr	r3, [pc, #164]	@ (8001ea4 <HAL_ADC_IRQHandler+0x4bc>)
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7ff fba0 	bl	8001544 <LL_ADC_GetMultiDMATransfer>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d00b      	beq.n	8001e22 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e0e:	e008      	b.n	8001e22 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8001e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d10e      	bne.n	8001e46 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e2c:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e38:	f043 0202 	orr.w	r2, r3, #2
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f000 f845 	bl	8001ed0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2210      	movs	r2, #16
 8001e4c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d018      	beq.n	8001e8a <HAL_ADC_IRQHandler+0x4a2>
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d013      	beq.n	8001e8a <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e66:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e72:	f043 0208 	orr.w	r2, r3, #8
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e82:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f000 fc9d 	bl	80027c4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8001e8a:	bf00      	nop
 8001e8c:	3728      	adds	r7, #40	@ 0x28
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	50000100 	.word	0x50000100
 8001e98:	50000500 	.word	0x50000500
 8001e9c:	50000400 	.word	0x50000400
 8001ea0:	50000300 	.word	0x50000300
 8001ea4:	50000700 	.word	0x50000700

08001ea8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001eb0:	bf00      	nop
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001ec4:	bf00      	nop
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001ed8:	bf00      	nop
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b0b6      	sub	sp, #216	@ 0xd8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d102      	bne.n	8001f08 <HAL_ADC_ConfigChannel+0x24>
 8001f02:	2302      	movs	r3, #2
 8001f04:	f000 bc13 	b.w	800272e <HAL_ADC_ConfigChannel+0x84a>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7ff fb84 	bl	8001622 <LL_ADC_REG_IsConversionOngoing>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	f040 83f3 	bne.w	8002708 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6818      	ldr	r0, [r3, #0]
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	6859      	ldr	r1, [r3, #4]
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	461a      	mov	r2, r3
 8001f30:	f7ff fa6b 	bl	800140a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7ff fb72 	bl	8001622 <LL_ADC_REG_IsConversionOngoing>
 8001f3e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7ff fb7e 	bl	8001648 <LL_ADC_INJ_IsConversionOngoing>
 8001f4c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f50:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	f040 81d9 	bne.w	800230c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f5a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	f040 81d4 	bne.w	800230c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001f6c:	d10f      	bne.n	8001f8e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6818      	ldr	r0, [r3, #0]
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2200      	movs	r2, #0
 8001f78:	4619      	mov	r1, r3
 8001f7a:	f7ff fa85 	bl	8001488 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7ff fa19 	bl	80013be <LL_ADC_SetSamplingTimeCommonConfig>
 8001f8c:	e00e      	b.n	8001fac <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6818      	ldr	r0, [r3, #0]
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	6819      	ldr	r1, [r3, #0]
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	f7ff fa74 	bl	8001488 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7ff fa09 	bl	80013be <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	695a      	ldr	r2, [r3, #20]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	68db      	ldr	r3, [r3, #12]
 8001fb6:	08db      	lsrs	r3, r3, #3
 8001fb8:	f003 0303 	and.w	r3, r3, #3
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	691b      	ldr	r3, [r3, #16]
 8001fca:	2b04      	cmp	r3, #4
 8001fcc:	d022      	beq.n	8002014 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6818      	ldr	r0, [r3, #0]
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	6919      	ldr	r1, [r3, #16]
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001fde:	f7ff f963 	bl	80012a8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6818      	ldr	r0, [r3, #0]
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	6919      	ldr	r1, [r3, #16]
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	699b      	ldr	r3, [r3, #24]
 8001fee:	461a      	mov	r2, r3
 8001ff0:	f7ff f9af 	bl	8001352 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6818      	ldr	r0, [r3, #0]
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002000:	2b01      	cmp	r3, #1
 8002002:	d102      	bne.n	800200a <HAL_ADC_ConfigChannel+0x126>
 8002004:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002008:	e000      	b.n	800200c <HAL_ADC_ConfigChannel+0x128>
 800200a:	2300      	movs	r3, #0
 800200c:	461a      	mov	r2, r3
 800200e:	f7ff f9bb 	bl	8001388 <LL_ADC_SetOffsetSaturation>
 8002012:	e17b      	b.n	800230c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2100      	movs	r1, #0
 800201a:	4618      	mov	r0, r3
 800201c:	f7ff f968 	bl	80012f0 <LL_ADC_GetOffsetChannel>
 8002020:	4603      	mov	r3, r0
 8002022:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002026:	2b00      	cmp	r3, #0
 8002028:	d10a      	bne.n	8002040 <HAL_ADC_ConfigChannel+0x15c>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	2100      	movs	r1, #0
 8002030:	4618      	mov	r0, r3
 8002032:	f7ff f95d 	bl	80012f0 <LL_ADC_GetOffsetChannel>
 8002036:	4603      	mov	r3, r0
 8002038:	0e9b      	lsrs	r3, r3, #26
 800203a:	f003 021f 	and.w	r2, r3, #31
 800203e:	e01e      	b.n	800207e <HAL_ADC_ConfigChannel+0x19a>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2100      	movs	r1, #0
 8002046:	4618      	mov	r0, r3
 8002048:	f7ff f952 	bl	80012f0 <LL_ADC_GetOffsetChannel>
 800204c:	4603      	mov	r3, r0
 800204e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002052:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002056:	fa93 f3a3 	rbit	r3, r3
 800205a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800205e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002062:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002066:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d101      	bne.n	8002072 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800206e:	2320      	movs	r3, #32
 8002070:	e004      	b.n	800207c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002072:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002076:	fab3 f383 	clz	r3, r3
 800207a:	b2db      	uxtb	r3, r3
 800207c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002086:	2b00      	cmp	r3, #0
 8002088:	d105      	bne.n	8002096 <HAL_ADC_ConfigChannel+0x1b2>
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	0e9b      	lsrs	r3, r3, #26
 8002090:	f003 031f 	and.w	r3, r3, #31
 8002094:	e018      	b.n	80020c8 <HAL_ADC_ConfigChannel+0x1e4>
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800209e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80020a2:	fa93 f3a3 	rbit	r3, r3
 80020a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80020aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80020ae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80020b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d101      	bne.n	80020be <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80020ba:	2320      	movs	r3, #32
 80020bc:	e004      	b.n	80020c8 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80020be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80020c2:	fab3 f383 	clz	r3, r3
 80020c6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d106      	bne.n	80020da <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2200      	movs	r2, #0
 80020d2:	2100      	movs	r1, #0
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7ff f921 	bl	800131c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2101      	movs	r1, #1
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7ff f905 	bl	80012f0 <LL_ADC_GetOffsetChannel>
 80020e6:	4603      	mov	r3, r0
 80020e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d10a      	bne.n	8002106 <HAL_ADC_ConfigChannel+0x222>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2101      	movs	r1, #1
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7ff f8fa 	bl	80012f0 <LL_ADC_GetOffsetChannel>
 80020fc:	4603      	mov	r3, r0
 80020fe:	0e9b      	lsrs	r3, r3, #26
 8002100:	f003 021f 	and.w	r2, r3, #31
 8002104:	e01e      	b.n	8002144 <HAL_ADC_ConfigChannel+0x260>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2101      	movs	r1, #1
 800210c:	4618      	mov	r0, r3
 800210e:	f7ff f8ef 	bl	80012f0 <LL_ADC_GetOffsetChannel>
 8002112:	4603      	mov	r3, r0
 8002114:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002118:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800211c:	fa93 f3a3 	rbit	r3, r3
 8002120:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002124:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002128:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800212c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002130:	2b00      	cmp	r3, #0
 8002132:	d101      	bne.n	8002138 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002134:	2320      	movs	r3, #32
 8002136:	e004      	b.n	8002142 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002138:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800213c:	fab3 f383 	clz	r3, r3
 8002140:	b2db      	uxtb	r3, r3
 8002142:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800214c:	2b00      	cmp	r3, #0
 800214e:	d105      	bne.n	800215c <HAL_ADC_ConfigChannel+0x278>
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	0e9b      	lsrs	r3, r3, #26
 8002156:	f003 031f 	and.w	r3, r3, #31
 800215a:	e018      	b.n	800218e <HAL_ADC_ConfigChannel+0x2aa>
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002164:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002168:	fa93 f3a3 	rbit	r3, r3
 800216c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002170:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002174:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002178:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800217c:	2b00      	cmp	r3, #0
 800217e:	d101      	bne.n	8002184 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002180:	2320      	movs	r3, #32
 8002182:	e004      	b.n	800218e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002184:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002188:	fab3 f383 	clz	r3, r3
 800218c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800218e:	429a      	cmp	r2, r3
 8002190:	d106      	bne.n	80021a0 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	2200      	movs	r2, #0
 8002198:	2101      	movs	r1, #1
 800219a:	4618      	mov	r0, r3
 800219c:	f7ff f8be 	bl	800131c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2102      	movs	r1, #2
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7ff f8a2 	bl	80012f0 <LL_ADC_GetOffsetChannel>
 80021ac:	4603      	mov	r3, r0
 80021ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d10a      	bne.n	80021cc <HAL_ADC_ConfigChannel+0x2e8>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	2102      	movs	r1, #2
 80021bc:	4618      	mov	r0, r3
 80021be:	f7ff f897 	bl	80012f0 <LL_ADC_GetOffsetChannel>
 80021c2:	4603      	mov	r3, r0
 80021c4:	0e9b      	lsrs	r3, r3, #26
 80021c6:	f003 021f 	and.w	r2, r3, #31
 80021ca:	e01e      	b.n	800220a <HAL_ADC_ConfigChannel+0x326>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2102      	movs	r1, #2
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7ff f88c 	bl	80012f0 <LL_ADC_GetOffsetChannel>
 80021d8:	4603      	mov	r3, r0
 80021da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80021e2:	fa93 f3a3 	rbit	r3, r3
 80021e6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80021ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80021ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80021f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d101      	bne.n	80021fe <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80021fa:	2320      	movs	r3, #32
 80021fc:	e004      	b.n	8002208 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80021fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002202:	fab3 f383 	clz	r3, r3
 8002206:	b2db      	uxtb	r3, r3
 8002208:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002212:	2b00      	cmp	r3, #0
 8002214:	d105      	bne.n	8002222 <HAL_ADC_ConfigChannel+0x33e>
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	0e9b      	lsrs	r3, r3, #26
 800221c:	f003 031f 	and.w	r3, r3, #31
 8002220:	e016      	b.n	8002250 <HAL_ADC_ConfigChannel+0x36c>
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800222a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800222e:	fa93 f3a3 	rbit	r3, r3
 8002232:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002234:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002236:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800223a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800223e:	2b00      	cmp	r3, #0
 8002240:	d101      	bne.n	8002246 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002242:	2320      	movs	r3, #32
 8002244:	e004      	b.n	8002250 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002246:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800224a:	fab3 f383 	clz	r3, r3
 800224e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002250:	429a      	cmp	r2, r3
 8002252:	d106      	bne.n	8002262 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2200      	movs	r2, #0
 800225a:	2102      	movs	r1, #2
 800225c:	4618      	mov	r0, r3
 800225e:	f7ff f85d 	bl	800131c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2103      	movs	r1, #3
 8002268:	4618      	mov	r0, r3
 800226a:	f7ff f841 	bl	80012f0 <LL_ADC_GetOffsetChannel>
 800226e:	4603      	mov	r3, r0
 8002270:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002274:	2b00      	cmp	r3, #0
 8002276:	d10a      	bne.n	800228e <HAL_ADC_ConfigChannel+0x3aa>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2103      	movs	r1, #3
 800227e:	4618      	mov	r0, r3
 8002280:	f7ff f836 	bl	80012f0 <LL_ADC_GetOffsetChannel>
 8002284:	4603      	mov	r3, r0
 8002286:	0e9b      	lsrs	r3, r3, #26
 8002288:	f003 021f 	and.w	r2, r3, #31
 800228c:	e017      	b.n	80022be <HAL_ADC_ConfigChannel+0x3da>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	2103      	movs	r1, #3
 8002294:	4618      	mov	r0, r3
 8002296:	f7ff f82b 	bl	80012f0 <LL_ADC_GetOffsetChannel>
 800229a:	4603      	mov	r3, r0
 800229c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800229e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80022a0:	fa93 f3a3 	rbit	r3, r3
 80022a4:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80022a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80022a8:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80022aa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d101      	bne.n	80022b4 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80022b0:	2320      	movs	r3, #32
 80022b2:	e003      	b.n	80022bc <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80022b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80022b6:	fab3 f383 	clz	r3, r3
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d105      	bne.n	80022d6 <HAL_ADC_ConfigChannel+0x3f2>
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	0e9b      	lsrs	r3, r3, #26
 80022d0:	f003 031f 	and.w	r3, r3, #31
 80022d4:	e011      	b.n	80022fa <HAL_ADC_ConfigChannel+0x416>
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022dc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80022de:	fa93 f3a3 	rbit	r3, r3
 80022e2:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80022e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80022e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80022e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d101      	bne.n	80022f2 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80022ee:	2320      	movs	r3, #32
 80022f0:	e003      	b.n	80022fa <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80022f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80022f4:	fab3 f383 	clz	r3, r3
 80022f8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d106      	bne.n	800230c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2200      	movs	r2, #0
 8002304:	2103      	movs	r1, #3
 8002306:	4618      	mov	r0, r3
 8002308:	f7ff f808 	bl	800131c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4618      	mov	r0, r3
 8002312:	f7ff f973 	bl	80015fc <LL_ADC_IsEnabled>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	f040 813d 	bne.w	8002598 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6818      	ldr	r0, [r3, #0]
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	6819      	ldr	r1, [r3, #0]
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	461a      	mov	r2, r3
 800232c:	f7ff f8d8 	bl	80014e0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	4aa2      	ldr	r2, [pc, #648]	@ (80025c0 <HAL_ADC_ConfigChannel+0x6dc>)
 8002336:	4293      	cmp	r3, r2
 8002338:	f040 812e 	bne.w	8002598 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002348:	2b00      	cmp	r3, #0
 800234a:	d10b      	bne.n	8002364 <HAL_ADC_ConfigChannel+0x480>
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	0e9b      	lsrs	r3, r3, #26
 8002352:	3301      	adds	r3, #1
 8002354:	f003 031f 	and.w	r3, r3, #31
 8002358:	2b09      	cmp	r3, #9
 800235a:	bf94      	ite	ls
 800235c:	2301      	movls	r3, #1
 800235e:	2300      	movhi	r3, #0
 8002360:	b2db      	uxtb	r3, r3
 8002362:	e019      	b.n	8002398 <HAL_ADC_ConfigChannel+0x4b4>
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800236a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800236c:	fa93 f3a3 	rbit	r3, r3
 8002370:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002372:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002374:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002376:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002378:	2b00      	cmp	r3, #0
 800237a:	d101      	bne.n	8002380 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800237c:	2320      	movs	r3, #32
 800237e:	e003      	b.n	8002388 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002380:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002382:	fab3 f383 	clz	r3, r3
 8002386:	b2db      	uxtb	r3, r3
 8002388:	3301      	adds	r3, #1
 800238a:	f003 031f 	and.w	r3, r3, #31
 800238e:	2b09      	cmp	r3, #9
 8002390:	bf94      	ite	ls
 8002392:	2301      	movls	r3, #1
 8002394:	2300      	movhi	r3, #0
 8002396:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002398:	2b00      	cmp	r3, #0
 800239a:	d079      	beq.n	8002490 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d107      	bne.n	80023b8 <HAL_ADC_ConfigChannel+0x4d4>
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	0e9b      	lsrs	r3, r3, #26
 80023ae:	3301      	adds	r3, #1
 80023b0:	069b      	lsls	r3, r3, #26
 80023b2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80023b6:	e015      	b.n	80023e4 <HAL_ADC_ConfigChannel+0x500>
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80023c0:	fa93 f3a3 	rbit	r3, r3
 80023c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80023c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80023c8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80023ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d101      	bne.n	80023d4 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80023d0:	2320      	movs	r3, #32
 80023d2:	e003      	b.n	80023dc <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80023d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023d6:	fab3 f383 	clz	r3, r3
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	3301      	adds	r3, #1
 80023de:	069b      	lsls	r3, r3, #26
 80023e0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d109      	bne.n	8002404 <HAL_ADC_ConfigChannel+0x520>
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	0e9b      	lsrs	r3, r3, #26
 80023f6:	3301      	adds	r3, #1
 80023f8:	f003 031f 	and.w	r3, r3, #31
 80023fc:	2101      	movs	r1, #1
 80023fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002402:	e017      	b.n	8002434 <HAL_ADC_ConfigChannel+0x550>
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800240c:	fa93 f3a3 	rbit	r3, r3
 8002410:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002412:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002414:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002416:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002418:	2b00      	cmp	r3, #0
 800241a:	d101      	bne.n	8002420 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800241c:	2320      	movs	r3, #32
 800241e:	e003      	b.n	8002428 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002420:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002422:	fab3 f383 	clz	r3, r3
 8002426:	b2db      	uxtb	r3, r3
 8002428:	3301      	adds	r3, #1
 800242a:	f003 031f 	and.w	r3, r3, #31
 800242e:	2101      	movs	r1, #1
 8002430:	fa01 f303 	lsl.w	r3, r1, r3
 8002434:	ea42 0103 	orr.w	r1, r2, r3
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002440:	2b00      	cmp	r3, #0
 8002442:	d10a      	bne.n	800245a <HAL_ADC_ConfigChannel+0x576>
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	0e9b      	lsrs	r3, r3, #26
 800244a:	3301      	adds	r3, #1
 800244c:	f003 021f 	and.w	r2, r3, #31
 8002450:	4613      	mov	r3, r2
 8002452:	005b      	lsls	r3, r3, #1
 8002454:	4413      	add	r3, r2
 8002456:	051b      	lsls	r3, r3, #20
 8002458:	e018      	b.n	800248c <HAL_ADC_ConfigChannel+0x5a8>
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002460:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002462:	fa93 f3a3 	rbit	r3, r3
 8002466:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002468:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800246a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800246c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800246e:	2b00      	cmp	r3, #0
 8002470:	d101      	bne.n	8002476 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002472:	2320      	movs	r3, #32
 8002474:	e003      	b.n	800247e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002476:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002478:	fab3 f383 	clz	r3, r3
 800247c:	b2db      	uxtb	r3, r3
 800247e:	3301      	adds	r3, #1
 8002480:	f003 021f 	and.w	r2, r3, #31
 8002484:	4613      	mov	r3, r2
 8002486:	005b      	lsls	r3, r3, #1
 8002488:	4413      	add	r3, r2
 800248a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800248c:	430b      	orrs	r3, r1
 800248e:	e07e      	b.n	800258e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002498:	2b00      	cmp	r3, #0
 800249a:	d107      	bne.n	80024ac <HAL_ADC_ConfigChannel+0x5c8>
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	0e9b      	lsrs	r3, r3, #26
 80024a2:	3301      	adds	r3, #1
 80024a4:	069b      	lsls	r3, r3, #26
 80024a6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80024aa:	e015      	b.n	80024d8 <HAL_ADC_ConfigChannel+0x5f4>
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024b4:	fa93 f3a3 	rbit	r3, r3
 80024b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80024ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024bc:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80024be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d101      	bne.n	80024c8 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80024c4:	2320      	movs	r3, #32
 80024c6:	e003      	b.n	80024d0 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80024c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024ca:	fab3 f383 	clz	r3, r3
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	3301      	adds	r3, #1
 80024d2:	069b      	lsls	r3, r3, #26
 80024d4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d109      	bne.n	80024f8 <HAL_ADC_ConfigChannel+0x614>
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	0e9b      	lsrs	r3, r3, #26
 80024ea:	3301      	adds	r3, #1
 80024ec:	f003 031f 	and.w	r3, r3, #31
 80024f0:	2101      	movs	r1, #1
 80024f2:	fa01 f303 	lsl.w	r3, r1, r3
 80024f6:	e017      	b.n	8002528 <HAL_ADC_ConfigChannel+0x644>
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024fe:	6a3b      	ldr	r3, [r7, #32]
 8002500:	fa93 f3a3 	rbit	r3, r3
 8002504:	61fb      	str	r3, [r7, #28]
  return result;
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800250a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800250c:	2b00      	cmp	r3, #0
 800250e:	d101      	bne.n	8002514 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002510:	2320      	movs	r3, #32
 8002512:	e003      	b.n	800251c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002516:	fab3 f383 	clz	r3, r3
 800251a:	b2db      	uxtb	r3, r3
 800251c:	3301      	adds	r3, #1
 800251e:	f003 031f 	and.w	r3, r3, #31
 8002522:	2101      	movs	r1, #1
 8002524:	fa01 f303 	lsl.w	r3, r1, r3
 8002528:	ea42 0103 	orr.w	r1, r2, r3
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002534:	2b00      	cmp	r3, #0
 8002536:	d10d      	bne.n	8002554 <HAL_ADC_ConfigChannel+0x670>
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	0e9b      	lsrs	r3, r3, #26
 800253e:	3301      	adds	r3, #1
 8002540:	f003 021f 	and.w	r2, r3, #31
 8002544:	4613      	mov	r3, r2
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	4413      	add	r3, r2
 800254a:	3b1e      	subs	r3, #30
 800254c:	051b      	lsls	r3, r3, #20
 800254e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002552:	e01b      	b.n	800258c <HAL_ADC_ConfigChannel+0x6a8>
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	fa93 f3a3 	rbit	r3, r3
 8002560:	613b      	str	r3, [r7, #16]
  return result;
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d101      	bne.n	8002570 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800256c:	2320      	movs	r3, #32
 800256e:	e003      	b.n	8002578 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002570:	69bb      	ldr	r3, [r7, #24]
 8002572:	fab3 f383 	clz	r3, r3
 8002576:	b2db      	uxtb	r3, r3
 8002578:	3301      	adds	r3, #1
 800257a:	f003 021f 	and.w	r2, r3, #31
 800257e:	4613      	mov	r3, r2
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	4413      	add	r3, r2
 8002584:	3b1e      	subs	r3, #30
 8002586:	051b      	lsls	r3, r3, #20
 8002588:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800258c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800258e:	683a      	ldr	r2, [r7, #0]
 8002590:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002592:	4619      	mov	r1, r3
 8002594:	f7fe ff78 	bl	8001488 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	4b09      	ldr	r3, [pc, #36]	@ (80025c4 <HAL_ADC_ConfigChannel+0x6e0>)
 800259e:	4013      	ands	r3, r2
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	f000 80be 	beq.w	8002722 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80025ae:	d004      	beq.n	80025ba <HAL_ADC_ConfigChannel+0x6d6>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a04      	ldr	r2, [pc, #16]	@ (80025c8 <HAL_ADC_ConfigChannel+0x6e4>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d10a      	bne.n	80025d0 <HAL_ADC_ConfigChannel+0x6ec>
 80025ba:	4b04      	ldr	r3, [pc, #16]	@ (80025cc <HAL_ADC_ConfigChannel+0x6e8>)
 80025bc:	e009      	b.n	80025d2 <HAL_ADC_ConfigChannel+0x6ee>
 80025be:	bf00      	nop
 80025c0:	407f0000 	.word	0x407f0000
 80025c4:	80080000 	.word	0x80080000
 80025c8:	50000100 	.word	0x50000100
 80025cc:	50000300 	.word	0x50000300
 80025d0:	4b59      	ldr	r3, [pc, #356]	@ (8002738 <HAL_ADC_ConfigChannel+0x854>)
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7fe fe5a 	bl	800128c <LL_ADC_GetCommonPathInternalCh>
 80025d8:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a56      	ldr	r2, [pc, #344]	@ (800273c <HAL_ADC_ConfigChannel+0x858>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d004      	beq.n	80025f0 <HAL_ADC_ConfigChannel+0x70c>
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a55      	ldr	r2, [pc, #340]	@ (8002740 <HAL_ADC_ConfigChannel+0x85c>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d13a      	bne.n	8002666 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80025f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80025f4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d134      	bne.n	8002666 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002604:	d005      	beq.n	8002612 <HAL_ADC_ConfigChannel+0x72e>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a4e      	ldr	r2, [pc, #312]	@ (8002744 <HAL_ADC_ConfigChannel+0x860>)
 800260c:	4293      	cmp	r3, r2
 800260e:	f040 8085 	bne.w	800271c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800261a:	d004      	beq.n	8002626 <HAL_ADC_ConfigChannel+0x742>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a49      	ldr	r2, [pc, #292]	@ (8002748 <HAL_ADC_ConfigChannel+0x864>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d101      	bne.n	800262a <HAL_ADC_ConfigChannel+0x746>
 8002626:	4a49      	ldr	r2, [pc, #292]	@ (800274c <HAL_ADC_ConfigChannel+0x868>)
 8002628:	e000      	b.n	800262c <HAL_ADC_ConfigChannel+0x748>
 800262a:	4a43      	ldr	r2, [pc, #268]	@ (8002738 <HAL_ADC_ConfigChannel+0x854>)
 800262c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002630:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002634:	4619      	mov	r1, r3
 8002636:	4610      	mov	r0, r2
 8002638:	f7fe fe15 	bl	8001266 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800263c:	4b44      	ldr	r3, [pc, #272]	@ (8002750 <HAL_ADC_ConfigChannel+0x86c>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	099b      	lsrs	r3, r3, #6
 8002642:	4a44      	ldr	r2, [pc, #272]	@ (8002754 <HAL_ADC_ConfigChannel+0x870>)
 8002644:	fba2 2303 	umull	r2, r3, r2, r3
 8002648:	099b      	lsrs	r3, r3, #6
 800264a:	1c5a      	adds	r2, r3, #1
 800264c:	4613      	mov	r3, r2
 800264e:	005b      	lsls	r3, r3, #1
 8002650:	4413      	add	r3, r2
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002656:	e002      	b.n	800265e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	3b01      	subs	r3, #1
 800265c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d1f9      	bne.n	8002658 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002664:	e05a      	b.n	800271c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a3b      	ldr	r2, [pc, #236]	@ (8002758 <HAL_ADC_ConfigChannel+0x874>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d125      	bne.n	80026bc <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002670:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002674:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d11f      	bne.n	80026bc <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a31      	ldr	r2, [pc, #196]	@ (8002748 <HAL_ADC_ConfigChannel+0x864>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d104      	bne.n	8002690 <HAL_ADC_ConfigChannel+0x7ac>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a34      	ldr	r2, [pc, #208]	@ (800275c <HAL_ADC_ConfigChannel+0x878>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d047      	beq.n	8002720 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002698:	d004      	beq.n	80026a4 <HAL_ADC_ConfigChannel+0x7c0>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a2a      	ldr	r2, [pc, #168]	@ (8002748 <HAL_ADC_ConfigChannel+0x864>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d101      	bne.n	80026a8 <HAL_ADC_ConfigChannel+0x7c4>
 80026a4:	4a29      	ldr	r2, [pc, #164]	@ (800274c <HAL_ADC_ConfigChannel+0x868>)
 80026a6:	e000      	b.n	80026aa <HAL_ADC_ConfigChannel+0x7c6>
 80026a8:	4a23      	ldr	r2, [pc, #140]	@ (8002738 <HAL_ADC_ConfigChannel+0x854>)
 80026aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80026ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80026b2:	4619      	mov	r1, r3
 80026b4:	4610      	mov	r0, r2
 80026b6:	f7fe fdd6 	bl	8001266 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80026ba:	e031      	b.n	8002720 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a27      	ldr	r2, [pc, #156]	@ (8002760 <HAL_ADC_ConfigChannel+0x87c>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d12d      	bne.n	8002722 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80026c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80026ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d127      	bne.n	8002722 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a1c      	ldr	r2, [pc, #112]	@ (8002748 <HAL_ADC_ConfigChannel+0x864>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d022      	beq.n	8002722 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80026e4:	d004      	beq.n	80026f0 <HAL_ADC_ConfigChannel+0x80c>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a17      	ldr	r2, [pc, #92]	@ (8002748 <HAL_ADC_ConfigChannel+0x864>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d101      	bne.n	80026f4 <HAL_ADC_ConfigChannel+0x810>
 80026f0:	4a16      	ldr	r2, [pc, #88]	@ (800274c <HAL_ADC_ConfigChannel+0x868>)
 80026f2:	e000      	b.n	80026f6 <HAL_ADC_ConfigChannel+0x812>
 80026f4:	4a10      	ldr	r2, [pc, #64]	@ (8002738 <HAL_ADC_ConfigChannel+0x854>)
 80026f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80026fa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80026fe:	4619      	mov	r1, r3
 8002700:	4610      	mov	r0, r2
 8002702:	f7fe fdb0 	bl	8001266 <LL_ADC_SetCommonPathInternalCh>
 8002706:	e00c      	b.n	8002722 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800270c:	f043 0220 	orr.w	r2, r3, #32
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800271a:	e002      	b.n	8002722 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800271c:	bf00      	nop
 800271e:	e000      	b.n	8002722 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002720:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800272a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800272e:	4618      	mov	r0, r3
 8002730:	37d8      	adds	r7, #216	@ 0xd8
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	50000700 	.word	0x50000700
 800273c:	c3210000 	.word	0xc3210000
 8002740:	90c00010 	.word	0x90c00010
 8002744:	50000600 	.word	0x50000600
 8002748:	50000100 	.word	0x50000100
 800274c:	50000300 	.word	0x50000300
 8002750:	20000000 	.word	0x20000000
 8002754:	053e2d63 	.word	0x053e2d63
 8002758:	c7520000 	.word	0xc7520000
 800275c:	50000500 	.word	0x50000500
 8002760:	cb840000 	.word	0xcb840000

08002764 <LL_ADC_IsEnabled>:
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	f003 0301 	and.w	r3, r3, #1
 8002774:	2b01      	cmp	r3, #1
 8002776:	d101      	bne.n	800277c <LL_ADC_IsEnabled+0x18>
 8002778:	2301      	movs	r3, #1
 800277a:	e000      	b.n	800277e <LL_ADC_IsEnabled+0x1a>
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	370c      	adds	r7, #12
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr

0800278a <LL_ADC_REG_IsConversionOngoing>:
{
 800278a:	b480      	push	{r7}
 800278c:	b083      	sub	sp, #12
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	f003 0304 	and.w	r3, r3, #4
 800279a:	2b04      	cmp	r3, #4
 800279c:	d101      	bne.n	80027a2 <LL_ADC_REG_IsConversionOngoing+0x18>
 800279e:	2301      	movs	r3, #1
 80027a0:	e000      	b.n	80027a4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80027a2:	2300      	movs	r3, #0
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	370c      	adds	r7, #12
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr

080027b0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80027b8:	bf00      	nop
 80027ba:	370c      	adds	r7, #12
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80027cc:	bf00      	nop
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr

080027d8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80027e0:	bf00      	nop
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr

080027ec <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80027f4:	bf00      	nop
 80027f6:	370c      	adds	r7, #12
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr

08002800 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002808:	bf00      	nop
 800280a:	370c      	adds	r7, #12
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr

08002814 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002814:	b590      	push	{r4, r7, lr}
 8002816:	b0a1      	sub	sp, #132	@ 0x84
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800281e:	2300      	movs	r3, #0
 8002820:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800282a:	2b01      	cmp	r3, #1
 800282c:	d101      	bne.n	8002832 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800282e:	2302      	movs	r3, #2
 8002830:	e0e7      	b.n	8002a02 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2201      	movs	r2, #1
 8002836:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800283a:	2300      	movs	r3, #0
 800283c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800283e:	2300      	movs	r3, #0
 8002840:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800284a:	d102      	bne.n	8002852 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800284c:	4b6f      	ldr	r3, [pc, #444]	@ (8002a0c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800284e:	60bb      	str	r3, [r7, #8]
 8002850:	e009      	b.n	8002866 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a6e      	ldr	r2, [pc, #440]	@ (8002a10 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d102      	bne.n	8002862 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800285c:	4b6d      	ldr	r3, [pc, #436]	@ (8002a14 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800285e:	60bb      	str	r3, [r7, #8]
 8002860:	e001      	b.n	8002866 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002862:	2300      	movs	r3, #0
 8002864:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d10b      	bne.n	8002884 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002870:	f043 0220 	orr.w	r2, r3, #32
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e0be      	b.n	8002a02 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	4618      	mov	r0, r3
 8002888:	f7ff ff7f 	bl	800278a <LL_ADC_REG_IsConversionOngoing>
 800288c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4618      	mov	r0, r3
 8002894:	f7ff ff79 	bl	800278a <LL_ADC_REG_IsConversionOngoing>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	f040 80a0 	bne.w	80029e0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80028a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	f040 809c 	bne.w	80029e0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80028b0:	d004      	beq.n	80028bc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a55      	ldr	r2, [pc, #340]	@ (8002a0c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d101      	bne.n	80028c0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80028bc:	4b56      	ldr	r3, [pc, #344]	@ (8002a18 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80028be:	e000      	b.n	80028c2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80028c0:	4b56      	ldr	r3, [pc, #344]	@ (8002a1c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80028c2:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d04b      	beq.n	8002964 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80028cc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	6859      	ldr	r1, [r3, #4]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80028de:	035b      	lsls	r3, r3, #13
 80028e0:	430b      	orrs	r3, r1
 80028e2:	431a      	orrs	r2, r3
 80028e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80028e6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80028f0:	d004      	beq.n	80028fc <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a45      	ldr	r2, [pc, #276]	@ (8002a0c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d10f      	bne.n	800291c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80028fc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002900:	f7ff ff30 	bl	8002764 <LL_ADC_IsEnabled>
 8002904:	4604      	mov	r4, r0
 8002906:	4841      	ldr	r0, [pc, #260]	@ (8002a0c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002908:	f7ff ff2c 	bl	8002764 <LL_ADC_IsEnabled>
 800290c:	4603      	mov	r3, r0
 800290e:	4323      	orrs	r3, r4
 8002910:	2b00      	cmp	r3, #0
 8002912:	bf0c      	ite	eq
 8002914:	2301      	moveq	r3, #1
 8002916:	2300      	movne	r3, #0
 8002918:	b2db      	uxtb	r3, r3
 800291a:	e012      	b.n	8002942 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800291c:	483c      	ldr	r0, [pc, #240]	@ (8002a10 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800291e:	f7ff ff21 	bl	8002764 <LL_ADC_IsEnabled>
 8002922:	4604      	mov	r4, r0
 8002924:	483b      	ldr	r0, [pc, #236]	@ (8002a14 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002926:	f7ff ff1d 	bl	8002764 <LL_ADC_IsEnabled>
 800292a:	4603      	mov	r3, r0
 800292c:	431c      	orrs	r4, r3
 800292e:	483c      	ldr	r0, [pc, #240]	@ (8002a20 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002930:	f7ff ff18 	bl	8002764 <LL_ADC_IsEnabled>
 8002934:	4603      	mov	r3, r0
 8002936:	4323      	orrs	r3, r4
 8002938:	2b00      	cmp	r3, #0
 800293a:	bf0c      	ite	eq
 800293c:	2301      	moveq	r3, #1
 800293e:	2300      	movne	r3, #0
 8002940:	b2db      	uxtb	r3, r3
 8002942:	2b00      	cmp	r3, #0
 8002944:	d056      	beq.n	80029f4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002946:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800294e:	f023 030f 	bic.w	r3, r3, #15
 8002952:	683a      	ldr	r2, [r7, #0]
 8002954:	6811      	ldr	r1, [r2, #0]
 8002956:	683a      	ldr	r2, [r7, #0]
 8002958:	6892      	ldr	r2, [r2, #8]
 800295a:	430a      	orrs	r2, r1
 800295c:	431a      	orrs	r2, r3
 800295e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002960:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002962:	e047      	b.n	80029f4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002964:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800296c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800296e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002978:	d004      	beq.n	8002984 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a23      	ldr	r2, [pc, #140]	@ (8002a0c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d10f      	bne.n	80029a4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002984:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002988:	f7ff feec 	bl	8002764 <LL_ADC_IsEnabled>
 800298c:	4604      	mov	r4, r0
 800298e:	481f      	ldr	r0, [pc, #124]	@ (8002a0c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002990:	f7ff fee8 	bl	8002764 <LL_ADC_IsEnabled>
 8002994:	4603      	mov	r3, r0
 8002996:	4323      	orrs	r3, r4
 8002998:	2b00      	cmp	r3, #0
 800299a:	bf0c      	ite	eq
 800299c:	2301      	moveq	r3, #1
 800299e:	2300      	movne	r3, #0
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	e012      	b.n	80029ca <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80029a4:	481a      	ldr	r0, [pc, #104]	@ (8002a10 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80029a6:	f7ff fedd 	bl	8002764 <LL_ADC_IsEnabled>
 80029aa:	4604      	mov	r4, r0
 80029ac:	4819      	ldr	r0, [pc, #100]	@ (8002a14 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80029ae:	f7ff fed9 	bl	8002764 <LL_ADC_IsEnabled>
 80029b2:	4603      	mov	r3, r0
 80029b4:	431c      	orrs	r4, r3
 80029b6:	481a      	ldr	r0, [pc, #104]	@ (8002a20 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80029b8:	f7ff fed4 	bl	8002764 <LL_ADC_IsEnabled>
 80029bc:	4603      	mov	r3, r0
 80029be:	4323      	orrs	r3, r4
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	bf0c      	ite	eq
 80029c4:	2301      	moveq	r3, #1
 80029c6:	2300      	movne	r3, #0
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d012      	beq.n	80029f4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80029ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80029d6:	f023 030f 	bic.w	r3, r3, #15
 80029da:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80029dc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80029de:	e009      	b.n	80029f4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029e4:	f043 0220 	orr.w	r2, r3, #32
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80029f2:	e000      	b.n	80029f6 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80029f4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80029fe:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3784      	adds	r7, #132	@ 0x84
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd90      	pop	{r4, r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	50000100 	.word	0x50000100
 8002a10:	50000400 	.word	0x50000400
 8002a14:	50000500 	.word	0x50000500
 8002a18:	50000300 	.word	0x50000300
 8002a1c:	50000700 	.word	0x50000700
 8002a20:	50000600 	.word	0x50000600

08002a24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b085      	sub	sp, #20
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f003 0307 	and.w	r3, r3, #7
 8002a32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a34:	4b0c      	ldr	r3, [pc, #48]	@ (8002a68 <__NVIC_SetPriorityGrouping+0x44>)
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a3a:	68ba      	ldr	r2, [r7, #8]
 8002a3c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a40:	4013      	ands	r3, r2
 8002a42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a4c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a56:	4a04      	ldr	r2, [pc, #16]	@ (8002a68 <__NVIC_SetPriorityGrouping+0x44>)
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	60d3      	str	r3, [r2, #12]
}
 8002a5c:	bf00      	nop
 8002a5e:	3714      	adds	r7, #20
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr
 8002a68:	e000ed00 	.word	0xe000ed00

08002a6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a70:	4b04      	ldr	r3, [pc, #16]	@ (8002a84 <__NVIC_GetPriorityGrouping+0x18>)
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	0a1b      	lsrs	r3, r3, #8
 8002a76:	f003 0307 	and.w	r3, r3, #7
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr
 8002a84:	e000ed00 	.word	0xe000ed00

08002a88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	4603      	mov	r3, r0
 8002a90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	db0b      	blt.n	8002ab2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a9a:	79fb      	ldrb	r3, [r7, #7]
 8002a9c:	f003 021f 	and.w	r2, r3, #31
 8002aa0:	4907      	ldr	r1, [pc, #28]	@ (8002ac0 <__NVIC_EnableIRQ+0x38>)
 8002aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa6:	095b      	lsrs	r3, r3, #5
 8002aa8:	2001      	movs	r0, #1
 8002aaa:	fa00 f202 	lsl.w	r2, r0, r2
 8002aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ab2:	bf00      	nop
 8002ab4:	370c      	adds	r7, #12
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	e000e100 	.word	0xe000e100

08002ac4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	4603      	mov	r3, r0
 8002acc:	6039      	str	r1, [r7, #0]
 8002ace:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ad0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	db0a      	blt.n	8002aee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	b2da      	uxtb	r2, r3
 8002adc:	490c      	ldr	r1, [pc, #48]	@ (8002b10 <__NVIC_SetPriority+0x4c>)
 8002ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae2:	0112      	lsls	r2, r2, #4
 8002ae4:	b2d2      	uxtb	r2, r2
 8002ae6:	440b      	add	r3, r1
 8002ae8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002aec:	e00a      	b.n	8002b04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	b2da      	uxtb	r2, r3
 8002af2:	4908      	ldr	r1, [pc, #32]	@ (8002b14 <__NVIC_SetPriority+0x50>)
 8002af4:	79fb      	ldrb	r3, [r7, #7]
 8002af6:	f003 030f 	and.w	r3, r3, #15
 8002afa:	3b04      	subs	r3, #4
 8002afc:	0112      	lsls	r2, r2, #4
 8002afe:	b2d2      	uxtb	r2, r2
 8002b00:	440b      	add	r3, r1
 8002b02:	761a      	strb	r2, [r3, #24]
}
 8002b04:	bf00      	nop
 8002b06:	370c      	adds	r7, #12
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr
 8002b10:	e000e100 	.word	0xe000e100
 8002b14:	e000ed00 	.word	0xe000ed00

08002b18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b089      	sub	sp, #36	@ 0x24
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	60b9      	str	r1, [r7, #8]
 8002b22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f003 0307 	and.w	r3, r3, #7
 8002b2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	f1c3 0307 	rsb	r3, r3, #7
 8002b32:	2b04      	cmp	r3, #4
 8002b34:	bf28      	it	cs
 8002b36:	2304      	movcs	r3, #4
 8002b38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	3304      	adds	r3, #4
 8002b3e:	2b06      	cmp	r3, #6
 8002b40:	d902      	bls.n	8002b48 <NVIC_EncodePriority+0x30>
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	3b03      	subs	r3, #3
 8002b46:	e000      	b.n	8002b4a <NVIC_EncodePriority+0x32>
 8002b48:	2300      	movs	r3, #0
 8002b4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b4c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b50:	69bb      	ldr	r3, [r7, #24]
 8002b52:	fa02 f303 	lsl.w	r3, r2, r3
 8002b56:	43da      	mvns	r2, r3
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	401a      	ands	r2, r3
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b60:	f04f 31ff 	mov.w	r1, #4294967295
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	fa01 f303 	lsl.w	r3, r1, r3
 8002b6a:	43d9      	mvns	r1, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b70:	4313      	orrs	r3, r2
         );
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3724      	adds	r7, #36	@ 0x24
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
	...

08002b80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b90:	d301      	bcc.n	8002b96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b92:	2301      	movs	r3, #1
 8002b94:	e00f      	b.n	8002bb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b96:	4a0a      	ldr	r2, [pc, #40]	@ (8002bc0 <SysTick_Config+0x40>)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b9e:	210f      	movs	r1, #15
 8002ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ba4:	f7ff ff8e 	bl	8002ac4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ba8:	4b05      	ldr	r3, [pc, #20]	@ (8002bc0 <SysTick_Config+0x40>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bae:	4b04      	ldr	r3, [pc, #16]	@ (8002bc0 <SysTick_Config+0x40>)
 8002bb0:	2207      	movs	r2, #7
 8002bb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bb4:	2300      	movs	r3, #0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3708      	adds	r7, #8
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	e000e010 	.word	0xe000e010

08002bc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f7ff ff29 	bl	8002a24 <__NVIC_SetPriorityGrouping>
}
 8002bd2:	bf00      	nop
 8002bd4:	3708      	adds	r7, #8
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}

08002bda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bda:	b580      	push	{r7, lr}
 8002bdc:	b086      	sub	sp, #24
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	4603      	mov	r3, r0
 8002be2:	60b9      	str	r1, [r7, #8]
 8002be4:	607a      	str	r2, [r7, #4]
 8002be6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002be8:	f7ff ff40 	bl	8002a6c <__NVIC_GetPriorityGrouping>
 8002bec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	68b9      	ldr	r1, [r7, #8]
 8002bf2:	6978      	ldr	r0, [r7, #20]
 8002bf4:	f7ff ff90 	bl	8002b18 <NVIC_EncodePriority>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bfe:	4611      	mov	r1, r2
 8002c00:	4618      	mov	r0, r3
 8002c02:	f7ff ff5f 	bl	8002ac4 <__NVIC_SetPriority>
}
 8002c06:	bf00      	nop
 8002c08:	3718      	adds	r7, #24
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}

08002c0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	b082      	sub	sp, #8
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	4603      	mov	r3, r0
 8002c16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f7ff ff33 	bl	8002a88 <__NVIC_EnableIRQ>
}
 8002c22:	bf00      	nop
 8002c24:	3708      	adds	r7, #8
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b082      	sub	sp, #8
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f7ff ffa4 	bl	8002b80 <SysTick_Config>
 8002c38:	4603      	mov	r3, r0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3708      	adds	r7, #8
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
	...

08002c44 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d101      	bne.n	8002c56 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e08d      	b.n	8002d72 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	4b47      	ldr	r3, [pc, #284]	@ (8002d7c <HAL_DMA_Init+0x138>)
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d80f      	bhi.n	8002c82 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	461a      	mov	r2, r3
 8002c68:	4b45      	ldr	r3, [pc, #276]	@ (8002d80 <HAL_DMA_Init+0x13c>)
 8002c6a:	4413      	add	r3, r2
 8002c6c:	4a45      	ldr	r2, [pc, #276]	@ (8002d84 <HAL_DMA_Init+0x140>)
 8002c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c72:	091b      	lsrs	r3, r3, #4
 8002c74:	009a      	lsls	r2, r3, #2
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a42      	ldr	r2, [pc, #264]	@ (8002d88 <HAL_DMA_Init+0x144>)
 8002c7e:	641a      	str	r2, [r3, #64]	@ 0x40
 8002c80:	e00e      	b.n	8002ca0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	461a      	mov	r2, r3
 8002c88:	4b40      	ldr	r3, [pc, #256]	@ (8002d8c <HAL_DMA_Init+0x148>)
 8002c8a:	4413      	add	r3, r2
 8002c8c:	4a3d      	ldr	r2, [pc, #244]	@ (8002d84 <HAL_DMA_Init+0x140>)
 8002c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c92:	091b      	lsrs	r3, r3, #4
 8002c94:	009a      	lsls	r2, r3, #2
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a3c      	ldr	r2, [pc, #240]	@ (8002d90 <HAL_DMA_Init+0x14c>)
 8002c9e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2202      	movs	r2, #2
 8002ca4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002cb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002cba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002cc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	699b      	ldr	r3, [r3, #24]
 8002cd6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cdc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a1b      	ldr	r3, [r3, #32]
 8002ce2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002ce4:	68fa      	ldr	r2, [r7, #12]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	68fa      	ldr	r2, [r7, #12]
 8002cf0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f000 f964 	bl	8002fc0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002d00:	d102      	bne.n	8002d08 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685a      	ldr	r2, [r3, #4]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d10:	b2d2      	uxtb	r2, r2
 8002d12:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002d1c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d010      	beq.n	8002d48 <HAL_DMA_Init+0x104>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	2b04      	cmp	r3, #4
 8002d2c:	d80c      	bhi.n	8002d48 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 f984 	bl	800303c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d38:	2200      	movs	r2, #0
 8002d3a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002d44:	605a      	str	r2, [r3, #4]
 8002d46:	e008      	b.n	8002d5a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3710      	adds	r7, #16
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	40020407 	.word	0x40020407
 8002d80:	bffdfff8 	.word	0xbffdfff8
 8002d84:	cccccccd 	.word	0xcccccccd
 8002d88:	40020000 	.word	0x40020000
 8002d8c:	bffdfbf8 	.word	0xbffdfbf8
 8002d90:	40020400 	.word	0x40020400

08002d94 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d00d      	beq.n	8002dc8 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2204      	movs	r2, #4
 8002db0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2201      	movs	r2, #1
 8002db6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	73fb      	strb	r3, [r7, #15]
 8002dc6:	e047      	b.n	8002e58 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f022 020e 	bic.w	r2, r2, #14
 8002dd6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f022 0201 	bic.w	r2, r2, #1
 8002de6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002df2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002df6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dfc:	f003 021f 	and.w	r2, r3, #31
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e04:	2101      	movs	r1, #1
 8002e06:	fa01 f202 	lsl.w	r2, r1, r2
 8002e0a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002e14:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d00c      	beq.n	8002e38 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e28:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e2c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002e36:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d003      	beq.n	8002e58 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	4798      	blx	r3
    }
  }
  return status;
 8002e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3710      	adds	r7, #16
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}

08002e62 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e62:	b580      	push	{r7, lr}
 8002e64:	b084      	sub	sp, #16
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e7e:	f003 031f 	and.w	r3, r3, #31
 8002e82:	2204      	movs	r2, #4
 8002e84:	409a      	lsls	r2, r3
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	4013      	ands	r3, r2
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d026      	beq.n	8002edc <HAL_DMA_IRQHandler+0x7a>
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	f003 0304 	and.w	r3, r3, #4
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d021      	beq.n	8002edc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0320 	and.w	r3, r3, #32
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d107      	bne.n	8002eb6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f022 0204 	bic.w	r2, r2, #4
 8002eb4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eba:	f003 021f 	and.w	r2, r3, #31
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec2:	2104      	movs	r1, #4
 8002ec4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ec8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d071      	beq.n	8002fb6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002eda:	e06c      	b.n	8002fb6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ee0:	f003 031f 	and.w	r3, r3, #31
 8002ee4:	2202      	movs	r2, #2
 8002ee6:	409a      	lsls	r2, r3
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	4013      	ands	r3, r2
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d02e      	beq.n	8002f4e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	f003 0302 	and.w	r3, r3, #2
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d029      	beq.n	8002f4e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0320 	and.w	r3, r3, #32
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d10b      	bne.n	8002f20 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f022 020a 	bic.w	r2, r2, #10
 8002f16:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f24:	f003 021f 	and.w	r2, r3, #31
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f2c:	2102      	movs	r1, #2
 8002f2e:	fa01 f202 	lsl.w	r2, r1, r2
 8002f32:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d038      	beq.n	8002fb6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002f4c:	e033      	b.n	8002fb6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f52:	f003 031f 	and.w	r3, r3, #31
 8002f56:	2208      	movs	r2, #8
 8002f58:	409a      	lsls	r2, r3
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d02a      	beq.n	8002fb8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	f003 0308 	and.w	r3, r3, #8
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d025      	beq.n	8002fb8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f022 020e 	bic.w	r2, r2, #14
 8002f7a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f80:	f003 021f 	and.w	r2, r3, #31
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f88:	2101      	movs	r1, #1
 8002f8a:	fa01 f202 	lsl.w	r2, r1, r2
 8002f8e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d004      	beq.n	8002fb8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002fb6:	bf00      	nop
 8002fb8:	bf00      	nop
}
 8002fba:	3710      	adds	r7, #16
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b087      	sub	sp, #28
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	461a      	mov	r2, r3
 8002fce:	4b16      	ldr	r3, [pc, #88]	@ (8003028 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d802      	bhi.n	8002fda <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002fd4:	4b15      	ldr	r3, [pc, #84]	@ (800302c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002fd6:	617b      	str	r3, [r7, #20]
 8002fd8:	e001      	b.n	8002fde <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8002fda:	4b15      	ldr	r3, [pc, #84]	@ (8003030 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002fdc:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	3b08      	subs	r3, #8
 8002fea:	4a12      	ldr	r2, [pc, #72]	@ (8003034 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002fec:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff0:	091b      	lsrs	r3, r3, #4
 8002ff2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ff8:	089b      	lsrs	r3, r3, #2
 8002ffa:	009a      	lsls	r2, r3, #2
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	4413      	add	r3, r2
 8003000:	461a      	mov	r2, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a0b      	ldr	r2, [pc, #44]	@ (8003038 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800300a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f003 031f 	and.w	r3, r3, #31
 8003012:	2201      	movs	r2, #1
 8003014:	409a      	lsls	r2, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800301a:	bf00      	nop
 800301c:	371c      	adds	r7, #28
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop
 8003028:	40020407 	.word	0x40020407
 800302c:	40020800 	.word	0x40020800
 8003030:	40020820 	.word	0x40020820
 8003034:	cccccccd 	.word	0xcccccccd
 8003038:	40020880 	.word	0x40020880

0800303c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800303c:	b480      	push	{r7}
 800303e:	b085      	sub	sp, #20
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	b2db      	uxtb	r3, r3
 800304a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800304c:	68fa      	ldr	r2, [r7, #12]
 800304e:	4b0b      	ldr	r3, [pc, #44]	@ (800307c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003050:	4413      	add	r3, r2
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	461a      	mov	r2, r3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a08      	ldr	r2, [pc, #32]	@ (8003080 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800305e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	3b01      	subs	r3, #1
 8003064:	f003 031f 	and.w	r3, r3, #31
 8003068:	2201      	movs	r2, #1
 800306a:	409a      	lsls	r2, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003070:	bf00      	nop
 8003072:	3714      	adds	r7, #20
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr
 800307c:	1000823f 	.word	0x1000823f
 8003080:	40020940 	.word	0x40020940

08003084 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003084:	b480      	push	{r7}
 8003086:	b087      	sub	sp, #28
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800308e:	2300      	movs	r3, #0
 8003090:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003092:	e15a      	b.n	800334a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	2101      	movs	r1, #1
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	fa01 f303 	lsl.w	r3, r1, r3
 80030a0:	4013      	ands	r3, r2
 80030a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	f000 814c 	beq.w	8003344 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f003 0303 	and.w	r3, r3, #3
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d005      	beq.n	80030c4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d130      	bne.n	8003126 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	005b      	lsls	r3, r3, #1
 80030ce:	2203      	movs	r2, #3
 80030d0:	fa02 f303 	lsl.w	r3, r2, r3
 80030d4:	43db      	mvns	r3, r3
 80030d6:	693a      	ldr	r2, [r7, #16]
 80030d8:	4013      	ands	r3, r2
 80030da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	68da      	ldr	r2, [r3, #12]
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	005b      	lsls	r3, r3, #1
 80030e4:	fa02 f303 	lsl.w	r3, r2, r3
 80030e8:	693a      	ldr	r2, [r7, #16]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	693a      	ldr	r2, [r7, #16]
 80030f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80030fa:	2201      	movs	r2, #1
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003102:	43db      	mvns	r3, r3
 8003104:	693a      	ldr	r2, [r7, #16]
 8003106:	4013      	ands	r3, r2
 8003108:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	091b      	lsrs	r3, r3, #4
 8003110:	f003 0201 	and.w	r2, r3, #1
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	fa02 f303 	lsl.w	r3, r2, r3
 800311a:	693a      	ldr	r2, [r7, #16]
 800311c:	4313      	orrs	r3, r2
 800311e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	693a      	ldr	r2, [r7, #16]
 8003124:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f003 0303 	and.w	r3, r3, #3
 800312e:	2b03      	cmp	r3, #3
 8003130:	d017      	beq.n	8003162 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	005b      	lsls	r3, r3, #1
 800313c:	2203      	movs	r2, #3
 800313e:	fa02 f303 	lsl.w	r3, r2, r3
 8003142:	43db      	mvns	r3, r3
 8003144:	693a      	ldr	r2, [r7, #16]
 8003146:	4013      	ands	r3, r2
 8003148:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	689a      	ldr	r2, [r3, #8]
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	005b      	lsls	r3, r3, #1
 8003152:	fa02 f303 	lsl.w	r3, r2, r3
 8003156:	693a      	ldr	r2, [r7, #16]
 8003158:	4313      	orrs	r3, r2
 800315a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	693a      	ldr	r2, [r7, #16]
 8003160:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	f003 0303 	and.w	r3, r3, #3
 800316a:	2b02      	cmp	r3, #2
 800316c:	d123      	bne.n	80031b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	08da      	lsrs	r2, r3, #3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	3208      	adds	r2, #8
 8003176:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800317a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	f003 0307 	and.w	r3, r3, #7
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	220f      	movs	r2, #15
 8003186:	fa02 f303 	lsl.w	r3, r2, r3
 800318a:	43db      	mvns	r3, r3
 800318c:	693a      	ldr	r2, [r7, #16]
 800318e:	4013      	ands	r3, r2
 8003190:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	691a      	ldr	r2, [r3, #16]
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	f003 0307 	and.w	r3, r3, #7
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	fa02 f303 	lsl.w	r3, r2, r3
 80031a2:	693a      	ldr	r2, [r7, #16]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	08da      	lsrs	r2, r3, #3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	3208      	adds	r2, #8
 80031b0:	6939      	ldr	r1, [r7, #16]
 80031b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	005b      	lsls	r3, r3, #1
 80031c0:	2203      	movs	r2, #3
 80031c2:	fa02 f303 	lsl.w	r3, r2, r3
 80031c6:	43db      	mvns	r3, r3
 80031c8:	693a      	ldr	r2, [r7, #16]
 80031ca:	4013      	ands	r3, r2
 80031cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	f003 0203 	and.w	r2, r3, #3
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	005b      	lsls	r3, r3, #1
 80031da:	fa02 f303 	lsl.w	r3, r2, r3
 80031de:	693a      	ldr	r2, [r7, #16]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	693a      	ldr	r2, [r7, #16]
 80031e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	f000 80a6 	beq.w	8003344 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031f8:	4b5b      	ldr	r3, [pc, #364]	@ (8003368 <HAL_GPIO_Init+0x2e4>)
 80031fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031fc:	4a5a      	ldr	r2, [pc, #360]	@ (8003368 <HAL_GPIO_Init+0x2e4>)
 80031fe:	f043 0301 	orr.w	r3, r3, #1
 8003202:	6613      	str	r3, [r2, #96]	@ 0x60
 8003204:	4b58      	ldr	r3, [pc, #352]	@ (8003368 <HAL_GPIO_Init+0x2e4>)
 8003206:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003208:	f003 0301 	and.w	r3, r3, #1
 800320c:	60bb      	str	r3, [r7, #8]
 800320e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003210:	4a56      	ldr	r2, [pc, #344]	@ (800336c <HAL_GPIO_Init+0x2e8>)
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	089b      	lsrs	r3, r3, #2
 8003216:	3302      	adds	r3, #2
 8003218:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800321c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	f003 0303 	and.w	r3, r3, #3
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	220f      	movs	r2, #15
 8003228:	fa02 f303 	lsl.w	r3, r2, r3
 800322c:	43db      	mvns	r3, r3
 800322e:	693a      	ldr	r2, [r7, #16]
 8003230:	4013      	ands	r3, r2
 8003232:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800323a:	d01f      	beq.n	800327c <HAL_GPIO_Init+0x1f8>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	4a4c      	ldr	r2, [pc, #304]	@ (8003370 <HAL_GPIO_Init+0x2ec>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d019      	beq.n	8003278 <HAL_GPIO_Init+0x1f4>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	4a4b      	ldr	r2, [pc, #300]	@ (8003374 <HAL_GPIO_Init+0x2f0>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d013      	beq.n	8003274 <HAL_GPIO_Init+0x1f0>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	4a4a      	ldr	r2, [pc, #296]	@ (8003378 <HAL_GPIO_Init+0x2f4>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d00d      	beq.n	8003270 <HAL_GPIO_Init+0x1ec>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	4a49      	ldr	r2, [pc, #292]	@ (800337c <HAL_GPIO_Init+0x2f8>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d007      	beq.n	800326c <HAL_GPIO_Init+0x1e8>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	4a48      	ldr	r2, [pc, #288]	@ (8003380 <HAL_GPIO_Init+0x2fc>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d101      	bne.n	8003268 <HAL_GPIO_Init+0x1e4>
 8003264:	2305      	movs	r3, #5
 8003266:	e00a      	b.n	800327e <HAL_GPIO_Init+0x1fa>
 8003268:	2306      	movs	r3, #6
 800326a:	e008      	b.n	800327e <HAL_GPIO_Init+0x1fa>
 800326c:	2304      	movs	r3, #4
 800326e:	e006      	b.n	800327e <HAL_GPIO_Init+0x1fa>
 8003270:	2303      	movs	r3, #3
 8003272:	e004      	b.n	800327e <HAL_GPIO_Init+0x1fa>
 8003274:	2302      	movs	r3, #2
 8003276:	e002      	b.n	800327e <HAL_GPIO_Init+0x1fa>
 8003278:	2301      	movs	r3, #1
 800327a:	e000      	b.n	800327e <HAL_GPIO_Init+0x1fa>
 800327c:	2300      	movs	r3, #0
 800327e:	697a      	ldr	r2, [r7, #20]
 8003280:	f002 0203 	and.w	r2, r2, #3
 8003284:	0092      	lsls	r2, r2, #2
 8003286:	4093      	lsls	r3, r2
 8003288:	693a      	ldr	r2, [r7, #16]
 800328a:	4313      	orrs	r3, r2
 800328c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800328e:	4937      	ldr	r1, [pc, #220]	@ (800336c <HAL_GPIO_Init+0x2e8>)
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	089b      	lsrs	r3, r3, #2
 8003294:	3302      	adds	r3, #2
 8003296:	693a      	ldr	r2, [r7, #16]
 8003298:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800329c:	4b39      	ldr	r3, [pc, #228]	@ (8003384 <HAL_GPIO_Init+0x300>)
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	43db      	mvns	r3, r3
 80032a6:	693a      	ldr	r2, [r7, #16]
 80032a8:	4013      	ands	r3, r2
 80032aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d003      	beq.n	80032c0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80032b8:	693a      	ldr	r2, [r7, #16]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	4313      	orrs	r3, r2
 80032be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80032c0:	4a30      	ldr	r2, [pc, #192]	@ (8003384 <HAL_GPIO_Init+0x300>)
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80032c6:	4b2f      	ldr	r3, [pc, #188]	@ (8003384 <HAL_GPIO_Init+0x300>)
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	43db      	mvns	r3, r3
 80032d0:	693a      	ldr	r2, [r7, #16]
 80032d2:	4013      	ands	r3, r2
 80032d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d003      	beq.n	80032ea <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80032e2:	693a      	ldr	r2, [r7, #16]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80032ea:	4a26      	ldr	r2, [pc, #152]	@ (8003384 <HAL_GPIO_Init+0x300>)
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80032f0:	4b24      	ldr	r3, [pc, #144]	@ (8003384 <HAL_GPIO_Init+0x300>)
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	43db      	mvns	r3, r3
 80032fa:	693a      	ldr	r2, [r7, #16]
 80032fc:	4013      	ands	r3, r2
 80032fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d003      	beq.n	8003314 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800330c:	693a      	ldr	r2, [r7, #16]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	4313      	orrs	r3, r2
 8003312:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003314:	4a1b      	ldr	r2, [pc, #108]	@ (8003384 <HAL_GPIO_Init+0x300>)
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800331a:	4b1a      	ldr	r3, [pc, #104]	@ (8003384 <HAL_GPIO_Init+0x300>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	43db      	mvns	r3, r3
 8003324:	693a      	ldr	r2, [r7, #16]
 8003326:	4013      	ands	r3, r2
 8003328:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d003      	beq.n	800333e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003336:	693a      	ldr	r2, [r7, #16]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	4313      	orrs	r3, r2
 800333c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800333e:	4a11      	ldr	r2, [pc, #68]	@ (8003384 <HAL_GPIO_Init+0x300>)
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	3301      	adds	r3, #1
 8003348:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	fa22 f303 	lsr.w	r3, r2, r3
 8003354:	2b00      	cmp	r3, #0
 8003356:	f47f ae9d 	bne.w	8003094 <HAL_GPIO_Init+0x10>
  }
}
 800335a:	bf00      	nop
 800335c:	bf00      	nop
 800335e:	371c      	adds	r7, #28
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr
 8003368:	40021000 	.word	0x40021000
 800336c:	40010000 	.word	0x40010000
 8003370:	48000400 	.word	0x48000400
 8003374:	48000800 	.word	0x48000800
 8003378:	48000c00 	.word	0x48000c00
 800337c:	48001000 	.word	0x48001000
 8003380:	48001400 	.word	0x48001400
 8003384:	40010400 	.word	0x40010400

08003388 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003388:	b480      	push	{r7}
 800338a:	b085      	sub	sp, #20
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	460b      	mov	r3, r1
 8003392:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	691a      	ldr	r2, [r3, #16]
 8003398:	887b      	ldrh	r3, [r7, #2]
 800339a:	4013      	ands	r3, r2
 800339c:	2b00      	cmp	r3, #0
 800339e:	d002      	beq.n	80033a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80033a0:	2301      	movs	r3, #1
 80033a2:	73fb      	strb	r3, [r7, #15]
 80033a4:	e001      	b.n	80033aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80033a6:	2300      	movs	r3, #0
 80033a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80033aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3714      	adds	r7, #20
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr

080033b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	460b      	mov	r3, r1
 80033c2:	807b      	strh	r3, [r7, #2]
 80033c4:	4613      	mov	r3, r2
 80033c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80033c8:	787b      	ldrb	r3, [r7, #1]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d003      	beq.n	80033d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80033ce:	887a      	ldrh	r2, [r7, #2]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80033d4:	e002      	b.n	80033dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80033d6:	887a      	ldrh	r2, [r7, #2]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80033dc:	bf00      	nop
 80033de:	370c      	adds	r7, #12
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr

080033e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	4603      	mov	r3, r0
 80033f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80033f2:	4b08      	ldr	r3, [pc, #32]	@ (8003414 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033f4:	695a      	ldr	r2, [r3, #20]
 80033f6:	88fb      	ldrh	r3, [r7, #6]
 80033f8:	4013      	ands	r3, r2
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d006      	beq.n	800340c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80033fe:	4a05      	ldr	r2, [pc, #20]	@ (8003414 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003400:	88fb      	ldrh	r3, [r7, #6]
 8003402:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003404:	88fb      	ldrh	r3, [r7, #6]
 8003406:	4618      	mov	r0, r3
 8003408:	f000 f806 	bl	8003418 <HAL_GPIO_EXTI_Callback>
  }
}
 800340c:	bf00      	nop
 800340e:	3708      	adds	r7, #8
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}
 8003414:	40010400 	.word	0x40010400

08003418 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	4603      	mov	r3, r0
 8003420:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003422:	bf00      	nop
 8003424:	370c      	adds	r7, #12
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr
	...

08003430 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003430:	b480      	push	{r7}
 8003432:	b085      	sub	sp, #20
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d141      	bne.n	80034c2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800343e:	4b4b      	ldr	r3, [pc, #300]	@ (800356c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003446:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800344a:	d131      	bne.n	80034b0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800344c:	4b47      	ldr	r3, [pc, #284]	@ (800356c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800344e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003452:	4a46      	ldr	r2, [pc, #280]	@ (800356c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003454:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003458:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800345c:	4b43      	ldr	r3, [pc, #268]	@ (800356c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003464:	4a41      	ldr	r2, [pc, #260]	@ (800356c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003466:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800346a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800346c:	4b40      	ldr	r3, [pc, #256]	@ (8003570 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	2232      	movs	r2, #50	@ 0x32
 8003472:	fb02 f303 	mul.w	r3, r2, r3
 8003476:	4a3f      	ldr	r2, [pc, #252]	@ (8003574 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003478:	fba2 2303 	umull	r2, r3, r2, r3
 800347c:	0c9b      	lsrs	r3, r3, #18
 800347e:	3301      	adds	r3, #1
 8003480:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003482:	e002      	b.n	800348a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	3b01      	subs	r3, #1
 8003488:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800348a:	4b38      	ldr	r3, [pc, #224]	@ (800356c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800348c:	695b      	ldr	r3, [r3, #20]
 800348e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003492:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003496:	d102      	bne.n	800349e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d1f2      	bne.n	8003484 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800349e:	4b33      	ldr	r3, [pc, #204]	@ (800356c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034a0:	695b      	ldr	r3, [r3, #20]
 80034a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034aa:	d158      	bne.n	800355e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	e057      	b.n	8003560 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80034b0:	4b2e      	ldr	r3, [pc, #184]	@ (800356c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80034b6:	4a2d      	ldr	r2, [pc, #180]	@ (800356c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80034bc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80034c0:	e04d      	b.n	800355e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80034c8:	d141      	bne.n	800354e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80034ca:	4b28      	ldr	r3, [pc, #160]	@ (800356c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80034d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034d6:	d131      	bne.n	800353c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80034d8:	4b24      	ldr	r3, [pc, #144]	@ (800356c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80034de:	4a23      	ldr	r2, [pc, #140]	@ (800356c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034e4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80034e8:	4b20      	ldr	r3, [pc, #128]	@ (800356c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80034f0:	4a1e      	ldr	r2, [pc, #120]	@ (800356c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80034f6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80034f8:	4b1d      	ldr	r3, [pc, #116]	@ (8003570 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2232      	movs	r2, #50	@ 0x32
 80034fe:	fb02 f303 	mul.w	r3, r2, r3
 8003502:	4a1c      	ldr	r2, [pc, #112]	@ (8003574 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003504:	fba2 2303 	umull	r2, r3, r2, r3
 8003508:	0c9b      	lsrs	r3, r3, #18
 800350a:	3301      	adds	r3, #1
 800350c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800350e:	e002      	b.n	8003516 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	3b01      	subs	r3, #1
 8003514:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003516:	4b15      	ldr	r3, [pc, #84]	@ (800356c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003518:	695b      	ldr	r3, [r3, #20]
 800351a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800351e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003522:	d102      	bne.n	800352a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d1f2      	bne.n	8003510 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800352a:	4b10      	ldr	r3, [pc, #64]	@ (800356c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800352c:	695b      	ldr	r3, [r3, #20]
 800352e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003532:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003536:	d112      	bne.n	800355e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003538:	2303      	movs	r3, #3
 800353a:	e011      	b.n	8003560 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800353c:	4b0b      	ldr	r3, [pc, #44]	@ (800356c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800353e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003542:	4a0a      	ldr	r2, [pc, #40]	@ (800356c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003544:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003548:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800354c:	e007      	b.n	800355e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800354e:	4b07      	ldr	r3, [pc, #28]	@ (800356c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003556:	4a05      	ldr	r2, [pc, #20]	@ (800356c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003558:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800355c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800355e:	2300      	movs	r3, #0
}
 8003560:	4618      	mov	r0, r3
 8003562:	3714      	adds	r7, #20
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr
 800356c:	40007000 	.word	0x40007000
 8003570:	20000000 	.word	0x20000000
 8003574:	431bde83 	.word	0x431bde83

08003578 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003578:	b480      	push	{r7}
 800357a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800357c:	4b05      	ldr	r3, [pc, #20]	@ (8003594 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	4a04      	ldr	r2, [pc, #16]	@ (8003594 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003582:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003586:	6093      	str	r3, [r2, #8]
}
 8003588:	bf00      	nop
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	40007000 	.word	0x40007000

08003598 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b088      	sub	sp, #32
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d101      	bne.n	80035aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e2fe      	b.n	8003ba8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0301 	and.w	r3, r3, #1
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d075      	beq.n	80036a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035b6:	4b97      	ldr	r3, [pc, #604]	@ (8003814 <HAL_RCC_OscConfig+0x27c>)
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	f003 030c 	and.w	r3, r3, #12
 80035be:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035c0:	4b94      	ldr	r3, [pc, #592]	@ (8003814 <HAL_RCC_OscConfig+0x27c>)
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	f003 0303 	and.w	r3, r3, #3
 80035c8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	2b0c      	cmp	r3, #12
 80035ce:	d102      	bne.n	80035d6 <HAL_RCC_OscConfig+0x3e>
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	2b03      	cmp	r3, #3
 80035d4:	d002      	beq.n	80035dc <HAL_RCC_OscConfig+0x44>
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	2b08      	cmp	r3, #8
 80035da:	d10b      	bne.n	80035f4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035dc:	4b8d      	ldr	r3, [pc, #564]	@ (8003814 <HAL_RCC_OscConfig+0x27c>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d05b      	beq.n	80036a0 <HAL_RCC_OscConfig+0x108>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d157      	bne.n	80036a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e2d9      	b.n	8003ba8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035fc:	d106      	bne.n	800360c <HAL_RCC_OscConfig+0x74>
 80035fe:	4b85      	ldr	r3, [pc, #532]	@ (8003814 <HAL_RCC_OscConfig+0x27c>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a84      	ldr	r2, [pc, #528]	@ (8003814 <HAL_RCC_OscConfig+0x27c>)
 8003604:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003608:	6013      	str	r3, [r2, #0]
 800360a:	e01d      	b.n	8003648 <HAL_RCC_OscConfig+0xb0>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003614:	d10c      	bne.n	8003630 <HAL_RCC_OscConfig+0x98>
 8003616:	4b7f      	ldr	r3, [pc, #508]	@ (8003814 <HAL_RCC_OscConfig+0x27c>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a7e      	ldr	r2, [pc, #504]	@ (8003814 <HAL_RCC_OscConfig+0x27c>)
 800361c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003620:	6013      	str	r3, [r2, #0]
 8003622:	4b7c      	ldr	r3, [pc, #496]	@ (8003814 <HAL_RCC_OscConfig+0x27c>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a7b      	ldr	r2, [pc, #492]	@ (8003814 <HAL_RCC_OscConfig+0x27c>)
 8003628:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800362c:	6013      	str	r3, [r2, #0]
 800362e:	e00b      	b.n	8003648 <HAL_RCC_OscConfig+0xb0>
 8003630:	4b78      	ldr	r3, [pc, #480]	@ (8003814 <HAL_RCC_OscConfig+0x27c>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a77      	ldr	r2, [pc, #476]	@ (8003814 <HAL_RCC_OscConfig+0x27c>)
 8003636:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800363a:	6013      	str	r3, [r2, #0]
 800363c:	4b75      	ldr	r3, [pc, #468]	@ (8003814 <HAL_RCC_OscConfig+0x27c>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a74      	ldr	r2, [pc, #464]	@ (8003814 <HAL_RCC_OscConfig+0x27c>)
 8003642:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003646:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d013      	beq.n	8003678 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003650:	f7fd fdc8 	bl	80011e4 <HAL_GetTick>
 8003654:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003656:	e008      	b.n	800366a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003658:	f7fd fdc4 	bl	80011e4 <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	2b64      	cmp	r3, #100	@ 0x64
 8003664:	d901      	bls.n	800366a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e29e      	b.n	8003ba8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800366a:	4b6a      	ldr	r3, [pc, #424]	@ (8003814 <HAL_RCC_OscConfig+0x27c>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d0f0      	beq.n	8003658 <HAL_RCC_OscConfig+0xc0>
 8003676:	e014      	b.n	80036a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003678:	f7fd fdb4 	bl	80011e4 <HAL_GetTick>
 800367c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800367e:	e008      	b.n	8003692 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003680:	f7fd fdb0 	bl	80011e4 <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	2b64      	cmp	r3, #100	@ 0x64
 800368c:	d901      	bls.n	8003692 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e28a      	b.n	8003ba8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003692:	4b60      	ldr	r3, [pc, #384]	@ (8003814 <HAL_RCC_OscConfig+0x27c>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d1f0      	bne.n	8003680 <HAL_RCC_OscConfig+0xe8>
 800369e:	e000      	b.n	80036a2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0302 	and.w	r3, r3, #2
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d075      	beq.n	800379a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036ae:	4b59      	ldr	r3, [pc, #356]	@ (8003814 <HAL_RCC_OscConfig+0x27c>)
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f003 030c 	and.w	r3, r3, #12
 80036b6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036b8:	4b56      	ldr	r3, [pc, #344]	@ (8003814 <HAL_RCC_OscConfig+0x27c>)
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	f003 0303 	and.w	r3, r3, #3
 80036c0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	2b0c      	cmp	r3, #12
 80036c6:	d102      	bne.n	80036ce <HAL_RCC_OscConfig+0x136>
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d002      	beq.n	80036d4 <HAL_RCC_OscConfig+0x13c>
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	2b04      	cmp	r3, #4
 80036d2:	d11f      	bne.n	8003714 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036d4:	4b4f      	ldr	r3, [pc, #316]	@ (8003814 <HAL_RCC_OscConfig+0x27c>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d005      	beq.n	80036ec <HAL_RCC_OscConfig+0x154>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d101      	bne.n	80036ec <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e25d      	b.n	8003ba8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036ec:	4b49      	ldr	r3, [pc, #292]	@ (8003814 <HAL_RCC_OscConfig+0x27c>)
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	691b      	ldr	r3, [r3, #16]
 80036f8:	061b      	lsls	r3, r3, #24
 80036fa:	4946      	ldr	r1, [pc, #280]	@ (8003814 <HAL_RCC_OscConfig+0x27c>)
 80036fc:	4313      	orrs	r3, r2
 80036fe:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003700:	4b45      	ldr	r3, [pc, #276]	@ (8003818 <HAL_RCC_OscConfig+0x280>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4618      	mov	r0, r3
 8003706:	f7fd fd21 	bl	800114c <HAL_InitTick>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d043      	beq.n	8003798 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e249      	b.n	8003ba8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d023      	beq.n	8003764 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800371c:	4b3d      	ldr	r3, [pc, #244]	@ (8003814 <HAL_RCC_OscConfig+0x27c>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a3c      	ldr	r2, [pc, #240]	@ (8003814 <HAL_RCC_OscConfig+0x27c>)
 8003722:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003726:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003728:	f7fd fd5c 	bl	80011e4 <HAL_GetTick>
 800372c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800372e:	e008      	b.n	8003742 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003730:	f7fd fd58 	bl	80011e4 <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	2b02      	cmp	r3, #2
 800373c:	d901      	bls.n	8003742 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e232      	b.n	8003ba8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003742:	4b34      	ldr	r3, [pc, #208]	@ (8003814 <HAL_RCC_OscConfig+0x27c>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800374a:	2b00      	cmp	r3, #0
 800374c:	d0f0      	beq.n	8003730 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800374e:	4b31      	ldr	r3, [pc, #196]	@ (8003814 <HAL_RCC_OscConfig+0x27c>)
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	691b      	ldr	r3, [r3, #16]
 800375a:	061b      	lsls	r3, r3, #24
 800375c:	492d      	ldr	r1, [pc, #180]	@ (8003814 <HAL_RCC_OscConfig+0x27c>)
 800375e:	4313      	orrs	r3, r2
 8003760:	604b      	str	r3, [r1, #4]
 8003762:	e01a      	b.n	800379a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003764:	4b2b      	ldr	r3, [pc, #172]	@ (8003814 <HAL_RCC_OscConfig+0x27c>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a2a      	ldr	r2, [pc, #168]	@ (8003814 <HAL_RCC_OscConfig+0x27c>)
 800376a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800376e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003770:	f7fd fd38 	bl	80011e4 <HAL_GetTick>
 8003774:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003776:	e008      	b.n	800378a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003778:	f7fd fd34 	bl	80011e4 <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	2b02      	cmp	r3, #2
 8003784:	d901      	bls.n	800378a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e20e      	b.n	8003ba8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800378a:	4b22      	ldr	r3, [pc, #136]	@ (8003814 <HAL_RCC_OscConfig+0x27c>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003792:	2b00      	cmp	r3, #0
 8003794:	d1f0      	bne.n	8003778 <HAL_RCC_OscConfig+0x1e0>
 8003796:	e000      	b.n	800379a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003798:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0308 	and.w	r3, r3, #8
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d041      	beq.n	800382a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d01c      	beq.n	80037e8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037ae:	4b19      	ldr	r3, [pc, #100]	@ (8003814 <HAL_RCC_OscConfig+0x27c>)
 80037b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037b4:	4a17      	ldr	r2, [pc, #92]	@ (8003814 <HAL_RCC_OscConfig+0x27c>)
 80037b6:	f043 0301 	orr.w	r3, r3, #1
 80037ba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037be:	f7fd fd11 	bl	80011e4 <HAL_GetTick>
 80037c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80037c4:	e008      	b.n	80037d8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037c6:	f7fd fd0d 	bl	80011e4 <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d901      	bls.n	80037d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80037d4:	2303      	movs	r3, #3
 80037d6:	e1e7      	b.n	8003ba8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80037d8:	4b0e      	ldr	r3, [pc, #56]	@ (8003814 <HAL_RCC_OscConfig+0x27c>)
 80037da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037de:	f003 0302 	and.w	r3, r3, #2
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d0ef      	beq.n	80037c6 <HAL_RCC_OscConfig+0x22e>
 80037e6:	e020      	b.n	800382a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037e8:	4b0a      	ldr	r3, [pc, #40]	@ (8003814 <HAL_RCC_OscConfig+0x27c>)
 80037ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037ee:	4a09      	ldr	r2, [pc, #36]	@ (8003814 <HAL_RCC_OscConfig+0x27c>)
 80037f0:	f023 0301 	bic.w	r3, r3, #1
 80037f4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037f8:	f7fd fcf4 	bl	80011e4 <HAL_GetTick>
 80037fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037fe:	e00d      	b.n	800381c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003800:	f7fd fcf0 	bl	80011e4 <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	2b02      	cmp	r3, #2
 800380c:	d906      	bls.n	800381c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e1ca      	b.n	8003ba8 <HAL_RCC_OscConfig+0x610>
 8003812:	bf00      	nop
 8003814:	40021000 	.word	0x40021000
 8003818:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800381c:	4b8c      	ldr	r3, [pc, #560]	@ (8003a50 <HAL_RCC_OscConfig+0x4b8>)
 800381e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003822:	f003 0302 	and.w	r3, r3, #2
 8003826:	2b00      	cmp	r3, #0
 8003828:	d1ea      	bne.n	8003800 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0304 	and.w	r3, r3, #4
 8003832:	2b00      	cmp	r3, #0
 8003834:	f000 80a6 	beq.w	8003984 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003838:	2300      	movs	r3, #0
 800383a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800383c:	4b84      	ldr	r3, [pc, #528]	@ (8003a50 <HAL_RCC_OscConfig+0x4b8>)
 800383e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003840:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003844:	2b00      	cmp	r3, #0
 8003846:	d101      	bne.n	800384c <HAL_RCC_OscConfig+0x2b4>
 8003848:	2301      	movs	r3, #1
 800384a:	e000      	b.n	800384e <HAL_RCC_OscConfig+0x2b6>
 800384c:	2300      	movs	r3, #0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d00d      	beq.n	800386e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003852:	4b7f      	ldr	r3, [pc, #508]	@ (8003a50 <HAL_RCC_OscConfig+0x4b8>)
 8003854:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003856:	4a7e      	ldr	r2, [pc, #504]	@ (8003a50 <HAL_RCC_OscConfig+0x4b8>)
 8003858:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800385c:	6593      	str	r3, [r2, #88]	@ 0x58
 800385e:	4b7c      	ldr	r3, [pc, #496]	@ (8003a50 <HAL_RCC_OscConfig+0x4b8>)
 8003860:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003862:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003866:	60fb      	str	r3, [r7, #12]
 8003868:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800386a:	2301      	movs	r3, #1
 800386c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800386e:	4b79      	ldr	r3, [pc, #484]	@ (8003a54 <HAL_RCC_OscConfig+0x4bc>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003876:	2b00      	cmp	r3, #0
 8003878:	d118      	bne.n	80038ac <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800387a:	4b76      	ldr	r3, [pc, #472]	@ (8003a54 <HAL_RCC_OscConfig+0x4bc>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a75      	ldr	r2, [pc, #468]	@ (8003a54 <HAL_RCC_OscConfig+0x4bc>)
 8003880:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003884:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003886:	f7fd fcad 	bl	80011e4 <HAL_GetTick>
 800388a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800388c:	e008      	b.n	80038a0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800388e:	f7fd fca9 	bl	80011e4 <HAL_GetTick>
 8003892:	4602      	mov	r2, r0
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	2b02      	cmp	r3, #2
 800389a:	d901      	bls.n	80038a0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	e183      	b.n	8003ba8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038a0:	4b6c      	ldr	r3, [pc, #432]	@ (8003a54 <HAL_RCC_OscConfig+0x4bc>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d0f0      	beq.n	800388e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d108      	bne.n	80038c6 <HAL_RCC_OscConfig+0x32e>
 80038b4:	4b66      	ldr	r3, [pc, #408]	@ (8003a50 <HAL_RCC_OscConfig+0x4b8>)
 80038b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038ba:	4a65      	ldr	r2, [pc, #404]	@ (8003a50 <HAL_RCC_OscConfig+0x4b8>)
 80038bc:	f043 0301 	orr.w	r3, r3, #1
 80038c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80038c4:	e024      	b.n	8003910 <HAL_RCC_OscConfig+0x378>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	2b05      	cmp	r3, #5
 80038cc:	d110      	bne.n	80038f0 <HAL_RCC_OscConfig+0x358>
 80038ce:	4b60      	ldr	r3, [pc, #384]	@ (8003a50 <HAL_RCC_OscConfig+0x4b8>)
 80038d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038d4:	4a5e      	ldr	r2, [pc, #376]	@ (8003a50 <HAL_RCC_OscConfig+0x4b8>)
 80038d6:	f043 0304 	orr.w	r3, r3, #4
 80038da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80038de:	4b5c      	ldr	r3, [pc, #368]	@ (8003a50 <HAL_RCC_OscConfig+0x4b8>)
 80038e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038e4:	4a5a      	ldr	r2, [pc, #360]	@ (8003a50 <HAL_RCC_OscConfig+0x4b8>)
 80038e6:	f043 0301 	orr.w	r3, r3, #1
 80038ea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80038ee:	e00f      	b.n	8003910 <HAL_RCC_OscConfig+0x378>
 80038f0:	4b57      	ldr	r3, [pc, #348]	@ (8003a50 <HAL_RCC_OscConfig+0x4b8>)
 80038f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038f6:	4a56      	ldr	r2, [pc, #344]	@ (8003a50 <HAL_RCC_OscConfig+0x4b8>)
 80038f8:	f023 0301 	bic.w	r3, r3, #1
 80038fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003900:	4b53      	ldr	r3, [pc, #332]	@ (8003a50 <HAL_RCC_OscConfig+0x4b8>)
 8003902:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003906:	4a52      	ldr	r2, [pc, #328]	@ (8003a50 <HAL_RCC_OscConfig+0x4b8>)
 8003908:	f023 0304 	bic.w	r3, r3, #4
 800390c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d016      	beq.n	8003946 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003918:	f7fd fc64 	bl	80011e4 <HAL_GetTick>
 800391c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800391e:	e00a      	b.n	8003936 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003920:	f7fd fc60 	bl	80011e4 <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800392e:	4293      	cmp	r3, r2
 8003930:	d901      	bls.n	8003936 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e138      	b.n	8003ba8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003936:	4b46      	ldr	r3, [pc, #280]	@ (8003a50 <HAL_RCC_OscConfig+0x4b8>)
 8003938:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800393c:	f003 0302 	and.w	r3, r3, #2
 8003940:	2b00      	cmp	r3, #0
 8003942:	d0ed      	beq.n	8003920 <HAL_RCC_OscConfig+0x388>
 8003944:	e015      	b.n	8003972 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003946:	f7fd fc4d 	bl	80011e4 <HAL_GetTick>
 800394a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800394c:	e00a      	b.n	8003964 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800394e:	f7fd fc49 	bl	80011e4 <HAL_GetTick>
 8003952:	4602      	mov	r2, r0
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	f241 3288 	movw	r2, #5000	@ 0x1388
 800395c:	4293      	cmp	r3, r2
 800395e:	d901      	bls.n	8003964 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003960:	2303      	movs	r3, #3
 8003962:	e121      	b.n	8003ba8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003964:	4b3a      	ldr	r3, [pc, #232]	@ (8003a50 <HAL_RCC_OscConfig+0x4b8>)
 8003966:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800396a:	f003 0302 	and.w	r3, r3, #2
 800396e:	2b00      	cmp	r3, #0
 8003970:	d1ed      	bne.n	800394e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003972:	7ffb      	ldrb	r3, [r7, #31]
 8003974:	2b01      	cmp	r3, #1
 8003976:	d105      	bne.n	8003984 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003978:	4b35      	ldr	r3, [pc, #212]	@ (8003a50 <HAL_RCC_OscConfig+0x4b8>)
 800397a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800397c:	4a34      	ldr	r2, [pc, #208]	@ (8003a50 <HAL_RCC_OscConfig+0x4b8>)
 800397e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003982:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0320 	and.w	r3, r3, #32
 800398c:	2b00      	cmp	r3, #0
 800398e:	d03c      	beq.n	8003a0a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	699b      	ldr	r3, [r3, #24]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d01c      	beq.n	80039d2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003998:	4b2d      	ldr	r3, [pc, #180]	@ (8003a50 <HAL_RCC_OscConfig+0x4b8>)
 800399a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800399e:	4a2c      	ldr	r2, [pc, #176]	@ (8003a50 <HAL_RCC_OscConfig+0x4b8>)
 80039a0:	f043 0301 	orr.w	r3, r3, #1
 80039a4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039a8:	f7fd fc1c 	bl	80011e4 <HAL_GetTick>
 80039ac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80039ae:	e008      	b.n	80039c2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80039b0:	f7fd fc18 	bl	80011e4 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d901      	bls.n	80039c2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e0f2      	b.n	8003ba8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80039c2:	4b23      	ldr	r3, [pc, #140]	@ (8003a50 <HAL_RCC_OscConfig+0x4b8>)
 80039c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80039c8:	f003 0302 	and.w	r3, r3, #2
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d0ef      	beq.n	80039b0 <HAL_RCC_OscConfig+0x418>
 80039d0:	e01b      	b.n	8003a0a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80039d2:	4b1f      	ldr	r3, [pc, #124]	@ (8003a50 <HAL_RCC_OscConfig+0x4b8>)
 80039d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80039d8:	4a1d      	ldr	r2, [pc, #116]	@ (8003a50 <HAL_RCC_OscConfig+0x4b8>)
 80039da:	f023 0301 	bic.w	r3, r3, #1
 80039de:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039e2:	f7fd fbff 	bl	80011e4 <HAL_GetTick>
 80039e6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80039e8:	e008      	b.n	80039fc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80039ea:	f7fd fbfb 	bl	80011e4 <HAL_GetTick>
 80039ee:	4602      	mov	r2, r0
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d901      	bls.n	80039fc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80039f8:	2303      	movs	r3, #3
 80039fa:	e0d5      	b.n	8003ba8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80039fc:	4b14      	ldr	r3, [pc, #80]	@ (8003a50 <HAL_RCC_OscConfig+0x4b8>)
 80039fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003a02:	f003 0302 	and.w	r3, r3, #2
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d1ef      	bne.n	80039ea <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	69db      	ldr	r3, [r3, #28]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	f000 80c9 	beq.w	8003ba6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a14:	4b0e      	ldr	r3, [pc, #56]	@ (8003a50 <HAL_RCC_OscConfig+0x4b8>)
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	f003 030c 	and.w	r3, r3, #12
 8003a1c:	2b0c      	cmp	r3, #12
 8003a1e:	f000 8083 	beq.w	8003b28 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	69db      	ldr	r3, [r3, #28]
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d15e      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a2a:	4b09      	ldr	r3, [pc, #36]	@ (8003a50 <HAL_RCC_OscConfig+0x4b8>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a08      	ldr	r2, [pc, #32]	@ (8003a50 <HAL_RCC_OscConfig+0x4b8>)
 8003a30:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003a34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a36:	f7fd fbd5 	bl	80011e4 <HAL_GetTick>
 8003a3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a3c:	e00c      	b.n	8003a58 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a3e:	f7fd fbd1 	bl	80011e4 <HAL_GetTick>
 8003a42:	4602      	mov	r2, r0
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	1ad3      	subs	r3, r2, r3
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	d905      	bls.n	8003a58 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	e0ab      	b.n	8003ba8 <HAL_RCC_OscConfig+0x610>
 8003a50:	40021000 	.word	0x40021000
 8003a54:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a58:	4b55      	ldr	r3, [pc, #340]	@ (8003bb0 <HAL_RCC_OscConfig+0x618>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d1ec      	bne.n	8003a3e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a64:	4b52      	ldr	r3, [pc, #328]	@ (8003bb0 <HAL_RCC_OscConfig+0x618>)
 8003a66:	68da      	ldr	r2, [r3, #12]
 8003a68:	4b52      	ldr	r3, [pc, #328]	@ (8003bb4 <HAL_RCC_OscConfig+0x61c>)
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	6a11      	ldr	r1, [r2, #32]
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003a74:	3a01      	subs	r2, #1
 8003a76:	0112      	lsls	r2, r2, #4
 8003a78:	4311      	orrs	r1, r2
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003a7e:	0212      	lsls	r2, r2, #8
 8003a80:	4311      	orrs	r1, r2
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003a86:	0852      	lsrs	r2, r2, #1
 8003a88:	3a01      	subs	r2, #1
 8003a8a:	0552      	lsls	r2, r2, #21
 8003a8c:	4311      	orrs	r1, r2
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003a92:	0852      	lsrs	r2, r2, #1
 8003a94:	3a01      	subs	r2, #1
 8003a96:	0652      	lsls	r2, r2, #25
 8003a98:	4311      	orrs	r1, r2
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003a9e:	06d2      	lsls	r2, r2, #27
 8003aa0:	430a      	orrs	r2, r1
 8003aa2:	4943      	ldr	r1, [pc, #268]	@ (8003bb0 <HAL_RCC_OscConfig+0x618>)
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003aa8:	4b41      	ldr	r3, [pc, #260]	@ (8003bb0 <HAL_RCC_OscConfig+0x618>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a40      	ldr	r2, [pc, #256]	@ (8003bb0 <HAL_RCC_OscConfig+0x618>)
 8003aae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ab2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ab4:	4b3e      	ldr	r3, [pc, #248]	@ (8003bb0 <HAL_RCC_OscConfig+0x618>)
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	4a3d      	ldr	r2, [pc, #244]	@ (8003bb0 <HAL_RCC_OscConfig+0x618>)
 8003aba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003abe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac0:	f7fd fb90 	bl	80011e4 <HAL_GetTick>
 8003ac4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ac6:	e008      	b.n	8003ada <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ac8:	f7fd fb8c 	bl	80011e4 <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	d901      	bls.n	8003ada <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e066      	b.n	8003ba8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ada:	4b35      	ldr	r3, [pc, #212]	@ (8003bb0 <HAL_RCC_OscConfig+0x618>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d0f0      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x530>
 8003ae6:	e05e      	b.n	8003ba6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ae8:	4b31      	ldr	r3, [pc, #196]	@ (8003bb0 <HAL_RCC_OscConfig+0x618>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a30      	ldr	r2, [pc, #192]	@ (8003bb0 <HAL_RCC_OscConfig+0x618>)
 8003aee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003af2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003af4:	f7fd fb76 	bl	80011e4 <HAL_GetTick>
 8003af8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003afa:	e008      	b.n	8003b0e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003afc:	f7fd fb72 	bl	80011e4 <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d901      	bls.n	8003b0e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e04c      	b.n	8003ba8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b0e:	4b28      	ldr	r3, [pc, #160]	@ (8003bb0 <HAL_RCC_OscConfig+0x618>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d1f0      	bne.n	8003afc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003b1a:	4b25      	ldr	r3, [pc, #148]	@ (8003bb0 <HAL_RCC_OscConfig+0x618>)
 8003b1c:	68da      	ldr	r2, [r3, #12]
 8003b1e:	4924      	ldr	r1, [pc, #144]	@ (8003bb0 <HAL_RCC_OscConfig+0x618>)
 8003b20:	4b25      	ldr	r3, [pc, #148]	@ (8003bb8 <HAL_RCC_OscConfig+0x620>)
 8003b22:	4013      	ands	r3, r2
 8003b24:	60cb      	str	r3, [r1, #12]
 8003b26:	e03e      	b.n	8003ba6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	69db      	ldr	r3, [r3, #28]
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d101      	bne.n	8003b34 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e039      	b.n	8003ba8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003b34:	4b1e      	ldr	r3, [pc, #120]	@ (8003bb0 <HAL_RCC_OscConfig+0x618>)
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	f003 0203 	and.w	r2, r3, #3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6a1b      	ldr	r3, [r3, #32]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d12c      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b52:	3b01      	subs	r3, #1
 8003b54:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d123      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b64:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d11b      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b74:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d113      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b84:	085b      	lsrs	r3, r3, #1
 8003b86:	3b01      	subs	r3, #1
 8003b88:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d109      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b98:	085b      	lsrs	r3, r3, #1
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d001      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e000      	b.n	8003ba8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003ba6:	2300      	movs	r3, #0
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3720      	adds	r7, #32
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	40021000 	.word	0x40021000
 8003bb4:	019f800c 	.word	0x019f800c
 8003bb8:	feeefffc 	.word	0xfeeefffc

08003bbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b086      	sub	sp, #24
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d101      	bne.n	8003bd4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e11e      	b.n	8003e12 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003bd4:	4b91      	ldr	r3, [pc, #580]	@ (8003e1c <HAL_RCC_ClockConfig+0x260>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 030f 	and.w	r3, r3, #15
 8003bdc:	683a      	ldr	r2, [r7, #0]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d910      	bls.n	8003c04 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003be2:	4b8e      	ldr	r3, [pc, #568]	@ (8003e1c <HAL_RCC_ClockConfig+0x260>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f023 020f 	bic.w	r2, r3, #15
 8003bea:	498c      	ldr	r1, [pc, #560]	@ (8003e1c <HAL_RCC_ClockConfig+0x260>)
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bf2:	4b8a      	ldr	r3, [pc, #552]	@ (8003e1c <HAL_RCC_ClockConfig+0x260>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 030f 	and.w	r3, r3, #15
 8003bfa:	683a      	ldr	r2, [r7, #0]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d001      	beq.n	8003c04 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e106      	b.n	8003e12 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0301 	and.w	r3, r3, #1
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d073      	beq.n	8003cf8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	2b03      	cmp	r3, #3
 8003c16:	d129      	bne.n	8003c6c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c18:	4b81      	ldr	r3, [pc, #516]	@ (8003e20 <HAL_RCC_ClockConfig+0x264>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d101      	bne.n	8003c28 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e0f4      	b.n	8003e12 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003c28:	f000 f99e 	bl	8003f68 <RCC_GetSysClockFreqFromPLLSource>
 8003c2c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	4a7c      	ldr	r2, [pc, #496]	@ (8003e24 <HAL_RCC_ClockConfig+0x268>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d93f      	bls.n	8003cb6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003c36:	4b7a      	ldr	r3, [pc, #488]	@ (8003e20 <HAL_RCC_ClockConfig+0x264>)
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d009      	beq.n	8003c56 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d033      	beq.n	8003cb6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d12f      	bne.n	8003cb6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003c56:	4b72      	ldr	r3, [pc, #456]	@ (8003e20 <HAL_RCC_ClockConfig+0x264>)
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003c5e:	4a70      	ldr	r2, [pc, #448]	@ (8003e20 <HAL_RCC_ClockConfig+0x264>)
 8003c60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c64:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003c66:	2380      	movs	r3, #128	@ 0x80
 8003c68:	617b      	str	r3, [r7, #20]
 8003c6a:	e024      	b.n	8003cb6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	d107      	bne.n	8003c84 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c74:	4b6a      	ldr	r3, [pc, #424]	@ (8003e20 <HAL_RCC_ClockConfig+0x264>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d109      	bne.n	8003c94 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e0c6      	b.n	8003e12 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c84:	4b66      	ldr	r3, [pc, #408]	@ (8003e20 <HAL_RCC_ClockConfig+0x264>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d101      	bne.n	8003c94 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e0be      	b.n	8003e12 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003c94:	f000 f8ce 	bl	8003e34 <HAL_RCC_GetSysClockFreq>
 8003c98:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	4a61      	ldr	r2, [pc, #388]	@ (8003e24 <HAL_RCC_ClockConfig+0x268>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d909      	bls.n	8003cb6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003ca2:	4b5f      	ldr	r3, [pc, #380]	@ (8003e20 <HAL_RCC_ClockConfig+0x264>)
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003caa:	4a5d      	ldr	r2, [pc, #372]	@ (8003e20 <HAL_RCC_ClockConfig+0x264>)
 8003cac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003cb0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003cb2:	2380      	movs	r3, #128	@ 0x80
 8003cb4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003cb6:	4b5a      	ldr	r3, [pc, #360]	@ (8003e20 <HAL_RCC_ClockConfig+0x264>)
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f023 0203 	bic.w	r2, r3, #3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	4957      	ldr	r1, [pc, #348]	@ (8003e20 <HAL_RCC_ClockConfig+0x264>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cc8:	f7fd fa8c 	bl	80011e4 <HAL_GetTick>
 8003ccc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cce:	e00a      	b.n	8003ce6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cd0:	f7fd fa88 	bl	80011e4 <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d901      	bls.n	8003ce6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e095      	b.n	8003e12 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ce6:	4b4e      	ldr	r3, [pc, #312]	@ (8003e20 <HAL_RCC_ClockConfig+0x264>)
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	f003 020c 	and.w	r2, r3, #12
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d1eb      	bne.n	8003cd0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0302 	and.w	r3, r3, #2
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d023      	beq.n	8003d4c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0304 	and.w	r3, r3, #4
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d005      	beq.n	8003d1c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d10:	4b43      	ldr	r3, [pc, #268]	@ (8003e20 <HAL_RCC_ClockConfig+0x264>)
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	4a42      	ldr	r2, [pc, #264]	@ (8003e20 <HAL_RCC_ClockConfig+0x264>)
 8003d16:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003d1a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0308 	and.w	r3, r3, #8
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d007      	beq.n	8003d38 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003d28:	4b3d      	ldr	r3, [pc, #244]	@ (8003e20 <HAL_RCC_ClockConfig+0x264>)
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003d30:	4a3b      	ldr	r2, [pc, #236]	@ (8003e20 <HAL_RCC_ClockConfig+0x264>)
 8003d32:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003d36:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d38:	4b39      	ldr	r3, [pc, #228]	@ (8003e20 <HAL_RCC_ClockConfig+0x264>)
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	4936      	ldr	r1, [pc, #216]	@ (8003e20 <HAL_RCC_ClockConfig+0x264>)
 8003d46:	4313      	orrs	r3, r2
 8003d48:	608b      	str	r3, [r1, #8]
 8003d4a:	e008      	b.n	8003d5e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	2b80      	cmp	r3, #128	@ 0x80
 8003d50:	d105      	bne.n	8003d5e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003d52:	4b33      	ldr	r3, [pc, #204]	@ (8003e20 <HAL_RCC_ClockConfig+0x264>)
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	4a32      	ldr	r2, [pc, #200]	@ (8003e20 <HAL_RCC_ClockConfig+0x264>)
 8003d58:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003d5c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d5e:	4b2f      	ldr	r3, [pc, #188]	@ (8003e1c <HAL_RCC_ClockConfig+0x260>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 030f 	and.w	r3, r3, #15
 8003d66:	683a      	ldr	r2, [r7, #0]
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d21d      	bcs.n	8003da8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d6c:	4b2b      	ldr	r3, [pc, #172]	@ (8003e1c <HAL_RCC_ClockConfig+0x260>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f023 020f 	bic.w	r2, r3, #15
 8003d74:	4929      	ldr	r1, [pc, #164]	@ (8003e1c <HAL_RCC_ClockConfig+0x260>)
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003d7c:	f7fd fa32 	bl	80011e4 <HAL_GetTick>
 8003d80:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d82:	e00a      	b.n	8003d9a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d84:	f7fd fa2e 	bl	80011e4 <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d901      	bls.n	8003d9a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	e03b      	b.n	8003e12 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d9a:	4b20      	ldr	r3, [pc, #128]	@ (8003e1c <HAL_RCC_ClockConfig+0x260>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 030f 	and.w	r3, r3, #15
 8003da2:	683a      	ldr	r2, [r7, #0]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d1ed      	bne.n	8003d84 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0304 	and.w	r3, r3, #4
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d008      	beq.n	8003dc6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003db4:	4b1a      	ldr	r3, [pc, #104]	@ (8003e20 <HAL_RCC_ClockConfig+0x264>)
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	4917      	ldr	r1, [pc, #92]	@ (8003e20 <HAL_RCC_ClockConfig+0x264>)
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 0308 	and.w	r3, r3, #8
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d009      	beq.n	8003de6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003dd2:	4b13      	ldr	r3, [pc, #76]	@ (8003e20 <HAL_RCC_ClockConfig+0x264>)
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	691b      	ldr	r3, [r3, #16]
 8003dde:	00db      	lsls	r3, r3, #3
 8003de0:	490f      	ldr	r1, [pc, #60]	@ (8003e20 <HAL_RCC_ClockConfig+0x264>)
 8003de2:	4313      	orrs	r3, r2
 8003de4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003de6:	f000 f825 	bl	8003e34 <HAL_RCC_GetSysClockFreq>
 8003dea:	4602      	mov	r2, r0
 8003dec:	4b0c      	ldr	r3, [pc, #48]	@ (8003e20 <HAL_RCC_ClockConfig+0x264>)
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	091b      	lsrs	r3, r3, #4
 8003df2:	f003 030f 	and.w	r3, r3, #15
 8003df6:	490c      	ldr	r1, [pc, #48]	@ (8003e28 <HAL_RCC_ClockConfig+0x26c>)
 8003df8:	5ccb      	ldrb	r3, [r1, r3]
 8003dfa:	f003 031f 	and.w	r3, r3, #31
 8003dfe:	fa22 f303 	lsr.w	r3, r2, r3
 8003e02:	4a0a      	ldr	r2, [pc, #40]	@ (8003e2c <HAL_RCC_ClockConfig+0x270>)
 8003e04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003e06:	4b0a      	ldr	r3, [pc, #40]	@ (8003e30 <HAL_RCC_ClockConfig+0x274>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f7fd f99e 	bl	800114c <HAL_InitTick>
 8003e10:	4603      	mov	r3, r0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3718      	adds	r7, #24
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	40022000 	.word	0x40022000
 8003e20:	40021000 	.word	0x40021000
 8003e24:	04c4b400 	.word	0x04c4b400
 8003e28:	08005c2c 	.word	0x08005c2c
 8003e2c:	20000000 	.word	0x20000000
 8003e30:	20000004 	.word	0x20000004

08003e34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b087      	sub	sp, #28
 8003e38:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003e3a:	4b2c      	ldr	r3, [pc, #176]	@ (8003eec <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	f003 030c 	and.w	r3, r3, #12
 8003e42:	2b04      	cmp	r3, #4
 8003e44:	d102      	bne.n	8003e4c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003e46:	4b2a      	ldr	r3, [pc, #168]	@ (8003ef0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003e48:	613b      	str	r3, [r7, #16]
 8003e4a:	e047      	b.n	8003edc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003e4c:	4b27      	ldr	r3, [pc, #156]	@ (8003eec <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	f003 030c 	and.w	r3, r3, #12
 8003e54:	2b08      	cmp	r3, #8
 8003e56:	d102      	bne.n	8003e5e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003e58:	4b26      	ldr	r3, [pc, #152]	@ (8003ef4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003e5a:	613b      	str	r3, [r7, #16]
 8003e5c:	e03e      	b.n	8003edc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003e5e:	4b23      	ldr	r3, [pc, #140]	@ (8003eec <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	f003 030c 	and.w	r3, r3, #12
 8003e66:	2b0c      	cmp	r3, #12
 8003e68:	d136      	bne.n	8003ed8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e6a:	4b20      	ldr	r3, [pc, #128]	@ (8003eec <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e6c:	68db      	ldr	r3, [r3, #12]
 8003e6e:	f003 0303 	and.w	r3, r3, #3
 8003e72:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e74:	4b1d      	ldr	r3, [pc, #116]	@ (8003eec <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	091b      	lsrs	r3, r3, #4
 8003e7a:	f003 030f 	and.w	r3, r3, #15
 8003e7e:	3301      	adds	r3, #1
 8003e80:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2b03      	cmp	r3, #3
 8003e86:	d10c      	bne.n	8003ea2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e88:	4a1a      	ldr	r2, [pc, #104]	@ (8003ef4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e90:	4a16      	ldr	r2, [pc, #88]	@ (8003eec <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e92:	68d2      	ldr	r2, [r2, #12]
 8003e94:	0a12      	lsrs	r2, r2, #8
 8003e96:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003e9a:	fb02 f303 	mul.w	r3, r2, r3
 8003e9e:	617b      	str	r3, [r7, #20]
      break;
 8003ea0:	e00c      	b.n	8003ebc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ea2:	4a13      	ldr	r2, [pc, #76]	@ (8003ef0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eaa:	4a10      	ldr	r2, [pc, #64]	@ (8003eec <HAL_RCC_GetSysClockFreq+0xb8>)
 8003eac:	68d2      	ldr	r2, [r2, #12]
 8003eae:	0a12      	lsrs	r2, r2, #8
 8003eb0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003eb4:	fb02 f303 	mul.w	r3, r2, r3
 8003eb8:	617b      	str	r3, [r7, #20]
      break;
 8003eba:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ebc:	4b0b      	ldr	r3, [pc, #44]	@ (8003eec <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	0e5b      	lsrs	r3, r3, #25
 8003ec2:	f003 0303 	and.w	r3, r3, #3
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	005b      	lsls	r3, r3, #1
 8003eca:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003ecc:	697a      	ldr	r2, [r7, #20]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ed4:	613b      	str	r3, [r7, #16]
 8003ed6:	e001      	b.n	8003edc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003edc:	693b      	ldr	r3, [r7, #16]
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	371c      	adds	r7, #28
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr
 8003eea:	bf00      	nop
 8003eec:	40021000 	.word	0x40021000
 8003ef0:	00f42400 	.word	0x00f42400
 8003ef4:	016e3600 	.word	0x016e3600

08003ef8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003efc:	4b03      	ldr	r3, [pc, #12]	@ (8003f0c <HAL_RCC_GetHCLKFreq+0x14>)
 8003efe:	681b      	ldr	r3, [r3, #0]
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr
 8003f0a:	bf00      	nop
 8003f0c:	20000000 	.word	0x20000000

08003f10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003f14:	f7ff fff0 	bl	8003ef8 <HAL_RCC_GetHCLKFreq>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	4b06      	ldr	r3, [pc, #24]	@ (8003f34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	0a1b      	lsrs	r3, r3, #8
 8003f20:	f003 0307 	and.w	r3, r3, #7
 8003f24:	4904      	ldr	r1, [pc, #16]	@ (8003f38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003f26:	5ccb      	ldrb	r3, [r1, r3]
 8003f28:	f003 031f 	and.w	r3, r3, #31
 8003f2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	40021000 	.word	0x40021000
 8003f38:	08005c3c 	.word	0x08005c3c

08003f3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003f40:	f7ff ffda 	bl	8003ef8 <HAL_RCC_GetHCLKFreq>
 8003f44:	4602      	mov	r2, r0
 8003f46:	4b06      	ldr	r3, [pc, #24]	@ (8003f60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	0adb      	lsrs	r3, r3, #11
 8003f4c:	f003 0307 	and.w	r3, r3, #7
 8003f50:	4904      	ldr	r1, [pc, #16]	@ (8003f64 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003f52:	5ccb      	ldrb	r3, [r1, r3]
 8003f54:	f003 031f 	and.w	r3, r3, #31
 8003f58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	40021000 	.word	0x40021000
 8003f64:	08005c3c 	.word	0x08005c3c

08003f68 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b087      	sub	sp, #28
 8003f6c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f6e:	4b1e      	ldr	r3, [pc, #120]	@ (8003fe8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	f003 0303 	and.w	r3, r3, #3
 8003f76:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f78:	4b1b      	ldr	r3, [pc, #108]	@ (8003fe8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	091b      	lsrs	r3, r3, #4
 8003f7e:	f003 030f 	and.w	r3, r3, #15
 8003f82:	3301      	adds	r3, #1
 8003f84:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	2b03      	cmp	r3, #3
 8003f8a:	d10c      	bne.n	8003fa6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f8c:	4a17      	ldr	r2, [pc, #92]	@ (8003fec <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f94:	4a14      	ldr	r2, [pc, #80]	@ (8003fe8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f96:	68d2      	ldr	r2, [r2, #12]
 8003f98:	0a12      	lsrs	r2, r2, #8
 8003f9a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003f9e:	fb02 f303 	mul.w	r3, r2, r3
 8003fa2:	617b      	str	r3, [r7, #20]
    break;
 8003fa4:	e00c      	b.n	8003fc0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003fa6:	4a12      	ldr	r2, [pc, #72]	@ (8003ff0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fae:	4a0e      	ldr	r2, [pc, #56]	@ (8003fe8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003fb0:	68d2      	ldr	r2, [r2, #12]
 8003fb2:	0a12      	lsrs	r2, r2, #8
 8003fb4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003fb8:	fb02 f303 	mul.w	r3, r2, r3
 8003fbc:	617b      	str	r3, [r7, #20]
    break;
 8003fbe:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003fc0:	4b09      	ldr	r3, [pc, #36]	@ (8003fe8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	0e5b      	lsrs	r3, r3, #25
 8003fc6:	f003 0303 	and.w	r3, r3, #3
 8003fca:	3301      	adds	r3, #1
 8003fcc:	005b      	lsls	r3, r3, #1
 8003fce:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003fd0:	697a      	ldr	r2, [r7, #20]
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fd8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003fda:	687b      	ldr	r3, [r7, #4]
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	371c      	adds	r7, #28
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr
 8003fe8:	40021000 	.word	0x40021000
 8003fec:	016e3600 	.word	0x016e3600
 8003ff0:	00f42400 	.word	0x00f42400

08003ff4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b086      	sub	sp, #24
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004000:	2300      	movs	r3, #0
 8004002:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800400c:	2b00      	cmp	r3, #0
 800400e:	f000 8098 	beq.w	8004142 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004012:	2300      	movs	r3, #0
 8004014:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004016:	4b43      	ldr	r3, [pc, #268]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004018:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800401a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d10d      	bne.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004022:	4b40      	ldr	r3, [pc, #256]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004024:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004026:	4a3f      	ldr	r2, [pc, #252]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004028:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800402c:	6593      	str	r3, [r2, #88]	@ 0x58
 800402e:	4b3d      	ldr	r3, [pc, #244]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004030:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004032:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004036:	60bb      	str	r3, [r7, #8]
 8004038:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800403a:	2301      	movs	r3, #1
 800403c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800403e:	4b3a      	ldr	r3, [pc, #232]	@ (8004128 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a39      	ldr	r2, [pc, #228]	@ (8004128 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004044:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004048:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800404a:	f7fd f8cb 	bl	80011e4 <HAL_GetTick>
 800404e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004050:	e009      	b.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004052:	f7fd f8c7 	bl	80011e4 <HAL_GetTick>
 8004056:	4602      	mov	r2, r0
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	1ad3      	subs	r3, r2, r3
 800405c:	2b02      	cmp	r3, #2
 800405e:	d902      	bls.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004060:	2303      	movs	r3, #3
 8004062:	74fb      	strb	r3, [r7, #19]
        break;
 8004064:	e005      	b.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004066:	4b30      	ldr	r3, [pc, #192]	@ (8004128 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800406e:	2b00      	cmp	r3, #0
 8004070:	d0ef      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004072:	7cfb      	ldrb	r3, [r7, #19]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d159      	bne.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004078:	4b2a      	ldr	r3, [pc, #168]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800407a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800407e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004082:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d01e      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800408e:	697a      	ldr	r2, [r7, #20]
 8004090:	429a      	cmp	r2, r3
 8004092:	d019      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004094:	4b23      	ldr	r3, [pc, #140]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004096:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800409a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800409e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80040a0:	4b20      	ldr	r3, [pc, #128]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040a6:	4a1f      	ldr	r2, [pc, #124]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80040b0:	4b1c      	ldr	r3, [pc, #112]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040b6:	4a1b      	ldr	r2, [pc, #108]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80040c0:	4a18      	ldr	r2, [pc, #96]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	f003 0301 	and.w	r3, r3, #1
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d016      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d2:	f7fd f887 	bl	80011e4 <HAL_GetTick>
 80040d6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040d8:	e00b      	b.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040da:	f7fd f883 	bl	80011e4 <HAL_GetTick>
 80040de:	4602      	mov	r2, r0
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d902      	bls.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80040ec:	2303      	movs	r3, #3
 80040ee:	74fb      	strb	r3, [r7, #19]
            break;
 80040f0:	e006      	b.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040f2:	4b0c      	ldr	r3, [pc, #48]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040f8:	f003 0302 	and.w	r3, r3, #2
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d0ec      	beq.n	80040da <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004100:	7cfb      	ldrb	r3, [r7, #19]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d10b      	bne.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004106:	4b07      	ldr	r3, [pc, #28]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004108:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800410c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004114:	4903      	ldr	r1, [pc, #12]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004116:	4313      	orrs	r3, r2
 8004118:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800411c:	e008      	b.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800411e:	7cfb      	ldrb	r3, [r7, #19]
 8004120:	74bb      	strb	r3, [r7, #18]
 8004122:	e005      	b.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004124:	40021000 	.word	0x40021000
 8004128:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800412c:	7cfb      	ldrb	r3, [r7, #19]
 800412e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004130:	7c7b      	ldrb	r3, [r7, #17]
 8004132:	2b01      	cmp	r3, #1
 8004134:	d105      	bne.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004136:	4ba7      	ldr	r3, [pc, #668]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004138:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800413a:	4aa6      	ldr	r2, [pc, #664]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800413c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004140:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0301 	and.w	r3, r3, #1
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00a      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800414e:	4ba1      	ldr	r3, [pc, #644]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004150:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004154:	f023 0203 	bic.w	r2, r3, #3
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	499d      	ldr	r1, [pc, #628]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800415e:	4313      	orrs	r3, r2
 8004160:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0302 	and.w	r3, r3, #2
 800416c:	2b00      	cmp	r3, #0
 800416e:	d00a      	beq.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004170:	4b98      	ldr	r3, [pc, #608]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004172:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004176:	f023 020c 	bic.w	r2, r3, #12
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	4995      	ldr	r1, [pc, #596]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004180:	4313      	orrs	r3, r2
 8004182:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0304 	and.w	r3, r3, #4
 800418e:	2b00      	cmp	r3, #0
 8004190:	d00a      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004192:	4b90      	ldr	r3, [pc, #576]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004194:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004198:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	498c      	ldr	r1, [pc, #560]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041a2:	4313      	orrs	r3, r2
 80041a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0308 	and.w	r3, r3, #8
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d00a      	beq.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80041b4:	4b87      	ldr	r3, [pc, #540]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041ba:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	4984      	ldr	r1, [pc, #528]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041c4:	4313      	orrs	r3, r2
 80041c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0310 	and.w	r3, r3, #16
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d00a      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80041d6:	4b7f      	ldr	r3, [pc, #508]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041dc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	695b      	ldr	r3, [r3, #20]
 80041e4:	497b      	ldr	r1, [pc, #492]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0320 	and.w	r3, r3, #32
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d00a      	beq.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80041f8:	4b76      	ldr	r3, [pc, #472]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041fe:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	699b      	ldr	r3, [r3, #24]
 8004206:	4973      	ldr	r1, [pc, #460]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004208:	4313      	orrs	r3, r2
 800420a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004216:	2b00      	cmp	r3, #0
 8004218:	d00a      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800421a:	4b6e      	ldr	r3, [pc, #440]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800421c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004220:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	69db      	ldr	r3, [r3, #28]
 8004228:	496a      	ldr	r1, [pc, #424]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800422a:	4313      	orrs	r3, r2
 800422c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004238:	2b00      	cmp	r3, #0
 800423a:	d00a      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800423c:	4b65      	ldr	r3, [pc, #404]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800423e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004242:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a1b      	ldr	r3, [r3, #32]
 800424a:	4962      	ldr	r1, [pc, #392]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800424c:	4313      	orrs	r3, r2
 800424e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00a      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800425e:	4b5d      	ldr	r3, [pc, #372]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004260:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004264:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800426c:	4959      	ldr	r1, [pc, #356]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800426e:	4313      	orrs	r3, r2
 8004270:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800427c:	2b00      	cmp	r3, #0
 800427e:	d00a      	beq.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004280:	4b54      	ldr	r3, [pc, #336]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004282:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004286:	f023 0203 	bic.w	r2, r3, #3
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800428e:	4951      	ldr	r1, [pc, #324]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004290:	4313      	orrs	r3, r2
 8004292:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d00a      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80042a2:	4b4c      	ldr	r3, [pc, #304]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042a8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042b0:	4948      	ldr	r1, [pc, #288]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042b2:	4313      	orrs	r3, r2
 80042b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d015      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80042c4:	4b43      	ldr	r3, [pc, #268]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042ca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042d2:	4940      	ldr	r1, [pc, #256]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042d4:	4313      	orrs	r3, r2
 80042d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80042e2:	d105      	bne.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042e4:	4b3b      	ldr	r3, [pc, #236]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	4a3a      	ldr	r2, [pc, #232]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80042ee:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d015      	beq.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80042fc:	4b35      	ldr	r3, [pc, #212]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004302:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800430a:	4932      	ldr	r1, [pc, #200]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800430c:	4313      	orrs	r3, r2
 800430e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004316:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800431a:	d105      	bne.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800431c:	4b2d      	ldr	r3, [pc, #180]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	4a2c      	ldr	r2, [pc, #176]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004322:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004326:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004330:	2b00      	cmp	r3, #0
 8004332:	d015      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004334:	4b27      	ldr	r3, [pc, #156]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004336:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800433a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004342:	4924      	ldr	r1, [pc, #144]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004344:	4313      	orrs	r3, r2
 8004346:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800434e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004352:	d105      	bne.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004354:	4b1f      	ldr	r3, [pc, #124]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	4a1e      	ldr	r2, [pc, #120]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800435a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800435e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004368:	2b00      	cmp	r3, #0
 800436a:	d015      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800436c:	4b19      	ldr	r3, [pc, #100]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800436e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004372:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800437a:	4916      	ldr	r1, [pc, #88]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800437c:	4313      	orrs	r3, r2
 800437e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004386:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800438a:	d105      	bne.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800438c:	4b11      	ldr	r3, [pc, #68]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	4a10      	ldr	r2, [pc, #64]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004392:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004396:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d019      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80043a4:	4b0b      	ldr	r3, [pc, #44]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043aa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043b2:	4908      	ldr	r1, [pc, #32]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043b4:	4313      	orrs	r3, r2
 80043b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80043c2:	d109      	bne.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043c4:	4b03      	ldr	r3, [pc, #12]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	4a02      	ldr	r2, [pc, #8]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80043ce:	60d3      	str	r3, [r2, #12]
 80043d0:	e002      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80043d2:	bf00      	nop
 80043d4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d015      	beq.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80043e4:	4b29      	ldr	r3, [pc, #164]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80043e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043ea:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043f2:	4926      	ldr	r1, [pc, #152]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80043f4:	4313      	orrs	r3, r2
 80043f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004402:	d105      	bne.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004404:	4b21      	ldr	r3, [pc, #132]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	4a20      	ldr	r2, [pc, #128]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800440a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800440e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004418:	2b00      	cmp	r3, #0
 800441a:	d015      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800441c:	4b1b      	ldr	r3, [pc, #108]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800441e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004422:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800442a:	4918      	ldr	r1, [pc, #96]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800442c:	4313      	orrs	r3, r2
 800442e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004436:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800443a:	d105      	bne.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800443c:	4b13      	ldr	r3, [pc, #76]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	4a12      	ldr	r2, [pc, #72]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004442:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004446:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004450:	2b00      	cmp	r3, #0
 8004452:	d015      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004454:	4b0d      	ldr	r3, [pc, #52]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004456:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800445a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004462:	490a      	ldr	r1, [pc, #40]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004464:	4313      	orrs	r3, r2
 8004466:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800446e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004472:	d105      	bne.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004474:	4b05      	ldr	r3, [pc, #20]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	4a04      	ldr	r2, [pc, #16]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800447a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800447e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004480:	7cbb      	ldrb	r3, [r7, #18]
}
 8004482:	4618      	mov	r0, r3
 8004484:	3718      	adds	r7, #24
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	40021000 	.word	0x40021000

08004490 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d101      	bne.n	80044a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e09d      	b.n	80045de <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d108      	bne.n	80044bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80044b2:	d009      	beq.n	80044c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	61da      	str	r2, [r3, #28]
 80044ba:	e005      	b.n	80044c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d106      	bne.n	80044e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f7fc fd3c 	bl	8000f60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2202      	movs	r2, #2
 80044ec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80044fe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004508:	d902      	bls.n	8004510 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800450a:	2300      	movs	r3, #0
 800450c:	60fb      	str	r3, [r7, #12]
 800450e:	e002      	b.n	8004516 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004510:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004514:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800451e:	d007      	beq.n	8004530 <HAL_SPI_Init+0xa0>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004528:	d002      	beq.n	8004530 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004540:	431a      	orrs	r2, r3
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	f003 0302 	and.w	r3, r3, #2
 800454a:	431a      	orrs	r2, r3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	695b      	ldr	r3, [r3, #20]
 8004550:	f003 0301 	and.w	r3, r3, #1
 8004554:	431a      	orrs	r2, r3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	699b      	ldr	r3, [r3, #24]
 800455a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800455e:	431a      	orrs	r2, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	69db      	ldr	r3, [r3, #28]
 8004564:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004568:	431a      	orrs	r2, r3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a1b      	ldr	r3, [r3, #32]
 800456e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004572:	ea42 0103 	orr.w	r1, r2, r3
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800457a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	430a      	orrs	r2, r1
 8004584:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	699b      	ldr	r3, [r3, #24]
 800458a:	0c1b      	lsrs	r3, r3, #16
 800458c:	f003 0204 	and.w	r2, r3, #4
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004594:	f003 0310 	and.w	r3, r3, #16
 8004598:	431a      	orrs	r2, r3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800459e:	f003 0308 	and.w	r3, r3, #8
 80045a2:	431a      	orrs	r2, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80045ac:	ea42 0103 	orr.w	r1, r2, r3
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	430a      	orrs	r2, r1
 80045bc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	69da      	ldr	r2, [r3, #28]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80045cc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80045dc:	2300      	movs	r3, #0
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3710      	adds	r7, #16
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
	...

080045e8 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b087      	sub	sp, #28
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	60f8      	str	r0, [r7, #12]
 80045f0:	60b9      	str	r1, [r7, #8]
 80045f2:	607a      	str	r2, [r7, #4]
 80045f4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80045f6:	2300      	movs	r3, #0
 80045f8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004600:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004608:	7dbb      	ldrb	r3, [r7, #22]
 800460a:	2b01      	cmp	r3, #1
 800460c:	d00d      	beq.n	800462a <HAL_SPI_TransmitReceive_IT+0x42>
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004614:	d106      	bne.n	8004624 <HAL_SPI_TransmitReceive_IT+0x3c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d102      	bne.n	8004624 <HAL_SPI_TransmitReceive_IT+0x3c>
 800461e:	7dbb      	ldrb	r3, [r7, #22]
 8004620:	2b04      	cmp	r3, #4
 8004622:	d002      	beq.n	800462a <HAL_SPI_TransmitReceive_IT+0x42>
  {
    errorcode = HAL_BUSY;
 8004624:	2302      	movs	r3, #2
 8004626:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004628:	e07d      	b.n	8004726 <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d005      	beq.n	800463c <HAL_SPI_TransmitReceive_IT+0x54>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d002      	beq.n	800463c <HAL_SPI_TransmitReceive_IT+0x54>
 8004636:	887b      	ldrh	r3, [r7, #2]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d102      	bne.n	8004642 <HAL_SPI_TransmitReceive_IT+0x5a>
  {
    errorcode = HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004640:	e071      	b.n	8004726 <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004648:	2b01      	cmp	r3, #1
 800464a:	d101      	bne.n	8004650 <HAL_SPI_TransmitReceive_IT+0x68>
 800464c:	2302      	movs	r3, #2
 800464e:	e06b      	b.n	8004728 <HAL_SPI_TransmitReceive_IT+0x140>
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800465e:	b2db      	uxtb	r3, r3
 8004660:	2b04      	cmp	r3, #4
 8004662:	d003      	beq.n	800466c <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2205      	movs	r2, #5
 8004668:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2200      	movs	r2, #0
 8004670:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	68ba      	ldr	r2, [r7, #8]
 8004676:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	887a      	ldrh	r2, [r7, #2]
 800467c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	887a      	ldrh	r2, [r7, #2]
 8004682:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	887a      	ldrh	r2, [r7, #2]
 800468e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	887a      	ldrh	r2, [r7, #2]
 8004696:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80046a2:	d906      	bls.n	80046b2 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	4a23      	ldr	r2, [pc, #140]	@ (8004734 <HAL_SPI_TransmitReceive_IT+0x14c>)
 80046a8:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	4a22      	ldr	r2, [pc, #136]	@ (8004738 <HAL_SPI_TransmitReceive_IT+0x150>)
 80046ae:	651a      	str	r2, [r3, #80]	@ 0x50
 80046b0:	e005      	b.n	80046be <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	4a21      	ldr	r2, [pc, #132]	@ (800473c <HAL_SPI_TransmitReceive_IT+0x154>)
 80046b6:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	4a21      	ldr	r2, [pc, #132]	@ (8004740 <HAL_SPI_TransmitReceive_IT+0x158>)
 80046bc:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80046c6:	d802      	bhi.n	80046ce <HAL_SPI_TransmitReceive_IT+0xe6>
 80046c8:	887b      	ldrh	r3, [r7, #2]
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d908      	bls.n	80046e0 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	685a      	ldr	r2, [r3, #4]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80046dc:	605a      	str	r2, [r3, #4]
 80046de:	e007      	b.n	80046f0 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	685a      	ldr	r2, [r3, #4]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80046ee:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046fa:	2b40      	cmp	r3, #64	@ 0x40
 80046fc:	d007      	beq.n	800470e <HAL_SPI_TransmitReceive_IT+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800470c:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2200      	movs	r2, #0
 8004712:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	685a      	ldr	r2, [r3, #4]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 8004724:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 8004726:	7dfb      	ldrb	r3, [r7, #23]
}
 8004728:	4618      	mov	r0, r3
 800472a:	371c      	adds	r7, #28
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr
 8004734:	08004acf 	.word	0x08004acf
 8004738:	08004b35 	.word	0x08004b35
 800473c:	0800497f 	.word	0x0800497f
 8004740:	08004a3d 	.word	0x08004a3d

08004744 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b088      	sub	sp, #32
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800475c:	69bb      	ldr	r3, [r7, #24]
 800475e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004762:	2b00      	cmp	r3, #0
 8004764:	d10e      	bne.n	8004784 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004766:	69bb      	ldr	r3, [r7, #24]
 8004768:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800476c:	2b00      	cmp	r3, #0
 800476e:	d009      	beq.n	8004784 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004770:	69fb      	ldr	r3, [r7, #28]
 8004772:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004776:	2b00      	cmp	r3, #0
 8004778:	d004      	beq.n	8004784 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	4798      	blx	r3
    return;
 8004782:	e0ce      	b.n	8004922 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	f003 0302 	and.w	r3, r3, #2
 800478a:	2b00      	cmp	r3, #0
 800478c:	d009      	beq.n	80047a2 <HAL_SPI_IRQHandler+0x5e>
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004794:	2b00      	cmp	r3, #0
 8004796:	d004      	beq.n	80047a2 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	4798      	blx	r3
    return;
 80047a0:	e0bf      	b.n	8004922 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80047a2:	69bb      	ldr	r3, [r7, #24]
 80047a4:	f003 0320 	and.w	r3, r3, #32
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d10a      	bne.n	80047c2 <HAL_SPI_IRQHandler+0x7e>
 80047ac:	69bb      	ldr	r3, [r7, #24]
 80047ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d105      	bne.n	80047c2 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80047b6:	69bb      	ldr	r3, [r7, #24]
 80047b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047bc:	2b00      	cmp	r3, #0
 80047be:	f000 80b0 	beq.w	8004922 <HAL_SPI_IRQHandler+0x1de>
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	f003 0320 	and.w	r3, r3, #32
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	f000 80aa 	beq.w	8004922 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80047ce:	69bb      	ldr	r3, [r7, #24]
 80047d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d023      	beq.n	8004820 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	2b03      	cmp	r3, #3
 80047e2:	d011      	beq.n	8004808 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047e8:	f043 0204 	orr.w	r2, r3, #4
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80047f0:	2300      	movs	r3, #0
 80047f2:	617b      	str	r3, [r7, #20]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	617b      	str	r3, [r7, #20]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	617b      	str	r3, [r7, #20]
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	e00b      	b.n	8004820 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004808:	2300      	movs	r3, #0
 800480a:	613b      	str	r3, [r7, #16]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	613b      	str	r3, [r7, #16]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	613b      	str	r3, [r7, #16]
 800481c:	693b      	ldr	r3, [r7, #16]
        return;
 800481e:	e080      	b.n	8004922 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004820:	69bb      	ldr	r3, [r7, #24]
 8004822:	f003 0320 	and.w	r3, r3, #32
 8004826:	2b00      	cmp	r3, #0
 8004828:	d014      	beq.n	8004854 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800482e:	f043 0201 	orr.w	r2, r3, #1
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004836:	2300      	movs	r3, #0
 8004838:	60fb      	str	r3, [r7, #12]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	60fb      	str	r3, [r7, #12]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004850:	601a      	str	r2, [r3, #0]
 8004852:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004854:	69bb      	ldr	r3, [r7, #24]
 8004856:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800485a:	2b00      	cmp	r3, #0
 800485c:	d00c      	beq.n	8004878 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004862:	f043 0208 	orr.w	r2, r3, #8
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800486a:	2300      	movs	r3, #0
 800486c:	60bb      	str	r3, [r7, #8]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	60bb      	str	r3, [r7, #8]
 8004876:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800487c:	2b00      	cmp	r3, #0
 800487e:	d04f      	beq.n	8004920 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	685a      	ldr	r2, [r3, #4]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800488e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2201      	movs	r2, #1
 8004894:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004898:	69fb      	ldr	r3, [r7, #28]
 800489a:	f003 0302 	and.w	r3, r3, #2
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d104      	bne.n	80048ac <HAL_SPI_IRQHandler+0x168>
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	f003 0301 	and.w	r3, r3, #1
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d034      	beq.n	8004916 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	685a      	ldr	r2, [r3, #4]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f022 0203 	bic.w	r2, r2, #3
 80048ba:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d011      	beq.n	80048e8 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048c8:	4a17      	ldr	r2, [pc, #92]	@ (8004928 <HAL_SPI_IRQHandler+0x1e4>)
 80048ca:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048d0:	4618      	mov	r0, r3
 80048d2:	f7fe fa5f 	bl	8002d94 <HAL_DMA_Abort_IT>
 80048d6:	4603      	mov	r3, r0
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d005      	beq.n	80048e8 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048e0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d016      	beq.n	800491e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048f4:	4a0c      	ldr	r2, [pc, #48]	@ (8004928 <HAL_SPI_IRQHandler+0x1e4>)
 80048f6:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048fc:	4618      	mov	r0, r3
 80048fe:	f7fe fa49 	bl	8002d94 <HAL_DMA_Abort_IT>
 8004902:	4603      	mov	r3, r0
 8004904:	2b00      	cmp	r3, #0
 8004906:	d00a      	beq.n	800491e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800490c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8004914:	e003      	b.n	800491e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f000 f812 	bl	8004940 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800491c:	e000      	b.n	8004920 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800491e:	bf00      	nop
    return;
 8004920:	bf00      	nop
  }
}
 8004922:	3720      	adds	r7, #32
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}
 8004928:	08004955 	.word	0x08004955

0800492c <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8004934:	bf00      	nop
 8004936:	370c      	adds	r7, #12
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr

08004940 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004940:	b480      	push	{r7}
 8004942:	b083      	sub	sp, #12
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004948:	bf00      	nop
 800494a:	370c      	adds	r7, #12
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr

08004954 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b084      	sub	sp, #16
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004960:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2200      	movs	r2, #0
 8004966:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2200      	movs	r2, #0
 800496e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004970:	68f8      	ldr	r0, [r7, #12]
 8004972:	f7ff ffe5 	bl	8004940 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004976:	bf00      	nop
 8004978:	3710      	adds	r7, #16
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}

0800497e <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800497e:	b580      	push	{r7, lr}
 8004980:	b082      	sub	sp, #8
 8004982:	af00      	add	r7, sp, #0
 8004984:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800498c:	b29b      	uxth	r3, r3
 800498e:	2b01      	cmp	r3, #1
 8004990:	d923      	bls.n	80049da <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	68da      	ldr	r2, [r3, #12]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800499c:	b292      	uxth	r2, r2
 800499e:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049a4:	1c9a      	adds	r2, r3, #2
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount -= 2U;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	3b02      	subs	r3, #2
 80049b4:	b29a      	uxth	r2, r3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    if (hspi->RxXferCount == 1U)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d11f      	bne.n	8004a08 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	685a      	ldr	r2, [r3, #4]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80049d6:	605a      	str	r2, [r3, #4]
 80049d8:	e016      	b.n	8004a08 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f103 020c 	add.w	r2, r3, #12
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049e6:	7812      	ldrb	r2, [r2, #0]
 80049e8:	b2d2      	uxtb	r2, r2
 80049ea:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049f0:	1c5a      	adds	r2, r3, #1
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount--;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	3b01      	subs	r3, #1
 8004a00:	b29a      	uxth	r2, r3
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d10f      	bne.n	8004a34 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	685a      	ldr	r2, [r3, #4]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004a22:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d102      	bne.n	8004a34 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 fa14 	bl	8004e5c <SPI_CloseRxTx_ISR>
    }
  }
}
 8004a34:	bf00      	nop
 8004a36:	3708      	adds	r7, #8
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}

08004a3c <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b082      	sub	sp, #8
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d912      	bls.n	8004a74 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a52:	881a      	ldrh	r2, [r3, #0]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a5e:	1c9a      	adds	r2, r3, #2
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount -= 2U;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	3b02      	subs	r3, #2
 8004a6c:	b29a      	uxth	r2, r3
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004a72:	e012      	b.n	8004a9a <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	330c      	adds	r3, #12
 8004a7e:	7812      	ldrb	r2, [r2, #0]
 8004a80:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a86:	1c5a      	adds	r2, r3, #1
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount--;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	3b01      	subs	r3, #1
 8004a94:	b29a      	uxth	r2, r3
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	87da      	strh	r2, [r3, #62]	@ 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d110      	bne.n	8004ac6 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	685a      	ldr	r2, [r3, #4]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004ab2:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d102      	bne.n	8004ac6 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f000 f9cb 	bl	8004e5c <SPI_CloseRxTx_ISR>
    }
  }
}
 8004ac6:	bf00      	nop
 8004ac8:	3708      	adds	r7, #8
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}

08004ace <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004ace:	b580      	push	{r7, lr}
 8004ad0:	b082      	sub	sp, #8
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	68da      	ldr	r2, [r3, #12]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ae0:	b292      	uxth	r2, r2
 8004ae2:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ae8:	1c9a      	adds	r2, r3, #2
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	3b01      	subs	r3, #1
 8004af8:	b29a      	uxth	r2, r3
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  if (hspi->RxXferCount == 0U)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d10f      	bne.n	8004b2c <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	685a      	ldr	r2, [r3, #4]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b1a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d102      	bne.n	8004b2c <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f000 f998 	bl	8004e5c <SPI_CloseRxTx_ISR>
    }
  }
}
 8004b2c:	bf00      	nop
 8004b2e:	3708      	adds	r7, #8
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}

08004b34 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b082      	sub	sp, #8
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b40:	881a      	ldrh	r2, [r3, #0]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b4c:	1c9a      	adds	r2, r3, #2
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	3b01      	subs	r3, #1
 8004b5a:	b29a      	uxth	r2, r3
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d110      	bne.n	8004b8c <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	685a      	ldr	r2, [r3, #4]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004b78:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d102      	bne.n	8004b8c <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f000 f968 	bl	8004e5c <SPI_CloseRxTx_ISR>
    }
  }
}
 8004b8c:	bf00      	nop
 8004b8e:	3708      	adds	r7, #8
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}

08004b94 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b088      	sub	sp, #32
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	60f8      	str	r0, [r7, #12]
 8004b9c:	60b9      	str	r1, [r7, #8]
 8004b9e:	603b      	str	r3, [r7, #0]
 8004ba0:	4613      	mov	r3, r2
 8004ba2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004ba4:	f7fc fb1e 	bl	80011e4 <HAL_GetTick>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bac:	1a9b      	subs	r3, r3, r2
 8004bae:	683a      	ldr	r2, [r7, #0]
 8004bb0:	4413      	add	r3, r2
 8004bb2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004bb4:	f7fc fb16 	bl	80011e4 <HAL_GetTick>
 8004bb8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004bba:	4b39      	ldr	r3, [pc, #228]	@ (8004ca0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	015b      	lsls	r3, r3, #5
 8004bc0:	0d1b      	lsrs	r3, r3, #20
 8004bc2:	69fa      	ldr	r2, [r7, #28]
 8004bc4:	fb02 f303 	mul.w	r3, r2, r3
 8004bc8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004bca:	e054      	b.n	8004c76 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bd2:	d050      	beq.n	8004c76 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004bd4:	f7fc fb06 	bl	80011e4 <HAL_GetTick>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	69fa      	ldr	r2, [r7, #28]
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d902      	bls.n	8004bea <SPI_WaitFlagStateUntilTimeout+0x56>
 8004be4:	69fb      	ldr	r3, [r7, #28]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d13d      	bne.n	8004c66 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	685a      	ldr	r2, [r3, #4]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004bf8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c02:	d111      	bne.n	8004c28 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c0c:	d004      	beq.n	8004c18 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c16:	d107      	bne.n	8004c28 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c26:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c30:	d10f      	bne.n	8004c52 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004c40:	601a      	str	r2, [r3, #0]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004c50:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2201      	movs	r2, #1
 8004c56:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004c62:	2303      	movs	r3, #3
 8004c64:	e017      	b.n	8004c96 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d101      	bne.n	8004c70 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	3b01      	subs	r3, #1
 8004c74:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	689a      	ldr	r2, [r3, #8]
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	4013      	ands	r3, r2
 8004c80:	68ba      	ldr	r2, [r7, #8]
 8004c82:	429a      	cmp	r2, r3
 8004c84:	bf0c      	ite	eq
 8004c86:	2301      	moveq	r3, #1
 8004c88:	2300      	movne	r3, #0
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	79fb      	ldrb	r3, [r7, #7]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d19b      	bne.n	8004bcc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3720      	adds	r7, #32
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	20000000 	.word	0x20000000

08004ca4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b08a      	sub	sp, #40	@ 0x28
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	60f8      	str	r0, [r7, #12]
 8004cac:	60b9      	str	r1, [r7, #8]
 8004cae:	607a      	str	r2, [r7, #4]
 8004cb0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004cb6:	f7fc fa95 	bl	80011e4 <HAL_GetTick>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cbe:	1a9b      	subs	r3, r3, r2
 8004cc0:	683a      	ldr	r2, [r7, #0]
 8004cc2:	4413      	add	r3, r2
 8004cc4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004cc6:	f7fc fa8d 	bl	80011e4 <HAL_GetTick>
 8004cca:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	330c      	adds	r3, #12
 8004cd2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004cd4:	4b3d      	ldr	r3, [pc, #244]	@ (8004dcc <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	4613      	mov	r3, r2
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	4413      	add	r3, r2
 8004cde:	00da      	lsls	r2, r3, #3
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	0d1b      	lsrs	r3, r3, #20
 8004ce4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ce6:	fb02 f303 	mul.w	r3, r2, r3
 8004cea:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004cec:	e060      	b.n	8004db0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004cf4:	d107      	bne.n	8004d06 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d104      	bne.n	8004d06 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	781b      	ldrb	r3, [r3, #0]
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004d04:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d0c:	d050      	beq.n	8004db0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004d0e:	f7fc fa69 	bl	80011e4 <HAL_GetTick>
 8004d12:	4602      	mov	r2, r0
 8004d14:	6a3b      	ldr	r3, [r7, #32]
 8004d16:	1ad3      	subs	r3, r2, r3
 8004d18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d902      	bls.n	8004d24 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d13d      	bne.n	8004da0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	685a      	ldr	r2, [r3, #4]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004d32:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d3c:	d111      	bne.n	8004d62 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d46:	d004      	beq.n	8004d52 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d50:	d107      	bne.n	8004d62 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d60:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d6a:	d10f      	bne.n	8004d8c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004d7a:	601a      	str	r2, [r3, #0]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004d8a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2201      	movs	r2, #1
 8004d90:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2200      	movs	r2, #0
 8004d98:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004d9c:	2303      	movs	r3, #3
 8004d9e:	e010      	b.n	8004dc2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004da0:	69bb      	ldr	r3, [r7, #24]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d101      	bne.n	8004daa <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004da6:	2300      	movs	r3, #0
 8004da8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004daa:	69bb      	ldr	r3, [r7, #24]
 8004dac:	3b01      	subs	r3, #1
 8004dae:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	689a      	ldr	r2, [r3, #8]
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	4013      	ands	r3, r2
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d196      	bne.n	8004cee <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004dc0:	2300      	movs	r3, #0
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3728      	adds	r7, #40	@ 0x28
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}
 8004dca:	bf00      	nop
 8004dcc:	20000000 	.word	0x20000000

08004dd0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b086      	sub	sp, #24
 8004dd4:	af02      	add	r7, sp, #8
 8004dd6:	60f8      	str	r0, [r7, #12]
 8004dd8:	60b9      	str	r1, [r7, #8]
 8004dda:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	9300      	str	r3, [sp, #0]
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	2200      	movs	r2, #0
 8004de4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004de8:	68f8      	ldr	r0, [r7, #12]
 8004dea:	f7ff ff5b 	bl	8004ca4 <SPI_WaitFifoStateUntilTimeout>
 8004dee:	4603      	mov	r3, r0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d007      	beq.n	8004e04 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004df8:	f043 0220 	orr.w	r2, r3, #32
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004e00:	2303      	movs	r3, #3
 8004e02:	e027      	b.n	8004e54 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	9300      	str	r3, [sp, #0]
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	2180      	movs	r1, #128	@ 0x80
 8004e0e:	68f8      	ldr	r0, [r7, #12]
 8004e10:	f7ff fec0 	bl	8004b94 <SPI_WaitFlagStateUntilTimeout>
 8004e14:	4603      	mov	r3, r0
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d007      	beq.n	8004e2a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e1e:	f043 0220 	orr.w	r2, r3, #32
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004e26:	2303      	movs	r3, #3
 8004e28:	e014      	b.n	8004e54 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	9300      	str	r3, [sp, #0]
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	2200      	movs	r2, #0
 8004e32:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004e36:	68f8      	ldr	r0, [r7, #12]
 8004e38:	f7ff ff34 	bl	8004ca4 <SPI_WaitFifoStateUntilTimeout>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d007      	beq.n	8004e52 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e46:	f043 0220 	orr.w	r2, r3, #32
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004e4e:	2303      	movs	r3, #3
 8004e50:	e000      	b.n	8004e54 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004e52:	2300      	movs	r3, #0
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3710      	adds	r7, #16
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b084      	sub	sp, #16
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e64:	f7fc f9be 	bl	80011e4 <HAL_GetTick>
 8004e68:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	685a      	ldr	r2, [r3, #4]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f022 0220 	bic.w	r2, r2, #32
 8004e78:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004e7a:	68fa      	ldr	r2, [r7, #12]
 8004e7c:	2164      	movs	r1, #100	@ 0x64
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f7ff ffa6 	bl	8004dd0 <SPI_EndRxTxTransaction>
 8004e84:	4603      	mov	r3, r0
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d005      	beq.n	8004e96 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e8e:	f043 0220 	orr.w	r2, r3, #32
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	661a      	str	r2, [r3, #96]	@ 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d115      	bne.n	8004eca <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	2b04      	cmp	r3, #4
 8004ea8:	d107      	bne.n	8004eba <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2201      	movs	r2, #1
 8004eae:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f7ff fd3a 	bl	800492c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8004eb8:	e00e      	b.n	8004ed8 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f7fb ff30 	bl	8000d28 <HAL_SPI_TxRxCpltCallback>
}
 8004ec8:	e006      	b.n	8004ed8 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2201      	movs	r2, #1
 8004ece:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f7ff fd34 	bl	8004940 <HAL_SPI_ErrorCallback>
}
 8004ed8:	bf00      	nop
 8004eda:	3710      	adds	r7, #16
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}

08004ee0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b082      	sub	sp, #8
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d101      	bne.n	8004ef2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e042      	b.n	8004f78 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d106      	bne.n	8004f0a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f7fb ffd3 	bl	8000eb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2224      	movs	r2, #36	@ 0x24
 8004f0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f022 0201 	bic.w	r2, r2, #1
 8004f20:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d002      	beq.n	8004f30 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f000 fb24 	bl	8005578 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f000 f825 	bl	8004f80 <UART_SetConfig>
 8004f36:	4603      	mov	r3, r0
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d101      	bne.n	8004f40 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e01b      	b.n	8004f78 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	685a      	ldr	r2, [r3, #4]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004f4e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	689a      	ldr	r2, [r3, #8]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004f5e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f042 0201 	orr.w	r2, r2, #1
 8004f6e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f000 fba3 	bl	80056bc <UART_CheckIdleState>
 8004f76:	4603      	mov	r3, r0
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3708      	adds	r7, #8
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}

08004f80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f84:	b08c      	sub	sp, #48	@ 0x30
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	689a      	ldr	r2, [r3, #8]
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	691b      	ldr	r3, [r3, #16]
 8004f98:	431a      	orrs	r2, r3
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	695b      	ldr	r3, [r3, #20]
 8004f9e:	431a      	orrs	r2, r3
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	69db      	ldr	r3, [r3, #28]
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	4baa      	ldr	r3, [pc, #680]	@ (8005258 <UART_SetConfig+0x2d8>)
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	697a      	ldr	r2, [r7, #20]
 8004fb4:	6812      	ldr	r2, [r2, #0]
 8004fb6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004fb8:	430b      	orrs	r3, r1
 8004fba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	68da      	ldr	r2, [r3, #12]
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	430a      	orrs	r2, r1
 8004fd0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	699b      	ldr	r3, [r3, #24]
 8004fd6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a9f      	ldr	r2, [pc, #636]	@ (800525c <UART_SetConfig+0x2dc>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d004      	beq.n	8004fec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	6a1b      	ldr	r3, [r3, #32]
 8004fe6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004ff6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004ffa:	697a      	ldr	r2, [r7, #20]
 8004ffc:	6812      	ldr	r2, [r2, #0]
 8004ffe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005000:	430b      	orrs	r3, r1
 8005002:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800500a:	f023 010f 	bic.w	r1, r3, #15
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	430a      	orrs	r2, r1
 8005018:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a90      	ldr	r2, [pc, #576]	@ (8005260 <UART_SetConfig+0x2e0>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d125      	bne.n	8005070 <UART_SetConfig+0xf0>
 8005024:	4b8f      	ldr	r3, [pc, #572]	@ (8005264 <UART_SetConfig+0x2e4>)
 8005026:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800502a:	f003 0303 	and.w	r3, r3, #3
 800502e:	2b03      	cmp	r3, #3
 8005030:	d81a      	bhi.n	8005068 <UART_SetConfig+0xe8>
 8005032:	a201      	add	r2, pc, #4	@ (adr r2, 8005038 <UART_SetConfig+0xb8>)
 8005034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005038:	08005049 	.word	0x08005049
 800503c:	08005059 	.word	0x08005059
 8005040:	08005051 	.word	0x08005051
 8005044:	08005061 	.word	0x08005061
 8005048:	2301      	movs	r3, #1
 800504a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800504e:	e116      	b.n	800527e <UART_SetConfig+0x2fe>
 8005050:	2302      	movs	r3, #2
 8005052:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005056:	e112      	b.n	800527e <UART_SetConfig+0x2fe>
 8005058:	2304      	movs	r3, #4
 800505a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800505e:	e10e      	b.n	800527e <UART_SetConfig+0x2fe>
 8005060:	2308      	movs	r3, #8
 8005062:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005066:	e10a      	b.n	800527e <UART_SetConfig+0x2fe>
 8005068:	2310      	movs	r3, #16
 800506a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800506e:	e106      	b.n	800527e <UART_SetConfig+0x2fe>
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a7c      	ldr	r2, [pc, #496]	@ (8005268 <UART_SetConfig+0x2e8>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d138      	bne.n	80050ec <UART_SetConfig+0x16c>
 800507a:	4b7a      	ldr	r3, [pc, #488]	@ (8005264 <UART_SetConfig+0x2e4>)
 800507c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005080:	f003 030c 	and.w	r3, r3, #12
 8005084:	2b0c      	cmp	r3, #12
 8005086:	d82d      	bhi.n	80050e4 <UART_SetConfig+0x164>
 8005088:	a201      	add	r2, pc, #4	@ (adr r2, 8005090 <UART_SetConfig+0x110>)
 800508a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800508e:	bf00      	nop
 8005090:	080050c5 	.word	0x080050c5
 8005094:	080050e5 	.word	0x080050e5
 8005098:	080050e5 	.word	0x080050e5
 800509c:	080050e5 	.word	0x080050e5
 80050a0:	080050d5 	.word	0x080050d5
 80050a4:	080050e5 	.word	0x080050e5
 80050a8:	080050e5 	.word	0x080050e5
 80050ac:	080050e5 	.word	0x080050e5
 80050b0:	080050cd 	.word	0x080050cd
 80050b4:	080050e5 	.word	0x080050e5
 80050b8:	080050e5 	.word	0x080050e5
 80050bc:	080050e5 	.word	0x080050e5
 80050c0:	080050dd 	.word	0x080050dd
 80050c4:	2300      	movs	r3, #0
 80050c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050ca:	e0d8      	b.n	800527e <UART_SetConfig+0x2fe>
 80050cc:	2302      	movs	r3, #2
 80050ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050d2:	e0d4      	b.n	800527e <UART_SetConfig+0x2fe>
 80050d4:	2304      	movs	r3, #4
 80050d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050da:	e0d0      	b.n	800527e <UART_SetConfig+0x2fe>
 80050dc:	2308      	movs	r3, #8
 80050de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050e2:	e0cc      	b.n	800527e <UART_SetConfig+0x2fe>
 80050e4:	2310      	movs	r3, #16
 80050e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050ea:	e0c8      	b.n	800527e <UART_SetConfig+0x2fe>
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a5e      	ldr	r2, [pc, #376]	@ (800526c <UART_SetConfig+0x2ec>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d125      	bne.n	8005142 <UART_SetConfig+0x1c2>
 80050f6:	4b5b      	ldr	r3, [pc, #364]	@ (8005264 <UART_SetConfig+0x2e4>)
 80050f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050fc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005100:	2b30      	cmp	r3, #48	@ 0x30
 8005102:	d016      	beq.n	8005132 <UART_SetConfig+0x1b2>
 8005104:	2b30      	cmp	r3, #48	@ 0x30
 8005106:	d818      	bhi.n	800513a <UART_SetConfig+0x1ba>
 8005108:	2b20      	cmp	r3, #32
 800510a:	d00a      	beq.n	8005122 <UART_SetConfig+0x1a2>
 800510c:	2b20      	cmp	r3, #32
 800510e:	d814      	bhi.n	800513a <UART_SetConfig+0x1ba>
 8005110:	2b00      	cmp	r3, #0
 8005112:	d002      	beq.n	800511a <UART_SetConfig+0x19a>
 8005114:	2b10      	cmp	r3, #16
 8005116:	d008      	beq.n	800512a <UART_SetConfig+0x1aa>
 8005118:	e00f      	b.n	800513a <UART_SetConfig+0x1ba>
 800511a:	2300      	movs	r3, #0
 800511c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005120:	e0ad      	b.n	800527e <UART_SetConfig+0x2fe>
 8005122:	2302      	movs	r3, #2
 8005124:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005128:	e0a9      	b.n	800527e <UART_SetConfig+0x2fe>
 800512a:	2304      	movs	r3, #4
 800512c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005130:	e0a5      	b.n	800527e <UART_SetConfig+0x2fe>
 8005132:	2308      	movs	r3, #8
 8005134:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005138:	e0a1      	b.n	800527e <UART_SetConfig+0x2fe>
 800513a:	2310      	movs	r3, #16
 800513c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005140:	e09d      	b.n	800527e <UART_SetConfig+0x2fe>
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a4a      	ldr	r2, [pc, #296]	@ (8005270 <UART_SetConfig+0x2f0>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d125      	bne.n	8005198 <UART_SetConfig+0x218>
 800514c:	4b45      	ldr	r3, [pc, #276]	@ (8005264 <UART_SetConfig+0x2e4>)
 800514e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005152:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005156:	2bc0      	cmp	r3, #192	@ 0xc0
 8005158:	d016      	beq.n	8005188 <UART_SetConfig+0x208>
 800515a:	2bc0      	cmp	r3, #192	@ 0xc0
 800515c:	d818      	bhi.n	8005190 <UART_SetConfig+0x210>
 800515e:	2b80      	cmp	r3, #128	@ 0x80
 8005160:	d00a      	beq.n	8005178 <UART_SetConfig+0x1f8>
 8005162:	2b80      	cmp	r3, #128	@ 0x80
 8005164:	d814      	bhi.n	8005190 <UART_SetConfig+0x210>
 8005166:	2b00      	cmp	r3, #0
 8005168:	d002      	beq.n	8005170 <UART_SetConfig+0x1f0>
 800516a:	2b40      	cmp	r3, #64	@ 0x40
 800516c:	d008      	beq.n	8005180 <UART_SetConfig+0x200>
 800516e:	e00f      	b.n	8005190 <UART_SetConfig+0x210>
 8005170:	2300      	movs	r3, #0
 8005172:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005176:	e082      	b.n	800527e <UART_SetConfig+0x2fe>
 8005178:	2302      	movs	r3, #2
 800517a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800517e:	e07e      	b.n	800527e <UART_SetConfig+0x2fe>
 8005180:	2304      	movs	r3, #4
 8005182:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005186:	e07a      	b.n	800527e <UART_SetConfig+0x2fe>
 8005188:	2308      	movs	r3, #8
 800518a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800518e:	e076      	b.n	800527e <UART_SetConfig+0x2fe>
 8005190:	2310      	movs	r3, #16
 8005192:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005196:	e072      	b.n	800527e <UART_SetConfig+0x2fe>
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a35      	ldr	r2, [pc, #212]	@ (8005274 <UART_SetConfig+0x2f4>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d12a      	bne.n	80051f8 <UART_SetConfig+0x278>
 80051a2:	4b30      	ldr	r3, [pc, #192]	@ (8005264 <UART_SetConfig+0x2e4>)
 80051a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051ac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80051b0:	d01a      	beq.n	80051e8 <UART_SetConfig+0x268>
 80051b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80051b6:	d81b      	bhi.n	80051f0 <UART_SetConfig+0x270>
 80051b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051bc:	d00c      	beq.n	80051d8 <UART_SetConfig+0x258>
 80051be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051c2:	d815      	bhi.n	80051f0 <UART_SetConfig+0x270>
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d003      	beq.n	80051d0 <UART_SetConfig+0x250>
 80051c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051cc:	d008      	beq.n	80051e0 <UART_SetConfig+0x260>
 80051ce:	e00f      	b.n	80051f0 <UART_SetConfig+0x270>
 80051d0:	2300      	movs	r3, #0
 80051d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051d6:	e052      	b.n	800527e <UART_SetConfig+0x2fe>
 80051d8:	2302      	movs	r3, #2
 80051da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051de:	e04e      	b.n	800527e <UART_SetConfig+0x2fe>
 80051e0:	2304      	movs	r3, #4
 80051e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051e6:	e04a      	b.n	800527e <UART_SetConfig+0x2fe>
 80051e8:	2308      	movs	r3, #8
 80051ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051ee:	e046      	b.n	800527e <UART_SetConfig+0x2fe>
 80051f0:	2310      	movs	r3, #16
 80051f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051f6:	e042      	b.n	800527e <UART_SetConfig+0x2fe>
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a17      	ldr	r2, [pc, #92]	@ (800525c <UART_SetConfig+0x2dc>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d13a      	bne.n	8005278 <UART_SetConfig+0x2f8>
 8005202:	4b18      	ldr	r3, [pc, #96]	@ (8005264 <UART_SetConfig+0x2e4>)
 8005204:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005208:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800520c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005210:	d01a      	beq.n	8005248 <UART_SetConfig+0x2c8>
 8005212:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005216:	d81b      	bhi.n	8005250 <UART_SetConfig+0x2d0>
 8005218:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800521c:	d00c      	beq.n	8005238 <UART_SetConfig+0x2b8>
 800521e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005222:	d815      	bhi.n	8005250 <UART_SetConfig+0x2d0>
 8005224:	2b00      	cmp	r3, #0
 8005226:	d003      	beq.n	8005230 <UART_SetConfig+0x2b0>
 8005228:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800522c:	d008      	beq.n	8005240 <UART_SetConfig+0x2c0>
 800522e:	e00f      	b.n	8005250 <UART_SetConfig+0x2d0>
 8005230:	2300      	movs	r3, #0
 8005232:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005236:	e022      	b.n	800527e <UART_SetConfig+0x2fe>
 8005238:	2302      	movs	r3, #2
 800523a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800523e:	e01e      	b.n	800527e <UART_SetConfig+0x2fe>
 8005240:	2304      	movs	r3, #4
 8005242:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005246:	e01a      	b.n	800527e <UART_SetConfig+0x2fe>
 8005248:	2308      	movs	r3, #8
 800524a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800524e:	e016      	b.n	800527e <UART_SetConfig+0x2fe>
 8005250:	2310      	movs	r3, #16
 8005252:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005256:	e012      	b.n	800527e <UART_SetConfig+0x2fe>
 8005258:	cfff69f3 	.word	0xcfff69f3
 800525c:	40008000 	.word	0x40008000
 8005260:	40013800 	.word	0x40013800
 8005264:	40021000 	.word	0x40021000
 8005268:	40004400 	.word	0x40004400
 800526c:	40004800 	.word	0x40004800
 8005270:	40004c00 	.word	0x40004c00
 8005274:	40005000 	.word	0x40005000
 8005278:	2310      	movs	r3, #16
 800527a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4aae      	ldr	r2, [pc, #696]	@ (800553c <UART_SetConfig+0x5bc>)
 8005284:	4293      	cmp	r3, r2
 8005286:	f040 8097 	bne.w	80053b8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800528a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800528e:	2b08      	cmp	r3, #8
 8005290:	d823      	bhi.n	80052da <UART_SetConfig+0x35a>
 8005292:	a201      	add	r2, pc, #4	@ (adr r2, 8005298 <UART_SetConfig+0x318>)
 8005294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005298:	080052bd 	.word	0x080052bd
 800529c:	080052db 	.word	0x080052db
 80052a0:	080052c5 	.word	0x080052c5
 80052a4:	080052db 	.word	0x080052db
 80052a8:	080052cb 	.word	0x080052cb
 80052ac:	080052db 	.word	0x080052db
 80052b0:	080052db 	.word	0x080052db
 80052b4:	080052db 	.word	0x080052db
 80052b8:	080052d3 	.word	0x080052d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052bc:	f7fe fe28 	bl	8003f10 <HAL_RCC_GetPCLK1Freq>
 80052c0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80052c2:	e010      	b.n	80052e6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052c4:	4b9e      	ldr	r3, [pc, #632]	@ (8005540 <UART_SetConfig+0x5c0>)
 80052c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80052c8:	e00d      	b.n	80052e6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052ca:	f7fe fdb3 	bl	8003e34 <HAL_RCC_GetSysClockFreq>
 80052ce:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80052d0:	e009      	b.n	80052e6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80052d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80052d8:	e005      	b.n	80052e6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80052da:	2300      	movs	r3, #0
 80052dc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80052e4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80052e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	f000 8130 	beq.w	800554e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052f2:	4a94      	ldr	r2, [pc, #592]	@ (8005544 <UART_SetConfig+0x5c4>)
 80052f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80052f8:	461a      	mov	r2, r3
 80052fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8005300:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	685a      	ldr	r2, [r3, #4]
 8005306:	4613      	mov	r3, r2
 8005308:	005b      	lsls	r3, r3, #1
 800530a:	4413      	add	r3, r2
 800530c:	69ba      	ldr	r2, [r7, #24]
 800530e:	429a      	cmp	r2, r3
 8005310:	d305      	bcc.n	800531e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005318:	69ba      	ldr	r2, [r7, #24]
 800531a:	429a      	cmp	r2, r3
 800531c:	d903      	bls.n	8005326 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005324:	e113      	b.n	800554e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005328:	2200      	movs	r2, #0
 800532a:	60bb      	str	r3, [r7, #8]
 800532c:	60fa      	str	r2, [r7, #12]
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005332:	4a84      	ldr	r2, [pc, #528]	@ (8005544 <UART_SetConfig+0x5c4>)
 8005334:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005338:	b29b      	uxth	r3, r3
 800533a:	2200      	movs	r2, #0
 800533c:	603b      	str	r3, [r7, #0]
 800533e:	607a      	str	r2, [r7, #4]
 8005340:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005344:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005348:	f7fa ff66 	bl	8000218 <__aeabi_uldivmod>
 800534c:	4602      	mov	r2, r0
 800534e:	460b      	mov	r3, r1
 8005350:	4610      	mov	r0, r2
 8005352:	4619      	mov	r1, r3
 8005354:	f04f 0200 	mov.w	r2, #0
 8005358:	f04f 0300 	mov.w	r3, #0
 800535c:	020b      	lsls	r3, r1, #8
 800535e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005362:	0202      	lsls	r2, r0, #8
 8005364:	6979      	ldr	r1, [r7, #20]
 8005366:	6849      	ldr	r1, [r1, #4]
 8005368:	0849      	lsrs	r1, r1, #1
 800536a:	2000      	movs	r0, #0
 800536c:	460c      	mov	r4, r1
 800536e:	4605      	mov	r5, r0
 8005370:	eb12 0804 	adds.w	r8, r2, r4
 8005374:	eb43 0905 	adc.w	r9, r3, r5
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	469a      	mov	sl, r3
 8005380:	4693      	mov	fp, r2
 8005382:	4652      	mov	r2, sl
 8005384:	465b      	mov	r3, fp
 8005386:	4640      	mov	r0, r8
 8005388:	4649      	mov	r1, r9
 800538a:	f7fa ff45 	bl	8000218 <__aeabi_uldivmod>
 800538e:	4602      	mov	r2, r0
 8005390:	460b      	mov	r3, r1
 8005392:	4613      	mov	r3, r2
 8005394:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005396:	6a3b      	ldr	r3, [r7, #32]
 8005398:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800539c:	d308      	bcc.n	80053b0 <UART_SetConfig+0x430>
 800539e:	6a3b      	ldr	r3, [r7, #32]
 80053a0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80053a4:	d204      	bcs.n	80053b0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	6a3a      	ldr	r2, [r7, #32]
 80053ac:	60da      	str	r2, [r3, #12]
 80053ae:	e0ce      	b.n	800554e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80053b6:	e0ca      	b.n	800554e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	69db      	ldr	r3, [r3, #28]
 80053bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053c0:	d166      	bne.n	8005490 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80053c2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80053c6:	2b08      	cmp	r3, #8
 80053c8:	d827      	bhi.n	800541a <UART_SetConfig+0x49a>
 80053ca:	a201      	add	r2, pc, #4	@ (adr r2, 80053d0 <UART_SetConfig+0x450>)
 80053cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053d0:	080053f5 	.word	0x080053f5
 80053d4:	080053fd 	.word	0x080053fd
 80053d8:	08005405 	.word	0x08005405
 80053dc:	0800541b 	.word	0x0800541b
 80053e0:	0800540b 	.word	0x0800540b
 80053e4:	0800541b 	.word	0x0800541b
 80053e8:	0800541b 	.word	0x0800541b
 80053ec:	0800541b 	.word	0x0800541b
 80053f0:	08005413 	.word	0x08005413
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053f4:	f7fe fd8c 	bl	8003f10 <HAL_RCC_GetPCLK1Freq>
 80053f8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80053fa:	e014      	b.n	8005426 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053fc:	f7fe fd9e 	bl	8003f3c <HAL_RCC_GetPCLK2Freq>
 8005400:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005402:	e010      	b.n	8005426 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005404:	4b4e      	ldr	r3, [pc, #312]	@ (8005540 <UART_SetConfig+0x5c0>)
 8005406:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005408:	e00d      	b.n	8005426 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800540a:	f7fe fd13 	bl	8003e34 <HAL_RCC_GetSysClockFreq>
 800540e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005410:	e009      	b.n	8005426 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005412:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005416:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005418:	e005      	b.n	8005426 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800541a:	2300      	movs	r3, #0
 800541c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005424:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005428:	2b00      	cmp	r3, #0
 800542a:	f000 8090 	beq.w	800554e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005432:	4a44      	ldr	r2, [pc, #272]	@ (8005544 <UART_SetConfig+0x5c4>)
 8005434:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005438:	461a      	mov	r2, r3
 800543a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800543c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005440:	005a      	lsls	r2, r3, #1
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	085b      	lsrs	r3, r3, #1
 8005448:	441a      	add	r2, r3
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005452:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005454:	6a3b      	ldr	r3, [r7, #32]
 8005456:	2b0f      	cmp	r3, #15
 8005458:	d916      	bls.n	8005488 <UART_SetConfig+0x508>
 800545a:	6a3b      	ldr	r3, [r7, #32]
 800545c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005460:	d212      	bcs.n	8005488 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005462:	6a3b      	ldr	r3, [r7, #32]
 8005464:	b29b      	uxth	r3, r3
 8005466:	f023 030f 	bic.w	r3, r3, #15
 800546a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800546c:	6a3b      	ldr	r3, [r7, #32]
 800546e:	085b      	lsrs	r3, r3, #1
 8005470:	b29b      	uxth	r3, r3
 8005472:	f003 0307 	and.w	r3, r3, #7
 8005476:	b29a      	uxth	r2, r3
 8005478:	8bfb      	ldrh	r3, [r7, #30]
 800547a:	4313      	orrs	r3, r2
 800547c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	8bfa      	ldrh	r2, [r7, #30]
 8005484:	60da      	str	r2, [r3, #12]
 8005486:	e062      	b.n	800554e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800548e:	e05e      	b.n	800554e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005490:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005494:	2b08      	cmp	r3, #8
 8005496:	d828      	bhi.n	80054ea <UART_SetConfig+0x56a>
 8005498:	a201      	add	r2, pc, #4	@ (adr r2, 80054a0 <UART_SetConfig+0x520>)
 800549a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800549e:	bf00      	nop
 80054a0:	080054c5 	.word	0x080054c5
 80054a4:	080054cd 	.word	0x080054cd
 80054a8:	080054d5 	.word	0x080054d5
 80054ac:	080054eb 	.word	0x080054eb
 80054b0:	080054db 	.word	0x080054db
 80054b4:	080054eb 	.word	0x080054eb
 80054b8:	080054eb 	.word	0x080054eb
 80054bc:	080054eb 	.word	0x080054eb
 80054c0:	080054e3 	.word	0x080054e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054c4:	f7fe fd24 	bl	8003f10 <HAL_RCC_GetPCLK1Freq>
 80054c8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80054ca:	e014      	b.n	80054f6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054cc:	f7fe fd36 	bl	8003f3c <HAL_RCC_GetPCLK2Freq>
 80054d0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80054d2:	e010      	b.n	80054f6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054d4:	4b1a      	ldr	r3, [pc, #104]	@ (8005540 <UART_SetConfig+0x5c0>)
 80054d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80054d8:	e00d      	b.n	80054f6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054da:	f7fe fcab 	bl	8003e34 <HAL_RCC_GetSysClockFreq>
 80054de:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80054e0:	e009      	b.n	80054f6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80054e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80054e8:	e005      	b.n	80054f6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80054ea:	2300      	movs	r3, #0
 80054ec:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80054f4:	bf00      	nop
    }

    if (pclk != 0U)
 80054f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d028      	beq.n	800554e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005500:	4a10      	ldr	r2, [pc, #64]	@ (8005544 <UART_SetConfig+0x5c4>)
 8005502:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005506:	461a      	mov	r2, r3
 8005508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800550a:	fbb3 f2f2 	udiv	r2, r3, r2
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	085b      	lsrs	r3, r3, #1
 8005514:	441a      	add	r2, r3
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	fbb2 f3f3 	udiv	r3, r2, r3
 800551e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005520:	6a3b      	ldr	r3, [r7, #32]
 8005522:	2b0f      	cmp	r3, #15
 8005524:	d910      	bls.n	8005548 <UART_SetConfig+0x5c8>
 8005526:	6a3b      	ldr	r3, [r7, #32]
 8005528:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800552c:	d20c      	bcs.n	8005548 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800552e:	6a3b      	ldr	r3, [r7, #32]
 8005530:	b29a      	uxth	r2, r3
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	60da      	str	r2, [r3, #12]
 8005538:	e009      	b.n	800554e <UART_SetConfig+0x5ce>
 800553a:	bf00      	nop
 800553c:	40008000 	.word	0x40008000
 8005540:	00f42400 	.word	0x00f42400
 8005544:	08005c44 	.word	0x08005c44
      }
      else
      {
        ret = HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	2201      	movs	r2, #1
 8005552:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	2201      	movs	r2, #1
 800555a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	2200      	movs	r2, #0
 8005562:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	2200      	movs	r2, #0
 8005568:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800556a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800556e:	4618      	mov	r0, r3
 8005570:	3730      	adds	r7, #48	@ 0x30
 8005572:	46bd      	mov	sp, r7
 8005574:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005578 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005584:	f003 0308 	and.w	r3, r3, #8
 8005588:	2b00      	cmp	r3, #0
 800558a:	d00a      	beq.n	80055a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	430a      	orrs	r2, r1
 80055a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055a6:	f003 0301 	and.w	r3, r3, #1
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d00a      	beq.n	80055c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	430a      	orrs	r2, r1
 80055c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055c8:	f003 0302 	and.w	r3, r3, #2
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d00a      	beq.n	80055e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	430a      	orrs	r2, r1
 80055e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055ea:	f003 0304 	and.w	r3, r3, #4
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d00a      	beq.n	8005608 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	430a      	orrs	r2, r1
 8005606:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800560c:	f003 0310 	and.w	r3, r3, #16
 8005610:	2b00      	cmp	r3, #0
 8005612:	d00a      	beq.n	800562a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	430a      	orrs	r2, r1
 8005628:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800562e:	f003 0320 	and.w	r3, r3, #32
 8005632:	2b00      	cmp	r3, #0
 8005634:	d00a      	beq.n	800564c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	430a      	orrs	r2, r1
 800564a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005650:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005654:	2b00      	cmp	r3, #0
 8005656:	d01a      	beq.n	800568e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	430a      	orrs	r2, r1
 800566c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005672:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005676:	d10a      	bne.n	800568e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	430a      	orrs	r2, r1
 800568c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005692:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005696:	2b00      	cmp	r3, #0
 8005698:	d00a      	beq.n	80056b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	430a      	orrs	r2, r1
 80056ae:	605a      	str	r2, [r3, #4]
  }
}
 80056b0:	bf00      	nop
 80056b2:	370c      	adds	r7, #12
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr

080056bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b098      	sub	sp, #96	@ 0x60
 80056c0:	af02      	add	r7, sp, #8
 80056c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80056cc:	f7fb fd8a 	bl	80011e4 <HAL_GetTick>
 80056d0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f003 0308 	and.w	r3, r3, #8
 80056dc:	2b08      	cmp	r3, #8
 80056de:	d12f      	bne.n	8005740 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056e0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80056e4:	9300      	str	r3, [sp, #0]
 80056e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056e8:	2200      	movs	r2, #0
 80056ea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f000 f88e 	bl	8005810 <UART_WaitOnFlagUntilTimeout>
 80056f4:	4603      	mov	r3, r0
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d022      	beq.n	8005740 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005702:	e853 3f00 	ldrex	r3, [r3]
 8005706:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005708:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800570a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800570e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	461a      	mov	r2, r3
 8005716:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005718:	647b      	str	r3, [r7, #68]	@ 0x44
 800571a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800571c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800571e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005720:	e841 2300 	strex	r3, r2, [r1]
 8005724:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005726:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005728:	2b00      	cmp	r3, #0
 800572a:	d1e6      	bne.n	80056fa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2220      	movs	r2, #32
 8005730:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800573c:	2303      	movs	r3, #3
 800573e:	e063      	b.n	8005808 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f003 0304 	and.w	r3, r3, #4
 800574a:	2b04      	cmp	r3, #4
 800574c:	d149      	bne.n	80057e2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800574e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005752:	9300      	str	r3, [sp, #0]
 8005754:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005756:	2200      	movs	r2, #0
 8005758:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	f000 f857 	bl	8005810 <UART_WaitOnFlagUntilTimeout>
 8005762:	4603      	mov	r3, r0
 8005764:	2b00      	cmp	r3, #0
 8005766:	d03c      	beq.n	80057e2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800576e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005770:	e853 3f00 	ldrex	r3, [r3]
 8005774:	623b      	str	r3, [r7, #32]
   return(result);
 8005776:	6a3b      	ldr	r3, [r7, #32]
 8005778:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800577c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	461a      	mov	r2, r3
 8005784:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005786:	633b      	str	r3, [r7, #48]	@ 0x30
 8005788:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800578a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800578c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800578e:	e841 2300 	strex	r3, r2, [r1]
 8005792:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005796:	2b00      	cmp	r3, #0
 8005798:	d1e6      	bne.n	8005768 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	3308      	adds	r3, #8
 80057a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	e853 3f00 	ldrex	r3, [r3]
 80057a8:	60fb      	str	r3, [r7, #12]
   return(result);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	f023 0301 	bic.w	r3, r3, #1
 80057b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	3308      	adds	r3, #8
 80057b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80057ba:	61fa      	str	r2, [r7, #28]
 80057bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057be:	69b9      	ldr	r1, [r7, #24]
 80057c0:	69fa      	ldr	r2, [r7, #28]
 80057c2:	e841 2300 	strex	r3, r2, [r1]
 80057c6:	617b      	str	r3, [r7, #20]
   return(result);
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d1e5      	bne.n	800579a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2220      	movs	r2, #32
 80057d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2200      	movs	r2, #0
 80057da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057de:	2303      	movs	r3, #3
 80057e0:	e012      	b.n	8005808 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2220      	movs	r2, #32
 80057e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2220      	movs	r2, #32
 80057ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2200      	movs	r2, #0
 80057f6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2200      	movs	r2, #0
 80057fc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2200      	movs	r2, #0
 8005802:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005806:	2300      	movs	r3, #0
}
 8005808:	4618      	mov	r0, r3
 800580a:	3758      	adds	r7, #88	@ 0x58
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}

08005810 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b084      	sub	sp, #16
 8005814:	af00      	add	r7, sp, #0
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	60b9      	str	r1, [r7, #8]
 800581a:	603b      	str	r3, [r7, #0]
 800581c:	4613      	mov	r3, r2
 800581e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005820:	e04f      	b.n	80058c2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005822:	69bb      	ldr	r3, [r7, #24]
 8005824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005828:	d04b      	beq.n	80058c2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800582a:	f7fb fcdb 	bl	80011e4 <HAL_GetTick>
 800582e:	4602      	mov	r2, r0
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	1ad3      	subs	r3, r2, r3
 8005834:	69ba      	ldr	r2, [r7, #24]
 8005836:	429a      	cmp	r2, r3
 8005838:	d302      	bcc.n	8005840 <UART_WaitOnFlagUntilTimeout+0x30>
 800583a:	69bb      	ldr	r3, [r7, #24]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d101      	bne.n	8005844 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005840:	2303      	movs	r3, #3
 8005842:	e04e      	b.n	80058e2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f003 0304 	and.w	r3, r3, #4
 800584e:	2b00      	cmp	r3, #0
 8005850:	d037      	beq.n	80058c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	2b80      	cmp	r3, #128	@ 0x80
 8005856:	d034      	beq.n	80058c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	2b40      	cmp	r3, #64	@ 0x40
 800585c:	d031      	beq.n	80058c2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	69db      	ldr	r3, [r3, #28]
 8005864:	f003 0308 	and.w	r3, r3, #8
 8005868:	2b08      	cmp	r3, #8
 800586a:	d110      	bne.n	800588e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	2208      	movs	r2, #8
 8005872:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005874:	68f8      	ldr	r0, [r7, #12]
 8005876:	f000 f838 	bl	80058ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2208      	movs	r2, #8
 800587e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2200      	movs	r2, #0
 8005886:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	e029      	b.n	80058e2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	69db      	ldr	r3, [r3, #28]
 8005894:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005898:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800589c:	d111      	bne.n	80058c2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80058a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80058a8:	68f8      	ldr	r0, [r7, #12]
 80058aa:	f000 f81e 	bl	80058ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2220      	movs	r2, #32
 80058b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2200      	movs	r2, #0
 80058ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80058be:	2303      	movs	r3, #3
 80058c0:	e00f      	b.n	80058e2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	69da      	ldr	r2, [r3, #28]
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	4013      	ands	r3, r2
 80058cc:	68ba      	ldr	r2, [r7, #8]
 80058ce:	429a      	cmp	r2, r3
 80058d0:	bf0c      	ite	eq
 80058d2:	2301      	moveq	r3, #1
 80058d4:	2300      	movne	r3, #0
 80058d6:	b2db      	uxtb	r3, r3
 80058d8:	461a      	mov	r2, r3
 80058da:	79fb      	ldrb	r3, [r7, #7]
 80058dc:	429a      	cmp	r2, r3
 80058de:	d0a0      	beq.n	8005822 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80058e0:	2300      	movs	r3, #0
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3710      	adds	r7, #16
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}

080058ea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80058ea:	b480      	push	{r7}
 80058ec:	b095      	sub	sp, #84	@ 0x54
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058fa:	e853 3f00 	ldrex	r3, [r3]
 80058fe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005902:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005906:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	461a      	mov	r2, r3
 800590e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005910:	643b      	str	r3, [r7, #64]	@ 0x40
 8005912:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005914:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005916:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005918:	e841 2300 	strex	r3, r2, [r1]
 800591c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800591e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005920:	2b00      	cmp	r3, #0
 8005922:	d1e6      	bne.n	80058f2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	3308      	adds	r3, #8
 800592a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800592c:	6a3b      	ldr	r3, [r7, #32]
 800592e:	e853 3f00 	ldrex	r3, [r3]
 8005932:	61fb      	str	r3, [r7, #28]
   return(result);
 8005934:	69fb      	ldr	r3, [r7, #28]
 8005936:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800593a:	f023 0301 	bic.w	r3, r3, #1
 800593e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	3308      	adds	r3, #8
 8005946:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005948:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800594a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800594c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800594e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005950:	e841 2300 	strex	r3, r2, [r1]
 8005954:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005958:	2b00      	cmp	r3, #0
 800595a:	d1e3      	bne.n	8005924 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005960:	2b01      	cmp	r3, #1
 8005962:	d118      	bne.n	8005996 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	e853 3f00 	ldrex	r3, [r3]
 8005970:	60bb      	str	r3, [r7, #8]
   return(result);
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	f023 0310 	bic.w	r3, r3, #16
 8005978:	647b      	str	r3, [r7, #68]	@ 0x44
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	461a      	mov	r2, r3
 8005980:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005982:	61bb      	str	r3, [r7, #24]
 8005984:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005986:	6979      	ldr	r1, [r7, #20]
 8005988:	69ba      	ldr	r2, [r7, #24]
 800598a:	e841 2300 	strex	r3, r2, [r1]
 800598e:	613b      	str	r3, [r7, #16]
   return(result);
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d1e6      	bne.n	8005964 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2220      	movs	r2, #32
 800599a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2200      	movs	r2, #0
 80059a2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2200      	movs	r2, #0
 80059a8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80059aa:	bf00      	nop
 80059ac:	3754      	adds	r7, #84	@ 0x54
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr

080059b6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80059b6:	b480      	push	{r7}
 80059b8:	b085      	sub	sp, #20
 80059ba:	af00      	add	r7, sp, #0
 80059bc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d101      	bne.n	80059cc <HAL_UARTEx_DisableFifoMode+0x16>
 80059c8:	2302      	movs	r3, #2
 80059ca:	e027      	b.n	8005a1c <HAL_UARTEx_DisableFifoMode+0x66>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2224      	movs	r2, #36	@ 0x24
 80059d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	681a      	ldr	r2, [r3, #0]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f022 0201 	bic.w	r2, r2, #1
 80059f2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80059fa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2200      	movs	r2, #0
 8005a00:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	68fa      	ldr	r2, [r7, #12]
 8005a08:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2220      	movs	r2, #32
 8005a0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2200      	movs	r2, #0
 8005a16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005a1a:	2300      	movs	r3, #0
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3714      	adds	r7, #20
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr

08005a28 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b084      	sub	sp, #16
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d101      	bne.n	8005a40 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005a3c:	2302      	movs	r3, #2
 8005a3e:	e02d      	b.n	8005a9c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2201      	movs	r2, #1
 8005a44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2224      	movs	r2, #36	@ 0x24
 8005a4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f022 0201 	bic.w	r2, r2, #1
 8005a66:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	683a      	ldr	r2, [r7, #0]
 8005a78:	430a      	orrs	r2, r1
 8005a7a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f000 f84f 	bl	8005b20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	68fa      	ldr	r2, [r7, #12]
 8005a88:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2220      	movs	r2, #32
 8005a8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005a9a:	2300      	movs	r3, #0
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3710      	adds	r7, #16
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}

08005aa4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b084      	sub	sp, #16
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	d101      	bne.n	8005abc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005ab8:	2302      	movs	r3, #2
 8005aba:	e02d      	b.n	8005b18 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2224      	movs	r2, #36	@ 0x24
 8005ac8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f022 0201 	bic.w	r2, r2, #1
 8005ae2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	683a      	ldr	r2, [r7, #0]
 8005af4:	430a      	orrs	r2, r1
 8005af6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f000 f811 	bl	8005b20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	68fa      	ldr	r2, [r7, #12]
 8005b04:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2220      	movs	r2, #32
 8005b0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2200      	movs	r2, #0
 8005b12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005b16:	2300      	movs	r3, #0
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3710      	adds	r7, #16
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}

08005b20 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b085      	sub	sp, #20
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d108      	bne.n	8005b42 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2201      	movs	r2, #1
 8005b34:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005b40:	e031      	b.n	8005ba6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005b42:	2308      	movs	r3, #8
 8005b44:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005b46:	2308      	movs	r3, #8
 8005b48:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	0e5b      	lsrs	r3, r3, #25
 8005b52:	b2db      	uxtb	r3, r3
 8005b54:	f003 0307 	and.w	r3, r3, #7
 8005b58:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	0f5b      	lsrs	r3, r3, #29
 8005b62:	b2db      	uxtb	r3, r3
 8005b64:	f003 0307 	and.w	r3, r3, #7
 8005b68:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005b6a:	7bbb      	ldrb	r3, [r7, #14]
 8005b6c:	7b3a      	ldrb	r2, [r7, #12]
 8005b6e:	4911      	ldr	r1, [pc, #68]	@ (8005bb4 <UARTEx_SetNbDataToProcess+0x94>)
 8005b70:	5c8a      	ldrb	r2, [r1, r2]
 8005b72:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005b76:	7b3a      	ldrb	r2, [r7, #12]
 8005b78:	490f      	ldr	r1, [pc, #60]	@ (8005bb8 <UARTEx_SetNbDataToProcess+0x98>)
 8005b7a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005b7c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005b80:	b29a      	uxth	r2, r3
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005b88:	7bfb      	ldrb	r3, [r7, #15]
 8005b8a:	7b7a      	ldrb	r2, [r7, #13]
 8005b8c:	4909      	ldr	r1, [pc, #36]	@ (8005bb4 <UARTEx_SetNbDataToProcess+0x94>)
 8005b8e:	5c8a      	ldrb	r2, [r1, r2]
 8005b90:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005b94:	7b7a      	ldrb	r2, [r7, #13]
 8005b96:	4908      	ldr	r1, [pc, #32]	@ (8005bb8 <UARTEx_SetNbDataToProcess+0x98>)
 8005b98:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005b9a:	fb93 f3f2 	sdiv	r3, r3, r2
 8005b9e:	b29a      	uxth	r2, r3
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005ba6:	bf00      	nop
 8005ba8:	3714      	adds	r7, #20
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr
 8005bb2:	bf00      	nop
 8005bb4:	08005c5c 	.word	0x08005c5c
 8005bb8:	08005c64 	.word	0x08005c64

08005bbc <memset>:
 8005bbc:	4402      	add	r2, r0
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d100      	bne.n	8005bc6 <memset+0xa>
 8005bc4:	4770      	bx	lr
 8005bc6:	f803 1b01 	strb.w	r1, [r3], #1
 8005bca:	e7f9      	b.n	8005bc0 <memset+0x4>

08005bcc <__libc_init_array>:
 8005bcc:	b570      	push	{r4, r5, r6, lr}
 8005bce:	4d0d      	ldr	r5, [pc, #52]	@ (8005c04 <__libc_init_array+0x38>)
 8005bd0:	4c0d      	ldr	r4, [pc, #52]	@ (8005c08 <__libc_init_array+0x3c>)
 8005bd2:	1b64      	subs	r4, r4, r5
 8005bd4:	10a4      	asrs	r4, r4, #2
 8005bd6:	2600      	movs	r6, #0
 8005bd8:	42a6      	cmp	r6, r4
 8005bda:	d109      	bne.n	8005bf0 <__libc_init_array+0x24>
 8005bdc:	4d0b      	ldr	r5, [pc, #44]	@ (8005c0c <__libc_init_array+0x40>)
 8005bde:	4c0c      	ldr	r4, [pc, #48]	@ (8005c10 <__libc_init_array+0x44>)
 8005be0:	f000 f818 	bl	8005c14 <_init>
 8005be4:	1b64      	subs	r4, r4, r5
 8005be6:	10a4      	asrs	r4, r4, #2
 8005be8:	2600      	movs	r6, #0
 8005bea:	42a6      	cmp	r6, r4
 8005bec:	d105      	bne.n	8005bfa <__libc_init_array+0x2e>
 8005bee:	bd70      	pop	{r4, r5, r6, pc}
 8005bf0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bf4:	4798      	blx	r3
 8005bf6:	3601      	adds	r6, #1
 8005bf8:	e7ee      	b.n	8005bd8 <__libc_init_array+0xc>
 8005bfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bfe:	4798      	blx	r3
 8005c00:	3601      	adds	r6, #1
 8005c02:	e7f2      	b.n	8005bea <__libc_init_array+0x1e>
 8005c04:	08005c74 	.word	0x08005c74
 8005c08:	08005c74 	.word	0x08005c74
 8005c0c:	08005c74 	.word	0x08005c74
 8005c10:	08005c78 	.word	0x08005c78

08005c14 <_init>:
 8005c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c16:	bf00      	nop
 8005c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c1a:	bc08      	pop	{r3}
 8005c1c:	469e      	mov	lr, r3
 8005c1e:	4770      	bx	lr

08005c20 <_fini>:
 8005c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c22:	bf00      	nop
 8005c24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c26:	bc08      	pop	{r3}
 8005c28:	469e      	mov	lr, r3
 8005c2a:	4770      	bx	lr
