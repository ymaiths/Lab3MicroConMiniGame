
SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000067c4  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800699c  0800699c  0000799c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069dc  080069dc  0000800c  2**0
                  CONTENTS
  4 .ARM          00000008  080069dc  080069dc  000079dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080069e4  080069e4  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080069e4  080069e4  000079e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080069e8  080069e8  000079e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080069ec  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000042c  20000010  080069f8  00008010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000043c  080069f8  0000843c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001aae3  00000000  00000000  0000803c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d90  00000000  00000000  00022b1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016e8  00000000  00000000  000258b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011f5  00000000  00000000  00026f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002740  00000000  00000000  0002818d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a52e  00000000  00000000  0002a8cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00114c40  00000000  00000000  00044dfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00159a3b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000063dc  00000000  00000000  00159a80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  0015fe5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006984 	.word	0x08006984

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	08006984 	.word	0x08006984

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800050c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050e:	f000 ff5a 	bl	80013c6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000512:	f000 f865 	bl	80005e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000516:	f000 fa57 	bl	80009c8 <MX_GPIO_Init>
  MX_DMA_Init();
 800051a:	f000 fa2b 	bl	8000974 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 800051e:	f000 f923 	bl	8000768 <MX_LPUART1_UART_Init>
  MX_SPI3_Init();
 8000522:	f000 f9b9 	bl	8000898 <MX_SPI3_Init>
  MX_ADC1_Init();
 8000526:	f000 f8a7 	bl	8000678 <MX_ADC1_Init>
  MX_TIM16_Init();
 800052a:	f000 f9f3 	bl	8000914 <MX_TIM16_Init>
  MX_USART1_UART_Init();
 800052e:	f000 f965 	bl	80007fc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  SPITxRx_Setup();
 8000532:	f000 fc75 	bl	8000e20 <SPITxRx_Setup>
  IODIRB_Init();
 8000536:	f000 fc89 	bl	8000e4c <IODIRB_Init>
  IODIRA_Init();
 800053a:	f000 fcb1 	bl	8000ea0 <IODIRA_Init>
  num = 4;
 800053e:	4b22      	ldr	r3, [pc, #136]	@ (80005c8 <main+0xc0>)
 8000540:	2204      	movs	r2, #4
 8000542:	701a      	strb	r2, [r3, #0]
  mode = 1;
 8000544:	4b21      	ldr	r3, [pc, #132]	@ (80005cc <main+0xc4>)
 8000546:	2201      	movs	r2, #1
 8000548:	701a      	strb	r2, [r3, #0]
  a[4] = 15;
 800054a:	4b21      	ldr	r3, [pc, #132]	@ (80005d0 <main+0xc8>)
 800054c:	220f      	movs	r2, #15
 800054e:	711a      	strb	r2, [r3, #4]

    /* USER CODE BEGIN 3 */



		  if(mode == 1){
 8000550:	4b1e      	ldr	r3, [pc, #120]	@ (80005cc <main+0xc4>)
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	2b01      	cmp	r3, #1
 8000556:	d128      	bne.n	80005aa <main+0xa2>
			  static uint64_t timestamp = 0;
			  if (HAL_GetTick() > timestamp){
 8000558:	f000 ff9a 	bl	8001490 <HAL_GetTick>
 800055c:	4603      	mov	r3, r0
 800055e:	2200      	movs	r2, #0
 8000560:	461c      	mov	r4, r3
 8000562:	4615      	mov	r5, r2
 8000564:	4b1b      	ldr	r3, [pc, #108]	@ (80005d4 <main+0xcc>)
 8000566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800056a:	42a2      	cmp	r2, r4
 800056c:	41ab      	sbcs	r3, r5
 800056e:	d222      	bcs.n	80005b6 <main+0xae>
				  RandNum = (b%4)+1;
 8000570:	4b19      	ldr	r3, [pc, #100]	@ (80005d8 <main+0xd0>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	f003 0303 	and.w	r3, r3, #3
 8000578:	b2db      	uxtb	r3, r3
 800057a:	3301      	adds	r3, #1
 800057c:	b2da      	uxtb	r2, r3
 800057e:	4b17      	ldr	r3, [pc, #92]	@ (80005dc <main+0xd4>)
 8000580:	701a      	strb	r2, [r3, #0]
				  SPITxRx_writeIO();
 8000582:	f000 fb53 	bl	8000c2c <SPITxRx_writeIO>
				  a[0] += 1;
 8000586:	4b12      	ldr	r3, [pc, #72]	@ (80005d0 <main+0xc8>)
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	3301      	adds	r3, #1
 800058c:	b2da      	uxtb	r2, r3
 800058e:	4b10      	ldr	r3, [pc, #64]	@ (80005d0 <main+0xc8>)
 8000590:	701a      	strb	r2, [r3, #0]
				  timestamp = HAL_GetTick() + 1000;
 8000592:	f000 ff7d 	bl	8001490 <HAL_GetTick>
 8000596:	4603      	mov	r3, r0
 8000598:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800059c:	2200      	movs	r2, #0
 800059e:	4698      	mov	r8, r3
 80005a0:	4691      	mov	r9, r2
 80005a2:	4b0c      	ldr	r3, [pc, #48]	@ (80005d4 <main+0xcc>)
 80005a4:	e9c3 8900 	strd	r8, r9, [r3]
 80005a8:	e005      	b.n	80005b6 <main+0xae>
			  }
		  }else if(mode == 2){
 80005aa:	4b08      	ldr	r3, [pc, #32]	@ (80005cc <main+0xc4>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b02      	cmp	r3, #2
 80005b0:	d101      	bne.n	80005b6 <main+0xae>
			  SPITxRx_readIO();
 80005b2:	f000 fa99 	bl	8000ae8 <SPITxRx_readIO>
			  }
		  AnsCheck();
 80005b6:	f000 fbeb 	bl	8000d90 <AnsCheck>





	  b+=1;
 80005ba:	4b07      	ldr	r3, [pc, #28]	@ (80005d8 <main+0xd0>)
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	3301      	adds	r3, #1
 80005c0:	b2da      	uxtb	r2, r3
 80005c2:	4b05      	ldr	r3, [pc, #20]	@ (80005d8 <main+0xd0>)
 80005c4:	701a      	strb	r2, [r3, #0]
		  if(mode == 1){
 80005c6:	e7c3      	b.n	8000550 <main+0x48>
 80005c8:	2000041b 	.word	0x2000041b
 80005cc:	20000402 	.word	0x20000402
 80005d0:	2000041c 	.word	0x2000041c
 80005d4:	20000430 	.word	0x20000430
 80005d8:	20000426 	.word	0x20000426
 80005dc:	20000427 	.word	0x20000427

080005e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b094      	sub	sp, #80	@ 0x50
 80005e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e6:	f107 0318 	add.w	r3, r7, #24
 80005ea:	2238      	movs	r2, #56	@ 0x38
 80005ec:	2100      	movs	r1, #0
 80005ee:	4618      	mov	r0, r3
 80005f0:	f006 f99c 	bl	800692c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f4:	1d3b      	adds	r3, r7, #4
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]
 80005fe:	60da      	str	r2, [r3, #12]
 8000600:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000602:	2000      	movs	r0, #0
 8000604:	f003 f8cc 	bl	80037a0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000608:	2302      	movs	r3, #2
 800060a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800060c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000610:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000612:	2340      	movs	r3, #64	@ 0x40
 8000614:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000616:	2302      	movs	r3, #2
 8000618:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800061a:	2302      	movs	r3, #2
 800061c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800061e:	2304      	movs	r3, #4
 8000620:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000622:	2355      	movs	r3, #85	@ 0x55
 8000624:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000626:	2302      	movs	r3, #2
 8000628:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800062a:	2302      	movs	r3, #2
 800062c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800062e:	2302      	movs	r3, #2
 8000630:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000632:	f107 0318 	add.w	r3, r7, #24
 8000636:	4618      	mov	r0, r3
 8000638:	f003 f966 	bl	8003908 <HAL_RCC_OscConfig>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000642:	f000 fc67 	bl	8000f14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000646:	230f      	movs	r3, #15
 8000648:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800064a:	2303      	movs	r3, #3
 800064c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064e:	2300      	movs	r3, #0
 8000650:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000652:	2300      	movs	r3, #0
 8000654:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000656:	2300      	movs	r3, #0
 8000658:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800065a:	1d3b      	adds	r3, r7, #4
 800065c:	2104      	movs	r1, #4
 800065e:	4618      	mov	r0, r3
 8000660:	f003 fc64 	bl	8003f2c <HAL_RCC_ClockConfig>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800066a:	f000 fc53 	bl	8000f14 <Error_Handler>
  }
}
 800066e:	bf00      	nop
 8000670:	3750      	adds	r7, #80	@ 0x50
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
	...

08000678 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b08c      	sub	sp, #48	@ 0x30
 800067c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800067e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]
 8000688:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800068a:	1d3b      	adds	r3, r7, #4
 800068c:	2220      	movs	r2, #32
 800068e:	2100      	movs	r1, #0
 8000690:	4618      	mov	r0, r3
 8000692:	f006 f94b 	bl	800692c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000696:	4b32      	ldr	r3, [pc, #200]	@ (8000760 <MX_ADC1_Init+0xe8>)
 8000698:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800069c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800069e:	4b30      	ldr	r3, [pc, #192]	@ (8000760 <MX_ADC1_Init+0xe8>)
 80006a0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80006a4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006a6:	4b2e      	ldr	r3, [pc, #184]	@ (8000760 <MX_ADC1_Init+0xe8>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006ac:	4b2c      	ldr	r3, [pc, #176]	@ (8000760 <MX_ADC1_Init+0xe8>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80006b2:	4b2b      	ldr	r3, [pc, #172]	@ (8000760 <MX_ADC1_Init+0xe8>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006b8:	4b29      	ldr	r3, [pc, #164]	@ (8000760 <MX_ADC1_Init+0xe8>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006be:	4b28      	ldr	r3, [pc, #160]	@ (8000760 <MX_ADC1_Init+0xe8>)
 80006c0:	2204      	movs	r2, #4
 80006c2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006c4:	4b26      	ldr	r3, [pc, #152]	@ (8000760 <MX_ADC1_Init+0xe8>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80006ca:	4b25      	ldr	r3, [pc, #148]	@ (8000760 <MX_ADC1_Init+0xe8>)
 80006cc:	2201      	movs	r2, #1
 80006ce:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80006d0:	4b23      	ldr	r3, [pc, #140]	@ (8000760 <MX_ADC1_Init+0xe8>)
 80006d2:	2201      	movs	r2, #1
 80006d4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006d6:	4b22      	ldr	r3, [pc, #136]	@ (8000760 <MX_ADC1_Init+0xe8>)
 80006d8:	2200      	movs	r2, #0
 80006da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006de:	4b20      	ldr	r3, [pc, #128]	@ (8000760 <MX_ADC1_Init+0xe8>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006e4:	4b1e      	ldr	r3, [pc, #120]	@ (8000760 <MX_ADC1_Init+0xe8>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80006ea:	4b1d      	ldr	r3, [pc, #116]	@ (8000760 <MX_ADC1_Init+0xe8>)
 80006ec:	2201      	movs	r2, #1
 80006ee:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006f2:	4b1b      	ldr	r3, [pc, #108]	@ (8000760 <MX_ADC1_Init+0xe8>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80006f8:	4b19      	ldr	r3, [pc, #100]	@ (8000760 <MX_ADC1_Init+0xe8>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000700:	4817      	ldr	r0, [pc, #92]	@ (8000760 <MX_ADC1_Init+0xe8>)
 8000702:	f001 f90b 	bl	800191c <HAL_ADC_Init>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 800070c:	f000 fc02 	bl	8000f14 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000710:	2300      	movs	r3, #0
 8000712:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000714:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000718:	4619      	mov	r1, r3
 800071a:	4811      	ldr	r0, [pc, #68]	@ (8000760 <MX_ADC1_Init+0xe8>)
 800071c:	f002 fa22 	bl	8002b64 <HAL_ADCEx_MultiModeConfigChannel>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000726:	f000 fbf5 	bl	8000f14 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800072a:	4b0e      	ldr	r3, [pc, #56]	@ (8000764 <MX_ADC1_Init+0xec>)
 800072c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800072e:	2306      	movs	r3, #6
 8000730:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000732:	2300      	movs	r3, #0
 8000734:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000736:	237f      	movs	r3, #127	@ 0x7f
 8000738:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800073a:	2304      	movs	r3, #4
 800073c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800073e:	2300      	movs	r3, #0
 8000740:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000742:	1d3b      	adds	r3, r7, #4
 8000744:	4619      	mov	r1, r3
 8000746:	4806      	ldr	r0, [pc, #24]	@ (8000760 <MX_ADC1_Init+0xe8>)
 8000748:	f001 fd74 	bl	8002234 <HAL_ADC_ConfigChannel>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000752:	f000 fbdf 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000756:	bf00      	nop
 8000758:	3730      	adds	r7, #48	@ 0x30
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	2000002c 	.word	0x2000002c
 8000764:	04300002 	.word	0x04300002

08000768 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800076c:	4b21      	ldr	r3, [pc, #132]	@ (80007f4 <MX_LPUART1_UART_Init+0x8c>)
 800076e:	4a22      	ldr	r2, [pc, #136]	@ (80007f8 <MX_LPUART1_UART_Init+0x90>)
 8000770:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000772:	4b20      	ldr	r3, [pc, #128]	@ (80007f4 <MX_LPUART1_UART_Init+0x8c>)
 8000774:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000778:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800077a:	4b1e      	ldr	r3, [pc, #120]	@ (80007f4 <MX_LPUART1_UART_Init+0x8c>)
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000780:	4b1c      	ldr	r3, [pc, #112]	@ (80007f4 <MX_LPUART1_UART_Init+0x8c>)
 8000782:	2200      	movs	r2, #0
 8000784:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000786:	4b1b      	ldr	r3, [pc, #108]	@ (80007f4 <MX_LPUART1_UART_Init+0x8c>)
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800078c:	4b19      	ldr	r3, [pc, #100]	@ (80007f4 <MX_LPUART1_UART_Init+0x8c>)
 800078e:	220c      	movs	r2, #12
 8000790:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000792:	4b18      	ldr	r3, [pc, #96]	@ (80007f4 <MX_LPUART1_UART_Init+0x8c>)
 8000794:	2200      	movs	r2, #0
 8000796:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000798:	4b16      	ldr	r3, [pc, #88]	@ (80007f4 <MX_LPUART1_UART_Init+0x8c>)
 800079a:	2200      	movs	r2, #0
 800079c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800079e:	4b15      	ldr	r3, [pc, #84]	@ (80007f4 <MX_LPUART1_UART_Init+0x8c>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007a4:	4b13      	ldr	r3, [pc, #76]	@ (80007f4 <MX_LPUART1_UART_Init+0x8c>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80007aa:	4812      	ldr	r0, [pc, #72]	@ (80007f4 <MX_LPUART1_UART_Init+0x8c>)
 80007ac:	f005 f974 	bl	8005a98 <HAL_UART_Init>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80007b6:	f000 fbad 	bl	8000f14 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007ba:	2100      	movs	r1, #0
 80007bc:	480d      	ldr	r0, [pc, #52]	@ (80007f4 <MX_LPUART1_UART_Init+0x8c>)
 80007be:	f005 ffeb 	bl	8006798 <HAL_UARTEx_SetTxFifoThreshold>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80007c8:	f000 fba4 	bl	8000f14 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007cc:	2100      	movs	r1, #0
 80007ce:	4809      	ldr	r0, [pc, #36]	@ (80007f4 <MX_LPUART1_UART_Init+0x8c>)
 80007d0:	f006 f820 	bl	8006814 <HAL_UARTEx_SetRxFifoThreshold>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80007da:	f000 fb9b 	bl	8000f14 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80007de:	4805      	ldr	r0, [pc, #20]	@ (80007f4 <MX_LPUART1_UART_Init+0x8c>)
 80007e0:	f005 ffa1 	bl	8006726 <HAL_UARTEx_DisableFifoMode>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80007ea:	f000 fb93 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	20000124 	.word	0x20000124
 80007f8:	40008000 	.word	0x40008000

080007fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000800:	4b23      	ldr	r3, [pc, #140]	@ (8000890 <MX_USART1_UART_Init+0x94>)
 8000802:	4a24      	ldr	r2, [pc, #144]	@ (8000894 <MX_USART1_UART_Init+0x98>)
 8000804:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 8000806:	4b22      	ldr	r3, [pc, #136]	@ (8000890 <MX_USART1_UART_Init+0x94>)
 8000808:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 800080c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 800080e:	4b20      	ldr	r3, [pc, #128]	@ (8000890 <MX_USART1_UART_Init+0x94>)
 8000810:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000814:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000816:	4b1e      	ldr	r3, [pc, #120]	@ (8000890 <MX_USART1_UART_Init+0x94>)
 8000818:	2200      	movs	r2, #0
 800081a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 800081c:	4b1c      	ldr	r3, [pc, #112]	@ (8000890 <MX_USART1_UART_Init+0x94>)
 800081e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000822:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000824:	4b1a      	ldr	r3, [pc, #104]	@ (8000890 <MX_USART1_UART_Init+0x94>)
 8000826:	220c      	movs	r2, #12
 8000828:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800082a:	4b19      	ldr	r3, [pc, #100]	@ (8000890 <MX_USART1_UART_Init+0x94>)
 800082c:	2200      	movs	r2, #0
 800082e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000830:	4b17      	ldr	r3, [pc, #92]	@ (8000890 <MX_USART1_UART_Init+0x94>)
 8000832:	2200      	movs	r2, #0
 8000834:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000836:	4b16      	ldr	r3, [pc, #88]	@ (8000890 <MX_USART1_UART_Init+0x94>)
 8000838:	2200      	movs	r2, #0
 800083a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800083c:	4b14      	ldr	r3, [pc, #80]	@ (8000890 <MX_USART1_UART_Init+0x94>)
 800083e:	2200      	movs	r2, #0
 8000840:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000842:	4b13      	ldr	r3, [pc, #76]	@ (8000890 <MX_USART1_UART_Init+0x94>)
 8000844:	2200      	movs	r2, #0
 8000846:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000848:	4811      	ldr	r0, [pc, #68]	@ (8000890 <MX_USART1_UART_Init+0x94>)
 800084a:	f005 f925 	bl	8005a98 <HAL_UART_Init>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_USART1_UART_Init+0x5c>
  {
    Error_Handler();
 8000854:	f000 fb5e 	bl	8000f14 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000858:	2100      	movs	r1, #0
 800085a:	480d      	ldr	r0, [pc, #52]	@ (8000890 <MX_USART1_UART_Init+0x94>)
 800085c:	f005 ff9c 	bl	8006798 <HAL_UARTEx_SetTxFifoThreshold>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_USART1_UART_Init+0x6e>
  {
    Error_Handler();
 8000866:	f000 fb55 	bl	8000f14 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800086a:	2100      	movs	r1, #0
 800086c:	4808      	ldr	r0, [pc, #32]	@ (8000890 <MX_USART1_UART_Init+0x94>)
 800086e:	f005 ffd1 	bl	8006814 <HAL_UARTEx_SetRxFifoThreshold>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_USART1_UART_Init+0x80>
  {
    Error_Handler();
 8000878:	f000 fb4c 	bl	8000f14 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800087c:	4804      	ldr	r0, [pc, #16]	@ (8000890 <MX_USART1_UART_Init+0x94>)
 800087e:	f005 ff52 	bl	8006726 <HAL_UARTEx_DisableFifoMode>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_USART1_UART_Init+0x90>
  {
    Error_Handler();
 8000888:	f000 fb44 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800088c:	bf00      	nop
 800088e:	bd80      	pop	{r7, pc}
 8000890:	200001f0 	.word	0x200001f0
 8000894:	40013800 	.word	0x40013800

08000898 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800089c:	4b1b      	ldr	r3, [pc, #108]	@ (800090c <MX_SPI3_Init+0x74>)
 800089e:	4a1c      	ldr	r2, [pc, #112]	@ (8000910 <MX_SPI3_Init+0x78>)
 80008a0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80008a2:	4b1a      	ldr	r3, [pc, #104]	@ (800090c <MX_SPI3_Init+0x74>)
 80008a4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80008a8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80008aa:	4b18      	ldr	r3, [pc, #96]	@ (800090c <MX_SPI3_Init+0x74>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80008b0:	4b16      	ldr	r3, [pc, #88]	@ (800090c <MX_SPI3_Init+0x74>)
 80008b2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80008b6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008b8:	4b14      	ldr	r3, [pc, #80]	@ (800090c <MX_SPI3_Init+0x74>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008be:	4b13      	ldr	r3, [pc, #76]	@ (800090c <MX_SPI3_Init+0x74>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80008c4:	4b11      	ldr	r3, [pc, #68]	@ (800090c <MX_SPI3_Init+0x74>)
 80008c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008ca:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80008cc:	4b0f      	ldr	r3, [pc, #60]	@ (800090c <MX_SPI3_Init+0x74>)
 80008ce:	2228      	movs	r2, #40	@ 0x28
 80008d0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008d2:	4b0e      	ldr	r3, [pc, #56]	@ (800090c <MX_SPI3_Init+0x74>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80008d8:	4b0c      	ldr	r3, [pc, #48]	@ (800090c <MX_SPI3_Init+0x74>)
 80008da:	2200      	movs	r2, #0
 80008dc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008de:	4b0b      	ldr	r3, [pc, #44]	@ (800090c <MX_SPI3_Init+0x74>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80008e4:	4b09      	ldr	r3, [pc, #36]	@ (800090c <MX_SPI3_Init+0x74>)
 80008e6:	2207      	movs	r2, #7
 80008e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008ea:	4b08      	ldr	r3, [pc, #32]	@ (800090c <MX_SPI3_Init+0x74>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008f0:	4b06      	ldr	r3, [pc, #24]	@ (800090c <MX_SPI3_Init+0x74>)
 80008f2:	2208      	movs	r2, #8
 80008f4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80008f6:	4805      	ldr	r0, [pc, #20]	@ (800090c <MX_SPI3_Init+0x74>)
 80008f8:	f003 ff82 	bl	8004800 <HAL_SPI_Init>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000902:	f000 fb07 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000906:	bf00      	nop
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	200002bc 	.word	0x200002bc
 8000910:	40003c00 	.word	0x40003c00

08000914 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000918:	4b14      	ldr	r3, [pc, #80]	@ (800096c <MX_TIM16_Init+0x58>)
 800091a:	4a15      	ldr	r2, [pc, #84]	@ (8000970 <MX_TIM16_Init+0x5c>)
 800091c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 800091e:	4b13      	ldr	r3, [pc, #76]	@ (800096c <MX_TIM16_Init+0x58>)
 8000920:	22a9      	movs	r2, #169	@ 0xa9
 8000922:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000924:	4b11      	ldr	r3, [pc, #68]	@ (800096c <MX_TIM16_Init+0x58>)
 8000926:	2200      	movs	r2, #0
 8000928:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 800092a:	4b10      	ldr	r3, [pc, #64]	@ (800096c <MX_TIM16_Init+0x58>)
 800092c:	f240 4279 	movw	r2, #1145	@ 0x479
 8000930:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000932:	4b0e      	ldr	r3, [pc, #56]	@ (800096c <MX_TIM16_Init+0x58>)
 8000934:	2200      	movs	r2, #0
 8000936:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000938:	4b0c      	ldr	r3, [pc, #48]	@ (800096c <MX_TIM16_Init+0x58>)
 800093a:	2200      	movs	r2, #0
 800093c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800093e:	4b0b      	ldr	r3, [pc, #44]	@ (800096c <MX_TIM16_Init+0x58>)
 8000940:	2200      	movs	r2, #0
 8000942:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000944:	4809      	ldr	r0, [pc, #36]	@ (800096c <MX_TIM16_Init+0x58>)
 8000946:	f004 fc83 	bl	8005250 <HAL_TIM_Base_Init>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8000950:	f000 fae0 	bl	8000f14 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8000954:	2108      	movs	r1, #8
 8000956:	4805      	ldr	r0, [pc, #20]	@ (800096c <MX_TIM16_Init+0x58>)
 8000958:	f004 fcde 	bl	8005318 <HAL_TIM_OnePulse_Init>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 8000962:	f000 fad7 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	20000320 	.word	0x20000320
 8000970:	40014400 	.word	0x40014400

08000974 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800097a:	4b12      	ldr	r3, [pc, #72]	@ (80009c4 <MX_DMA_Init+0x50>)
 800097c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800097e:	4a11      	ldr	r2, [pc, #68]	@ (80009c4 <MX_DMA_Init+0x50>)
 8000980:	f043 0304 	orr.w	r3, r3, #4
 8000984:	6493      	str	r3, [r2, #72]	@ 0x48
 8000986:	4b0f      	ldr	r3, [pc, #60]	@ (80009c4 <MX_DMA_Init+0x50>)
 8000988:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800098a:	f003 0304 	and.w	r3, r3, #4
 800098e:	607b      	str	r3, [r7, #4]
 8000990:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000992:	4b0c      	ldr	r3, [pc, #48]	@ (80009c4 <MX_DMA_Init+0x50>)
 8000994:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000996:	4a0b      	ldr	r2, [pc, #44]	@ (80009c4 <MX_DMA_Init+0x50>)
 8000998:	f043 0301 	orr.w	r3, r3, #1
 800099c:	6493      	str	r3, [r2, #72]	@ 0x48
 800099e:	4b09      	ldr	r3, [pc, #36]	@ (80009c4 <MX_DMA_Init+0x50>)
 80009a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80009a2:	f003 0301 	and.w	r3, r3, #1
 80009a6:	603b      	str	r3, [r7, #0]
 80009a8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80009aa:	2200      	movs	r2, #0
 80009ac:	2100      	movs	r1, #0
 80009ae:	200b      	movs	r0, #11
 80009b0:	f002 facb 	bl	8002f4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80009b4:	200b      	movs	r0, #11
 80009b6:	f002 fae2 	bl	8002f7e <HAL_NVIC_EnableIRQ>

}
 80009ba:	bf00      	nop
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40021000 	.word	0x40021000

080009c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b08a      	sub	sp, #40	@ 0x28
 80009cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ce:	f107 0314 	add.w	r3, r7, #20
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	605a      	str	r2, [r3, #4]
 80009d8:	609a      	str	r2, [r3, #8]
 80009da:	60da      	str	r2, [r3, #12]
 80009dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009de:	4b3f      	ldr	r3, [pc, #252]	@ (8000adc <MX_GPIO_Init+0x114>)
 80009e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009e2:	4a3e      	ldr	r2, [pc, #248]	@ (8000adc <MX_GPIO_Init+0x114>)
 80009e4:	f043 0304 	orr.w	r3, r3, #4
 80009e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009ea:	4b3c      	ldr	r3, [pc, #240]	@ (8000adc <MX_GPIO_Init+0x114>)
 80009ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ee:	f003 0304 	and.w	r3, r3, #4
 80009f2:	613b      	str	r3, [r7, #16]
 80009f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009f6:	4b39      	ldr	r3, [pc, #228]	@ (8000adc <MX_GPIO_Init+0x114>)
 80009f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009fa:	4a38      	ldr	r2, [pc, #224]	@ (8000adc <MX_GPIO_Init+0x114>)
 80009fc:	f043 0320 	orr.w	r3, r3, #32
 8000a00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a02:	4b36      	ldr	r3, [pc, #216]	@ (8000adc <MX_GPIO_Init+0x114>)
 8000a04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a06:	f003 0320 	and.w	r3, r3, #32
 8000a0a:	60fb      	str	r3, [r7, #12]
 8000a0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0e:	4b33      	ldr	r3, [pc, #204]	@ (8000adc <MX_GPIO_Init+0x114>)
 8000a10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a12:	4a32      	ldr	r2, [pc, #200]	@ (8000adc <MX_GPIO_Init+0x114>)
 8000a14:	f043 0301 	orr.w	r3, r3, #1
 8000a18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a1a:	4b30      	ldr	r3, [pc, #192]	@ (8000adc <MX_GPIO_Init+0x114>)
 8000a1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a1e:	f003 0301 	and.w	r3, r3, #1
 8000a22:	60bb      	str	r3, [r7, #8]
 8000a24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a26:	4b2d      	ldr	r3, [pc, #180]	@ (8000adc <MX_GPIO_Init+0x114>)
 8000a28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a2a:	4a2c      	ldr	r2, [pc, #176]	@ (8000adc <MX_GPIO_Init+0x114>)
 8000a2c:	f043 0308 	orr.w	r3, r3, #8
 8000a30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a32:	4b2a      	ldr	r3, [pc, #168]	@ (8000adc <MX_GPIO_Init+0x114>)
 8000a34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a36:	f003 0308 	and.w	r3, r3, #8
 8000a3a:	607b      	str	r3, [r7, #4]
 8000a3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a3e:	4b27      	ldr	r3, [pc, #156]	@ (8000adc <MX_GPIO_Init+0x114>)
 8000a40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a42:	4a26      	ldr	r2, [pc, #152]	@ (8000adc <MX_GPIO_Init+0x114>)
 8000a44:	f043 0302 	orr.w	r3, r3, #2
 8000a48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a4a:	4b24      	ldr	r3, [pc, #144]	@ (8000adc <MX_GPIO_Init+0x114>)
 8000a4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a4e:	f003 0302 	and.w	r3, r3, #2
 8000a52:	603b      	str	r3, [r7, #0]
 8000a54:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a56:	2200      	movs	r2, #0
 8000a58:	2120      	movs	r1, #32
 8000a5a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a5e:	f002 fe63 	bl	8003728 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 8000a62:	2201      	movs	r2, #1
 8000a64:	2104      	movs	r1, #4
 8000a66:	481e      	ldr	r0, [pc, #120]	@ (8000ae0 <MX_GPIO_Init+0x118>)
 8000a68:	f002 fe5e 	bl	8003728 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a6c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a72:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a7c:	f107 0314 	add.w	r3, r7, #20
 8000a80:	4619      	mov	r1, r3
 8000a82:	4818      	ldr	r0, [pc, #96]	@ (8000ae4 <MX_GPIO_Init+0x11c>)
 8000a84:	f002 fcb6 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a88:	2320      	movs	r3, #32
 8000a8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a94:	2300      	movs	r3, #0
 8000a96:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a98:	f107 0314 	add.w	r3, r7, #20
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000aa2:	f002 fca7 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000aa6:	2304      	movs	r3, #4
 8000aa8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ab6:	f107 0314 	add.w	r3, r7, #20
 8000aba:	4619      	mov	r1, r3
 8000abc:	4808      	ldr	r0, [pc, #32]	@ (8000ae0 <MX_GPIO_Init+0x118>)
 8000abe:	f002 fc99 	bl	80033f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	2028      	movs	r0, #40	@ 0x28
 8000ac8:	f002 fa3f 	bl	8002f4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000acc:	2028      	movs	r0, #40	@ 0x28
 8000ace:	f002 fa56 	bl	8002f7e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ad2:	bf00      	nop
 8000ad4:	3728      	adds	r7, #40	@ 0x28
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40021000 	.word	0x40021000
 8000ae0:	48000c00 	.word	0x48000c00
 8000ae4:	48000800 	.word	0x48000800

08000ae8 <SPITxRx_readIO>:

/* USER CODE BEGIN 4 */

void SPITxRx_readIO() //mode2
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_2)){
 8000aec:	2104      	movs	r1, #4
 8000aee:	4846      	ldr	r0, [pc, #280]	@ (8000c08 <SPITxRx_readIO+0x120>)
 8000af0:	f002 fe02 	bl	80036f8 <HAL_GPIO_ReadPin>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	f000 8083 	beq.w	8000c02 <SPITxRx_readIO+0x11a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0); // CS Select
 8000afc:	2200      	movs	r2, #0
 8000afe:	2104      	movs	r1, #4
 8000b00:	4841      	ldr	r0, [pc, #260]	@ (8000c08 <SPITxRx_readIO+0x120>)
 8000b02:	f002 fe11 	bl	8003728 <HAL_GPIO_WritePin>
		SPITx[0] = 0b01000001;
 8000b06:	4b41      	ldr	r3, [pc, #260]	@ (8000c0c <SPITxRx_readIO+0x124>)
 8000b08:	2241      	movs	r2, #65	@ 0x41
 8000b0a:	701a      	strb	r2, [r3, #0]
		SPITx[1] = 0x12;
 8000b0c:	4b3f      	ldr	r3, [pc, #252]	@ (8000c0c <SPITxRx_readIO+0x124>)
 8000b0e:	2212      	movs	r2, #18
 8000b10:	705a      	strb	r2, [r3, #1]
		SPITx[2] = 0;
 8000b12:	4b3e      	ldr	r3, [pc, #248]	@ (8000c0c <SPITxRx_readIO+0x124>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	709a      	strb	r2, [r3, #2]
		SPITx[3] = 0;
 8000b18:	4b3c      	ldr	r3, [pc, #240]	@ (8000c0c <SPITxRx_readIO+0x124>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	70da      	strb	r2, [r3, #3]

		if(SPIRx[2]== 14){
 8000b1e:	4b3c      	ldr	r3, [pc, #240]	@ (8000c10 <SPITxRx_readIO+0x128>)
 8000b20:	789b      	ldrb	r3, [r3, #2]
 8000b22:	2b0e      	cmp	r3, #14
 8000b24:	d103      	bne.n	8000b2e <SPITxRx_readIO+0x46>
			a[4] = 1;
 8000b26:	4b3b      	ldr	r3, [pc, #236]	@ (8000c14 <SPITxRx_readIO+0x12c>)
 8000b28:	2201      	movs	r2, #1
 8000b2a:	711a      	strb	r2, [r3, #4]
 8000b2c:	e01a      	b.n	8000b64 <SPITxRx_readIO+0x7c>
		}else if(SPIRx[2]== 13){
 8000b2e:	4b38      	ldr	r3, [pc, #224]	@ (8000c10 <SPITxRx_readIO+0x128>)
 8000b30:	789b      	ldrb	r3, [r3, #2]
 8000b32:	2b0d      	cmp	r3, #13
 8000b34:	d103      	bne.n	8000b3e <SPITxRx_readIO+0x56>
			a[4] = 2;
 8000b36:	4b37      	ldr	r3, [pc, #220]	@ (8000c14 <SPITxRx_readIO+0x12c>)
 8000b38:	2202      	movs	r2, #2
 8000b3a:	711a      	strb	r2, [r3, #4]
 8000b3c:	e012      	b.n	8000b64 <SPITxRx_readIO+0x7c>
		}else if(SPIRx[2]== 11){
 8000b3e:	4b34      	ldr	r3, [pc, #208]	@ (8000c10 <SPITxRx_readIO+0x128>)
 8000b40:	789b      	ldrb	r3, [r3, #2]
 8000b42:	2b0b      	cmp	r3, #11
 8000b44:	d103      	bne.n	8000b4e <SPITxRx_readIO+0x66>
			a[4] = 3;
 8000b46:	4b33      	ldr	r3, [pc, #204]	@ (8000c14 <SPITxRx_readIO+0x12c>)
 8000b48:	2203      	movs	r2, #3
 8000b4a:	711a      	strb	r2, [r3, #4]
 8000b4c:	e00a      	b.n	8000b64 <SPITxRx_readIO+0x7c>
		}else if(SPIRx[2]== 7){
 8000b4e:	4b30      	ldr	r3, [pc, #192]	@ (8000c10 <SPITxRx_readIO+0x128>)
 8000b50:	789b      	ldrb	r3, [r3, #2]
 8000b52:	2b07      	cmp	r3, #7
 8000b54:	d103      	bne.n	8000b5e <SPITxRx_readIO+0x76>
			a[4] = 4;
 8000b56:	4b2f      	ldr	r3, [pc, #188]	@ (8000c14 <SPITxRx_readIO+0x12c>)
 8000b58:	2204      	movs	r2, #4
 8000b5a:	711a      	strb	r2, [r3, #4]
 8000b5c:	e002      	b.n	8000b64 <SPITxRx_readIO+0x7c>
		}else{
			a[4] = 5;
 8000b5e:	4b2d      	ldr	r3, [pc, #180]	@ (8000c14 <SPITxRx_readIO+0x12c>)
 8000b60:	2205      	movs	r2, #5
 8000b62:	711a      	strb	r2, [r3, #4]
		}

		if(a[5]!=a[4] && a[4] == 5 && a[5] != 0){
 8000b64:	4b2b      	ldr	r3, [pc, #172]	@ (8000c14 <SPITxRx_readIO+0x12c>)
 8000b66:	795a      	ldrb	r2, [r3, #5]
 8000b68:	4b2a      	ldr	r3, [pc, #168]	@ (8000c14 <SPITxRx_readIO+0x12c>)
 8000b6a:	791b      	ldrb	r3, [r3, #4]
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	d014      	beq.n	8000b9a <SPITxRx_readIO+0xb2>
 8000b70:	4b28      	ldr	r3, [pc, #160]	@ (8000c14 <SPITxRx_readIO+0x12c>)
 8000b72:	791b      	ldrb	r3, [r3, #4]
 8000b74:	2b05      	cmp	r3, #5
 8000b76:	d110      	bne.n	8000b9a <SPITxRx_readIO+0xb2>
 8000b78:	4b26      	ldr	r3, [pc, #152]	@ (8000c14 <SPITxRx_readIO+0x12c>)
 8000b7a:	795b      	ldrb	r3, [r3, #5]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d00c      	beq.n	8000b9a <SPITxRx_readIO+0xb2>
			a[2]=a[2]+1;
 8000b80:	4b24      	ldr	r3, [pc, #144]	@ (8000c14 <SPITxRx_readIO+0x12c>)
 8000b82:	789b      	ldrb	r3, [r3, #2]
 8000b84:	3301      	adds	r3, #1
 8000b86:	b2da      	uxtb	r2, r3
 8000b88:	4b22      	ldr	r3, [pc, #136]	@ (8000c14 <SPITxRx_readIO+0x12c>)
 8000b8a:	709a      	strb	r2, [r3, #2]
			PushOrder[a[2]-1] = a[5];
 8000b8c:	4b21      	ldr	r3, [pc, #132]	@ (8000c14 <SPITxRx_readIO+0x12c>)
 8000b8e:	789b      	ldrb	r3, [r3, #2]
 8000b90:	3b01      	subs	r3, #1
 8000b92:	4a20      	ldr	r2, [pc, #128]	@ (8000c14 <SPITxRx_readIO+0x12c>)
 8000b94:	7951      	ldrb	r1, [r2, #5]
 8000b96:	4a20      	ldr	r2, [pc, #128]	@ (8000c18 <SPITxRx_readIO+0x130>)
 8000b98:	54d1      	strb	r1, [r2, r3]
		}
		// set a[5] = old a[4]
		a[5] = a[4];
 8000b9a:	4b1e      	ldr	r3, [pc, #120]	@ (8000c14 <SPITxRx_readIO+0x12c>)
 8000b9c:	791a      	ldrb	r2, [r3, #4]
 8000b9e:	4b1d      	ldr	r3, [pc, #116]	@ (8000c14 <SPITxRx_readIO+0x12c>)
 8000ba0:	715a      	strb	r2, [r3, #5]

		if(a[2] >= num-1){
 8000ba2:	4b1c      	ldr	r3, [pc, #112]	@ (8000c14 <SPITxRx_readIO+0x12c>)
 8000ba4:	789b      	ldrb	r3, [r3, #2]
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	4b1c      	ldr	r3, [pc, #112]	@ (8000c1c <SPITxRx_readIO+0x134>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	3b01      	subs	r3, #1
 8000bae:	429a      	cmp	r2, r3
 8000bb0:	db08      	blt.n	8000bc4 <SPITxRx_readIO+0xdc>
			a[7] =1;
 8000bb2:	4b18      	ldr	r3, [pc, #96]	@ (8000c14 <SPITxRx_readIO+0x12c>)
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	71da      	strb	r2, [r3, #7]
			mode = 1;
 8000bb8:	4b19      	ldr	r3, [pc, #100]	@ (8000c20 <SPITxRx_readIO+0x138>)
 8000bba:	2201      	movs	r2, #1
 8000bbc:	701a      	strb	r2, [r3, #0]
			a[2] = 0;
 8000bbe:	4b15      	ldr	r3, [pc, #84]	@ (8000c14 <SPITxRx_readIO+0x12c>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	709a      	strb	r2, [r3, #2]
		}
		if(AnsCheck()== 1 && a[7]){
 8000bc4:	f000 f8e4 	bl	8000d90 <AnsCheck>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b01      	cmp	r3, #1
 8000bcc:	d107      	bne.n	8000bde <SPITxRx_readIO+0xf6>
 8000bce:	4b11      	ldr	r3, [pc, #68]	@ (8000c14 <SPITxRx_readIO+0x12c>)
 8000bd0:	79db      	ldrb	r3, [r3, #7]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d003      	beq.n	8000bde <SPITxRx_readIO+0xf6>
			AnsCorrect = 1;
 8000bd6:	4b13      	ldr	r3, [pc, #76]	@ (8000c24 <SPITxRx_readIO+0x13c>)
 8000bd8:	2201      	movs	r2, #1
 8000bda:	701a      	strb	r2, [r3, #0]
 8000bdc:	e00b      	b.n	8000bf6 <SPITxRx_readIO+0x10e>
		}else if (AnsCheck() == 0 && a[7]){
 8000bde:	f000 f8d7 	bl	8000d90 <AnsCheck>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d106      	bne.n	8000bf6 <SPITxRx_readIO+0x10e>
 8000be8:	4b0a      	ldr	r3, [pc, #40]	@ (8000c14 <SPITxRx_readIO+0x12c>)
 8000bea:	79db      	ldrb	r3, [r3, #7]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d002      	beq.n	8000bf6 <SPITxRx_readIO+0x10e>
			AnsCorrect = 0;
 8000bf0:	4b0c      	ldr	r3, [pc, #48]	@ (8000c24 <SPITxRx_readIO+0x13c>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	701a      	strb	r2, [r3, #0]
		}

	HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 4);
 8000bf6:	2304      	movs	r3, #4
 8000bf8:	4a05      	ldr	r2, [pc, #20]	@ (8000c10 <SPITxRx_readIO+0x128>)
 8000bfa:	4904      	ldr	r1, [pc, #16]	@ (8000c0c <SPITxRx_readIO+0x124>)
 8000bfc:	480a      	ldr	r0, [pc, #40]	@ (8000c28 <SPITxRx_readIO+0x140>)
 8000bfe:	f003 feab 	bl	8004958 <HAL_SPI_TransmitReceive_IT>

}}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	48000c00 	.word	0x48000c00
 8000c0c:	200003f8 	.word	0x200003f8
 8000c10:	200003ec 	.word	0x200003ec
 8000c14:	2000041c 	.word	0x2000041c
 8000c18:	20000410 	.word	0x20000410
 8000c1c:	2000041b 	.word	0x2000041b
 8000c20:	20000402 	.word	0x20000402
 8000c24:	2000041a 	.word	0x2000041a
 8000c28:	200002bc 	.word	0x200002bc

08000c2c <SPITxRx_writeIO>:

void SPITxRx_writeIO(){ //mode1
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_2)){
 8000c30:	2104      	movs	r1, #4
 8000c32:	484d      	ldr	r0, [pc, #308]	@ (8000d68 <SPITxRx_writeIO+0x13c>)
 8000c34:	f002 fd60 	bl	80036f8 <HAL_GPIO_ReadPin>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	f000 8092 	beq.w	8000d64 <SPITxRx_writeIO+0x138>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0); // CS Select
 8000c40:	2200      	movs	r2, #0
 8000c42:	2104      	movs	r1, #4
 8000c44:	4848      	ldr	r0, [pc, #288]	@ (8000d68 <SPITxRx_writeIO+0x13c>)
 8000c46:	f002 fd6f 	bl	8003728 <HAL_GPIO_WritePin>
		if(LedOff == 0){
 8000c4a:	4b48      	ldr	r3, [pc, #288]	@ (8000d6c <SPITxRx_writeIO+0x140>)
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d150      	bne.n	8000cf4 <SPITxRx_writeIO+0xc8>
			SPITx[0] = 0b01000000;
 8000c52:	4b47      	ldr	r3, [pc, #284]	@ (8000d70 <SPITxRx_writeIO+0x144>)
 8000c54:	2240      	movs	r2, #64	@ 0x40
 8000c56:	701a      	strb	r2, [r3, #0]
			SPITx[1] = 0x15;
 8000c58:	4b45      	ldr	r3, [pc, #276]	@ (8000d70 <SPITxRx_writeIO+0x144>)
 8000c5a:	2215      	movs	r2, #21
 8000c5c:	705a      	strb	r2, [r3, #1]
				if(RandNum == 1){
 8000c5e:	4b45      	ldr	r3, [pc, #276]	@ (8000d74 <SPITxRx_writeIO+0x148>)
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	2b01      	cmp	r3, #1
 8000c64:	d109      	bne.n	8000c7a <SPITxRx_writeIO+0x4e>
					SPITx[2] = ~(0b00000001);
 8000c66:	4b42      	ldr	r3, [pc, #264]	@ (8000d70 <SPITxRx_writeIO+0x144>)
 8000c68:	22fe      	movs	r2, #254	@ 0xfe
 8000c6a:	709a      	strb	r2, [r3, #2]
					LedOff = 1 ;
 8000c6c:	4b3f      	ldr	r3, [pc, #252]	@ (8000d6c <SPITxRx_writeIO+0x140>)
 8000c6e:	2201      	movs	r2, #1
 8000c70:	701a      	strb	r2, [r3, #0]
					a[3] = 1;
 8000c72:	4b41      	ldr	r3, [pc, #260]	@ (8000d78 <SPITxRx_writeIO+0x14c>)
 8000c74:	2201      	movs	r2, #1
 8000c76:	70da      	strb	r2, [r3, #3]
 8000c78:	e028      	b.n	8000ccc <SPITxRx_writeIO+0xa0>
				}else if(RandNum == 2){
 8000c7a:	4b3e      	ldr	r3, [pc, #248]	@ (8000d74 <SPITxRx_writeIO+0x148>)
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	2b02      	cmp	r3, #2
 8000c80:	d109      	bne.n	8000c96 <SPITxRx_writeIO+0x6a>
					SPITx[2] = ~(0b00000010);
 8000c82:	4b3b      	ldr	r3, [pc, #236]	@ (8000d70 <SPITxRx_writeIO+0x144>)
 8000c84:	22fd      	movs	r2, #253	@ 0xfd
 8000c86:	709a      	strb	r2, [r3, #2]
					LedOff = 1 ;
 8000c88:	4b38      	ldr	r3, [pc, #224]	@ (8000d6c <SPITxRx_writeIO+0x140>)
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	701a      	strb	r2, [r3, #0]
					a[3] = 2;
 8000c8e:	4b3a      	ldr	r3, [pc, #232]	@ (8000d78 <SPITxRx_writeIO+0x14c>)
 8000c90:	2202      	movs	r2, #2
 8000c92:	70da      	strb	r2, [r3, #3]
 8000c94:	e01a      	b.n	8000ccc <SPITxRx_writeIO+0xa0>
				}else if(RandNum == 3){
 8000c96:	4b37      	ldr	r3, [pc, #220]	@ (8000d74 <SPITxRx_writeIO+0x148>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	2b03      	cmp	r3, #3
 8000c9c:	d109      	bne.n	8000cb2 <SPITxRx_writeIO+0x86>
					SPITx[2] = ~(0b00000100);
 8000c9e:	4b34      	ldr	r3, [pc, #208]	@ (8000d70 <SPITxRx_writeIO+0x144>)
 8000ca0:	22fb      	movs	r2, #251	@ 0xfb
 8000ca2:	709a      	strb	r2, [r3, #2]
					LedOff = 1 ;
 8000ca4:	4b31      	ldr	r3, [pc, #196]	@ (8000d6c <SPITxRx_writeIO+0x140>)
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	701a      	strb	r2, [r3, #0]
					a[3] = 3;
 8000caa:	4b33      	ldr	r3, [pc, #204]	@ (8000d78 <SPITxRx_writeIO+0x14c>)
 8000cac:	2203      	movs	r2, #3
 8000cae:	70da      	strb	r2, [r3, #3]
 8000cb0:	e00c      	b.n	8000ccc <SPITxRx_writeIO+0xa0>
				}else if(RandNum == 4){
 8000cb2:	4b30      	ldr	r3, [pc, #192]	@ (8000d74 <SPITxRx_writeIO+0x148>)
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	2b04      	cmp	r3, #4
 8000cb8:	d108      	bne.n	8000ccc <SPITxRx_writeIO+0xa0>
					SPITx[2] = ~(0b00001000);
 8000cba:	4b2d      	ldr	r3, [pc, #180]	@ (8000d70 <SPITxRx_writeIO+0x144>)
 8000cbc:	22f7      	movs	r2, #247	@ 0xf7
 8000cbe:	709a      	strb	r2, [r3, #2]
					LedOff = 1 ;
 8000cc0:	4b2a      	ldr	r3, [pc, #168]	@ (8000d6c <SPITxRx_writeIO+0x140>)
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	701a      	strb	r2, [r3, #0]
					a[3] = 4;
 8000cc6:	4b2c      	ldr	r3, [pc, #176]	@ (8000d78 <SPITxRx_writeIO+0x14c>)
 8000cc8:	2204      	movs	r2, #4
 8000cca:	70da      	strb	r2, [r3, #3]
				}
			LightOrder[a[1]] = a[3];
 8000ccc:	4b2a      	ldr	r3, [pc, #168]	@ (8000d78 <SPITxRx_writeIO+0x14c>)
 8000cce:	785b      	ldrb	r3, [r3, #1]
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	4b29      	ldr	r3, [pc, #164]	@ (8000d78 <SPITxRx_writeIO+0x14c>)
 8000cd4:	78d9      	ldrb	r1, [r3, #3]
 8000cd6:	4b29      	ldr	r3, [pc, #164]	@ (8000d7c <SPITxRx_writeIO+0x150>)
 8000cd8:	5499      	strb	r1, [r3, r2]
			a[1] = a[1]+1;
 8000cda:	4b27      	ldr	r3, [pc, #156]	@ (8000d78 <SPITxRx_writeIO+0x14c>)
 8000cdc:	785b      	ldrb	r3, [r3, #1]
 8000cde:	3301      	adds	r3, #1
 8000ce0:	b2da      	uxtb	r2, r3
 8000ce2:	4b25      	ldr	r3, [pc, #148]	@ (8000d78 <SPITxRx_writeIO+0x14c>)
 8000ce4:	705a      	strb	r2, [r3, #1]
			HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 3);
 8000ce6:	2303      	movs	r3, #3
 8000ce8:	4a25      	ldr	r2, [pc, #148]	@ (8000d80 <SPITxRx_writeIO+0x154>)
 8000cea:	4921      	ldr	r1, [pc, #132]	@ (8000d70 <SPITxRx_writeIO+0x144>)
 8000cec:	4825      	ldr	r0, [pc, #148]	@ (8000d84 <SPITxRx_writeIO+0x158>)
 8000cee:	f003 fe33 	bl	8004958 <HAL_SPI_TransmitReceive_IT>
			LedOff = 0;
			HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 4);
		}


	}}
 8000cf2:	e037      	b.n	8000d64 <SPITxRx_writeIO+0x138>
		}else if(a[1] >= num){
 8000cf4:	4b20      	ldr	r3, [pc, #128]	@ (8000d78 <SPITxRx_writeIO+0x14c>)
 8000cf6:	785a      	ldrb	r2, [r3, #1]
 8000cf8:	4b23      	ldr	r3, [pc, #140]	@ (8000d88 <SPITxRx_writeIO+0x15c>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d318      	bcc.n	8000d32 <SPITxRx_writeIO+0x106>
			LedOff = 0;
 8000d00:	4b1a      	ldr	r3, [pc, #104]	@ (8000d6c <SPITxRx_writeIO+0x140>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	701a      	strb	r2, [r3, #0]
			num += 1;
 8000d06:	4b20      	ldr	r3, [pc, #128]	@ (8000d88 <SPITxRx_writeIO+0x15c>)
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	b2da      	uxtb	r2, r3
 8000d0e:	4b1e      	ldr	r3, [pc, #120]	@ (8000d88 <SPITxRx_writeIO+0x15c>)
 8000d10:	701a      	strb	r2, [r3, #0]
			SPITx[2] = 0b00000000;
 8000d12:	4b17      	ldr	r3, [pc, #92]	@ (8000d70 <SPITxRx_writeIO+0x144>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	709a      	strb	r2, [r3, #2]
			mode = 2;
 8000d18:	4b1c      	ldr	r3, [pc, #112]	@ (8000d8c <SPITxRx_writeIO+0x160>)
 8000d1a:	2202      	movs	r2, #2
 8000d1c:	701a      	strb	r2, [r3, #0]
			a[1] = 0;
 8000d1e:	4b16      	ldr	r3, [pc, #88]	@ (8000d78 <SPITxRx_writeIO+0x14c>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	705a      	strb	r2, [r3, #1]
			HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 3);
 8000d24:	2303      	movs	r3, #3
 8000d26:	4a16      	ldr	r2, [pc, #88]	@ (8000d80 <SPITxRx_writeIO+0x154>)
 8000d28:	4911      	ldr	r1, [pc, #68]	@ (8000d70 <SPITxRx_writeIO+0x144>)
 8000d2a:	4816      	ldr	r0, [pc, #88]	@ (8000d84 <SPITxRx_writeIO+0x158>)
 8000d2c:	f003 fe14 	bl	8004958 <HAL_SPI_TransmitReceive_IT>
	}}
 8000d30:	e018      	b.n	8000d64 <SPITxRx_writeIO+0x138>
		else if(LedOff == 1){
 8000d32:	4b0e      	ldr	r3, [pc, #56]	@ (8000d6c <SPITxRx_writeIO+0x140>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d114      	bne.n	8000d64 <SPITxRx_writeIO+0x138>
			SPITx[0] = 0b01000000;
 8000d3a:	4b0d      	ldr	r3, [pc, #52]	@ (8000d70 <SPITxRx_writeIO+0x144>)
 8000d3c:	2240      	movs	r2, #64	@ 0x40
 8000d3e:	701a      	strb	r2, [r3, #0]
			SPITx[1] = 0x15;
 8000d40:	4b0b      	ldr	r3, [pc, #44]	@ (8000d70 <SPITxRx_writeIO+0x144>)
 8000d42:	2215      	movs	r2, #21
 8000d44:	705a      	strb	r2, [r3, #1]
			SPITx[2] = 0b11111111;
 8000d46:	4b0a      	ldr	r3, [pc, #40]	@ (8000d70 <SPITxRx_writeIO+0x144>)
 8000d48:	22ff      	movs	r2, #255	@ 0xff
 8000d4a:	709a      	strb	r2, [r3, #2]
			SPITx[3] = 0;
 8000d4c:	4b08      	ldr	r3, [pc, #32]	@ (8000d70 <SPITxRx_writeIO+0x144>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	70da      	strb	r2, [r3, #3]
			LedOff = 0;
 8000d52:	4b06      	ldr	r3, [pc, #24]	@ (8000d6c <SPITxRx_writeIO+0x140>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	701a      	strb	r2, [r3, #0]
			HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 4);
 8000d58:	2304      	movs	r3, #4
 8000d5a:	4a09      	ldr	r2, [pc, #36]	@ (8000d80 <SPITxRx_writeIO+0x154>)
 8000d5c:	4904      	ldr	r1, [pc, #16]	@ (8000d70 <SPITxRx_writeIO+0x144>)
 8000d5e:	4809      	ldr	r0, [pc, #36]	@ (8000d84 <SPITxRx_writeIO+0x158>)
 8000d60:	f003 fdfa 	bl	8004958 <HAL_SPI_TransmitReceive_IT>
	}}
 8000d64:	bf00      	nop
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	48000c00 	.word	0x48000c00
 8000d6c:	20000428 	.word	0x20000428
 8000d70:	200003f8 	.word	0x200003f8
 8000d74:	20000427 	.word	0x20000427
 8000d78:	2000041c 	.word	0x2000041c
 8000d7c:	20000404 	.word	0x20000404
 8000d80:	200003ec 	.word	0x200003ec
 8000d84:	200002bc 	.word	0x200002bc
 8000d88:	2000041b 	.word	0x2000041b
 8000d8c:	20000402 	.word	0x20000402

08000d90 <AnsCheck>:

uint8_t AnsCheck(){
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
	if(LightOrder[a[6]]!=PushOrder[a[6]]){
 8000d94:	4b1e      	ldr	r3, [pc, #120]	@ (8000e10 <AnsCheck+0x80>)
 8000d96:	799b      	ldrb	r3, [r3, #6]
 8000d98:	461a      	mov	r2, r3
 8000d9a:	4b1e      	ldr	r3, [pc, #120]	@ (8000e14 <AnsCheck+0x84>)
 8000d9c:	5c9a      	ldrb	r2, [r3, r2]
 8000d9e:	4b1c      	ldr	r3, [pc, #112]	@ (8000e10 <AnsCheck+0x80>)
 8000da0:	799b      	ldrb	r3, [r3, #6]
 8000da2:	4619      	mov	r1, r3
 8000da4:	4b1c      	ldr	r3, [pc, #112]	@ (8000e18 <AnsCheck+0x88>)
 8000da6:	5c5b      	ldrb	r3, [r3, r1]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	d009      	beq.n	8000dc0 <AnsCheck+0x30>
		AnsCorrect &= 0;
 8000dac:	4b1b      	ldr	r3, [pc, #108]	@ (8000e1c <AnsCheck+0x8c>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	701a      	strb	r2, [r3, #0]
		a[6] +=1;
 8000db2:	4b17      	ldr	r3, [pc, #92]	@ (8000e10 <AnsCheck+0x80>)
 8000db4:	799b      	ldrb	r3, [r3, #6]
 8000db6:	3301      	adds	r3, #1
 8000db8:	b2da      	uxtb	r2, r3
 8000dba:	4b15      	ldr	r3, [pc, #84]	@ (8000e10 <AnsCheck+0x80>)
 8000dbc:	719a      	strb	r2, [r3, #6]
 8000dbe:	e018      	b.n	8000df2 <AnsCheck+0x62>
	}else if (LightOrder[a[6]]== PushOrder[a[6]]){
 8000dc0:	4b13      	ldr	r3, [pc, #76]	@ (8000e10 <AnsCheck+0x80>)
 8000dc2:	799b      	ldrb	r3, [r3, #6]
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	4b13      	ldr	r3, [pc, #76]	@ (8000e14 <AnsCheck+0x84>)
 8000dc8:	5c9a      	ldrb	r2, [r3, r2]
 8000dca:	4b11      	ldr	r3, [pc, #68]	@ (8000e10 <AnsCheck+0x80>)
 8000dcc:	799b      	ldrb	r3, [r3, #6]
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4b11      	ldr	r3, [pc, #68]	@ (8000e18 <AnsCheck+0x88>)
 8000dd2:	5c5b      	ldrb	r3, [r3, r1]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	d10c      	bne.n	8000df2 <AnsCheck+0x62>
		AnsCorrect &= 1;
 8000dd8:	4b10      	ldr	r3, [pc, #64]	@ (8000e1c <AnsCheck+0x8c>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	f003 0301 	and.w	r3, r3, #1
 8000de0:	b2da      	uxtb	r2, r3
 8000de2:	4b0e      	ldr	r3, [pc, #56]	@ (8000e1c <AnsCheck+0x8c>)
 8000de4:	701a      	strb	r2, [r3, #0]
		a[6] +=1;
 8000de6:	4b0a      	ldr	r3, [pc, #40]	@ (8000e10 <AnsCheck+0x80>)
 8000de8:	799b      	ldrb	r3, [r3, #6]
 8000dea:	3301      	adds	r3, #1
 8000dec:	b2da      	uxtb	r2, r3
 8000dee:	4b08      	ldr	r3, [pc, #32]	@ (8000e10 <AnsCheck+0x80>)
 8000df0:	719a      	strb	r2, [r3, #6]
	}

	if(a[6] == 9){
 8000df2:	4b07      	ldr	r3, [pc, #28]	@ (8000e10 <AnsCheck+0x80>)
 8000df4:	799b      	ldrb	r3, [r3, #6]
 8000df6:	2b09      	cmp	r3, #9
 8000df8:	d105      	bne.n	8000e06 <AnsCheck+0x76>
		a[6] = 0;
 8000dfa:	4b05      	ldr	r3, [pc, #20]	@ (8000e10 <AnsCheck+0x80>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	719a      	strb	r2, [r3, #6]
		return AnsCorrect;
 8000e00:	4b06      	ldr	r3, [pc, #24]	@ (8000e1c <AnsCheck+0x8c>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	e7ff      	b.n	8000e06 <AnsCheck+0x76>
	}
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr
 8000e10:	2000041c 	.word	0x2000041c
 8000e14:	20000404 	.word	0x20000404
 8000e18:	20000410 	.word	0x20000410
 8000e1c:	2000041a 	.word	0x2000041a

08000e20 <SPITxRx_Setup>:


//void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
//	if()
//}
void SPITxRx_Setup(){
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
	//CS pulse
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0); // CS Select
 8000e24:	2200      	movs	r2, #0
 8000e26:	2104      	movs	r1, #4
 8000e28:	4807      	ldr	r0, [pc, #28]	@ (8000e48 <SPITxRx_Setup+0x28>)
 8000e2a:	f002 fc7d 	bl	8003728 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000e2e:	2001      	movs	r0, #1
 8000e30:	f000 fb3a 	bl	80014a8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1); // CS deSelect
 8000e34:	2201      	movs	r2, #1
 8000e36:	2104      	movs	r1, #4
 8000e38:	4803      	ldr	r0, [pc, #12]	@ (8000e48 <SPITxRx_Setup+0x28>)
 8000e3a:	f002 fc75 	bl	8003728 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000e3e:	2001      	movs	r0, #1
 8000e40:	f000 fb32 	bl	80014a8 <HAL_Delay>
}
 8000e44:	bf00      	nop
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	48000c00 	.word	0x48000c00

08000e4c <IODIRB_Init>:

void IODIRB_Init(){
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_2)){
 8000e50:	2104      	movs	r1, #4
 8000e52:	480f      	ldr	r0, [pc, #60]	@ (8000e90 <IODIRB_Init+0x44>)
 8000e54:	f002 fc50 	bl	80036f8 <HAL_GPIO_ReadPin>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d016      	beq.n	8000e8c <IODIRB_Init+0x40>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0); // CS Select
 8000e5e:	2200      	movs	r2, #0
 8000e60:	2104      	movs	r1, #4
 8000e62:	480b      	ldr	r0, [pc, #44]	@ (8000e90 <IODIRB_Init+0x44>)
 8000e64:	f002 fc60 	bl	8003728 <HAL_GPIO_WritePin>
		SPITx[0] = 0b01000000;
 8000e68:	4b0a      	ldr	r3, [pc, #40]	@ (8000e94 <IODIRB_Init+0x48>)
 8000e6a:	2240      	movs	r2, #64	@ 0x40
 8000e6c:	701a      	strb	r2, [r3, #0]
		SPITx[1] = 0x01;
 8000e6e:	4b09      	ldr	r3, [pc, #36]	@ (8000e94 <IODIRB_Init+0x48>)
 8000e70:	2201      	movs	r2, #1
 8000e72:	705a      	strb	r2, [r3, #1]
		SPITx[2] = 0;
 8000e74:	4b07      	ldr	r3, [pc, #28]	@ (8000e94 <IODIRB_Init+0x48>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	709a      	strb	r2, [r3, #2]
		SPITx[3] = 0;
 8000e7a:	4b06      	ldr	r3, [pc, #24]	@ (8000e94 <IODIRB_Init+0x48>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	70da      	strb	r2, [r3, #3]
		HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 4);
 8000e80:	2304      	movs	r3, #4
 8000e82:	4a05      	ldr	r2, [pc, #20]	@ (8000e98 <IODIRB_Init+0x4c>)
 8000e84:	4903      	ldr	r1, [pc, #12]	@ (8000e94 <IODIRB_Init+0x48>)
 8000e86:	4805      	ldr	r0, [pc, #20]	@ (8000e9c <IODIRB_Init+0x50>)
 8000e88:	f003 fd66 	bl	8004958 <HAL_SPI_TransmitReceive_IT>
}}
 8000e8c:	bf00      	nop
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	48000c00 	.word	0x48000c00
 8000e94:	200003f8 	.word	0x200003f8
 8000e98:	200003ec 	.word	0x200003ec
 8000e9c:	200002bc 	.word	0x200002bc

08000ea0 <IODIRA_Init>:

void IODIRA_Init(){
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_2)){
 8000ea4:	2104      	movs	r1, #4
 8000ea6:	480f      	ldr	r0, [pc, #60]	@ (8000ee4 <IODIRA_Init+0x44>)
 8000ea8:	f002 fc26 	bl	80036f8 <HAL_GPIO_ReadPin>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d016      	beq.n	8000ee0 <IODIRA_Init+0x40>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0); // CS Select
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	2104      	movs	r1, #4
 8000eb6:	480b      	ldr	r0, [pc, #44]	@ (8000ee4 <IODIRA_Init+0x44>)
 8000eb8:	f002 fc36 	bl	8003728 <HAL_GPIO_WritePin>
		SPITx[0] = 0b01000001;
 8000ebc:	4b0a      	ldr	r3, [pc, #40]	@ (8000ee8 <IODIRA_Init+0x48>)
 8000ebe:	2241      	movs	r2, #65	@ 0x41
 8000ec0:	701a      	strb	r2, [r3, #0]
		SPITx[1] = 0x00;
 8000ec2:	4b09      	ldr	r3, [pc, #36]	@ (8000ee8 <IODIRA_Init+0x48>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	705a      	strb	r2, [r3, #1]
		SPITx[2] = 0;
 8000ec8:	4b07      	ldr	r3, [pc, #28]	@ (8000ee8 <IODIRA_Init+0x48>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	709a      	strb	r2, [r3, #2]
		SPITx[3] = 0;
 8000ece:	4b06      	ldr	r3, [pc, #24]	@ (8000ee8 <IODIRA_Init+0x48>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	70da      	strb	r2, [r3, #3]
		HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 4);
 8000ed4:	2304      	movs	r3, #4
 8000ed6:	4a05      	ldr	r2, [pc, #20]	@ (8000eec <IODIRA_Init+0x4c>)
 8000ed8:	4903      	ldr	r1, [pc, #12]	@ (8000ee8 <IODIRA_Init+0x48>)
 8000eda:	4805      	ldr	r0, [pc, #20]	@ (8000ef0 <IODIRA_Init+0x50>)
 8000edc:	f003 fd3c 	bl	8004958 <HAL_SPI_TransmitReceive_IT>
}}
 8000ee0:	bf00      	nop
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	48000c00 	.word	0x48000c00
 8000ee8:	200003f8 	.word	0x200003f8
 8000eec:	200003ec 	.word	0x200003ec
 8000ef0:	200002bc 	.word	0x200002bc

08000ef4 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1); //CS dnSelect
 8000efc:	2201      	movs	r2, #1
 8000efe:	2104      	movs	r1, #4
 8000f00:	4803      	ldr	r0, [pc, #12]	@ (8000f10 <HAL_SPI_TxRxCpltCallback+0x1c>)
 8000f02:	f002 fc11 	bl	8003728 <HAL_GPIO_WritePin>
}
 8000f06:	bf00      	nop
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	48000c00 	.word	0x48000c00

08000f14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f18:	b672      	cpsid	i
}
 8000f1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f1c:	bf00      	nop
 8000f1e:	e7fd      	b.n	8000f1c <Error_Handler+0x8>

08000f20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f26:	4b0f      	ldr	r3, [pc, #60]	@ (8000f64 <HAL_MspInit+0x44>)
 8000f28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f2a:	4a0e      	ldr	r2, [pc, #56]	@ (8000f64 <HAL_MspInit+0x44>)
 8000f2c:	f043 0301 	orr.w	r3, r3, #1
 8000f30:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f32:	4b0c      	ldr	r3, [pc, #48]	@ (8000f64 <HAL_MspInit+0x44>)
 8000f34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f36:	f003 0301 	and.w	r3, r3, #1
 8000f3a:	607b      	str	r3, [r7, #4]
 8000f3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f3e:	4b09      	ldr	r3, [pc, #36]	@ (8000f64 <HAL_MspInit+0x44>)
 8000f40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f42:	4a08      	ldr	r2, [pc, #32]	@ (8000f64 <HAL_MspInit+0x44>)
 8000f44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f48:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f4a:	4b06      	ldr	r3, [pc, #24]	@ (8000f64 <HAL_MspInit+0x44>)
 8000f4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f52:	603b      	str	r3, [r7, #0]
 8000f54:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000f56:	f002 fcc7 	bl	80038e8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40021000 	.word	0x40021000

08000f68 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b09e      	sub	sp, #120	@ 0x78
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f70:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
 8000f7c:	60da      	str	r2, [r3, #12]
 8000f7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f80:	f107 0310 	add.w	r3, r7, #16
 8000f84:	2254      	movs	r2, #84	@ 0x54
 8000f86:	2100      	movs	r1, #0
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f005 fccf 	bl	800692c <memset>
  if(hadc->Instance==ADC1)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000f96:	d167      	bne.n	8001068 <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000f98:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000f9c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000f9e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000fa2:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fa4:	f107 0310 	add.w	r3, r7, #16
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f003 f9db 	bl	8004364 <HAL_RCCEx_PeriphCLKConfig>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000fb4:	f7ff ffae 	bl	8000f14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000fb8:	4b2d      	ldr	r3, [pc, #180]	@ (8001070 <HAL_ADC_MspInit+0x108>)
 8000fba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fbc:	4a2c      	ldr	r2, [pc, #176]	@ (8001070 <HAL_ADC_MspInit+0x108>)
 8000fbe:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000fc2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fc4:	4b2a      	ldr	r3, [pc, #168]	@ (8001070 <HAL_ADC_MspInit+0x108>)
 8000fc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fc8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000fcc:	60fb      	str	r3, [r7, #12]
 8000fce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd0:	4b27      	ldr	r3, [pc, #156]	@ (8001070 <HAL_ADC_MspInit+0x108>)
 8000fd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fd4:	4a26      	ldr	r2, [pc, #152]	@ (8001070 <HAL_ADC_MspInit+0x108>)
 8000fd6:	f043 0301 	orr.w	r3, r3, #1
 8000fda:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fdc:	4b24      	ldr	r3, [pc, #144]	@ (8001070 <HAL_ADC_MspInit+0x108>)
 8000fde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fe0:	f003 0301 	and.w	r3, r3, #1
 8000fe4:	60bb      	str	r3, [r7, #8]
 8000fe6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fec:	2303      	movs	r3, #3
 8000fee:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ffe:	f002 f9f9 	bl	80033f4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001002:	4b1c      	ldr	r3, [pc, #112]	@ (8001074 <HAL_ADC_MspInit+0x10c>)
 8001004:	4a1c      	ldr	r2, [pc, #112]	@ (8001078 <HAL_ADC_MspInit+0x110>)
 8001006:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001008:	4b1a      	ldr	r3, [pc, #104]	@ (8001074 <HAL_ADC_MspInit+0x10c>)
 800100a:	2205      	movs	r2, #5
 800100c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800100e:	4b19      	ldr	r3, [pc, #100]	@ (8001074 <HAL_ADC_MspInit+0x10c>)
 8001010:	2200      	movs	r2, #0
 8001012:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001014:	4b17      	ldr	r3, [pc, #92]	@ (8001074 <HAL_ADC_MspInit+0x10c>)
 8001016:	2200      	movs	r2, #0
 8001018:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800101a:	4b16      	ldr	r3, [pc, #88]	@ (8001074 <HAL_ADC_MspInit+0x10c>)
 800101c:	2280      	movs	r2, #128	@ 0x80
 800101e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001020:	4b14      	ldr	r3, [pc, #80]	@ (8001074 <HAL_ADC_MspInit+0x10c>)
 8001022:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001026:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001028:	4b12      	ldr	r3, [pc, #72]	@ (8001074 <HAL_ADC_MspInit+0x10c>)
 800102a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800102e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001030:	4b10      	ldr	r3, [pc, #64]	@ (8001074 <HAL_ADC_MspInit+0x10c>)
 8001032:	2220      	movs	r2, #32
 8001034:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001036:	4b0f      	ldr	r3, [pc, #60]	@ (8001074 <HAL_ADC_MspInit+0x10c>)
 8001038:	2200      	movs	r2, #0
 800103a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800103c:	480d      	ldr	r0, [pc, #52]	@ (8001074 <HAL_ADC_MspInit+0x10c>)
 800103e:	f001 ffb9 	bl	8002fb4 <HAL_DMA_Init>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8001048:	f7ff ff64 	bl	8000f14 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	4a09      	ldr	r2, [pc, #36]	@ (8001074 <HAL_ADC_MspInit+0x10c>)
 8001050:	655a      	str	r2, [r3, #84]	@ 0x54
 8001052:	4a08      	ldr	r2, [pc, #32]	@ (8001074 <HAL_ADC_MspInit+0x10c>)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001058:	2200      	movs	r2, #0
 800105a:	2100      	movs	r1, #0
 800105c:	2012      	movs	r0, #18
 800105e:	f001 ff74 	bl	8002f4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001062:	2012      	movs	r0, #18
 8001064:	f001 ff8b 	bl	8002f7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001068:	bf00      	nop
 800106a:	3778      	adds	r7, #120	@ 0x78
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	40021000 	.word	0x40021000
 8001074:	200000c4 	.word	0x200000c4
 8001078:	40020008 	.word	0x40020008

0800107c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b0a0      	sub	sp, #128	@ 0x80
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001084:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]
 8001092:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001094:	f107 0318 	add.w	r3, r7, #24
 8001098:	2254      	movs	r2, #84	@ 0x54
 800109a:	2100      	movs	r1, #0
 800109c:	4618      	mov	r0, r3
 800109e:	f005 fc45 	bl	800692c <memset>
  if(huart->Instance==LPUART1)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a3d      	ldr	r2, [pc, #244]	@ (800119c <HAL_UART_MspInit+0x120>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d137      	bne.n	800111c <HAL_UART_MspInit+0xa0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80010ac:	2320      	movs	r3, #32
 80010ae:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80010b0:	2300      	movs	r3, #0
 80010b2:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010b4:	f107 0318 	add.w	r3, r7, #24
 80010b8:	4618      	mov	r0, r3
 80010ba:	f003 f953 	bl	8004364 <HAL_RCCEx_PeriphCLKConfig>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80010c4:	f7ff ff26 	bl	8000f14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80010c8:	4b35      	ldr	r3, [pc, #212]	@ (80011a0 <HAL_UART_MspInit+0x124>)
 80010ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80010cc:	4a34      	ldr	r2, [pc, #208]	@ (80011a0 <HAL_UART_MspInit+0x124>)
 80010ce:	f043 0301 	orr.w	r3, r3, #1
 80010d2:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80010d4:	4b32      	ldr	r3, [pc, #200]	@ (80011a0 <HAL_UART_MspInit+0x124>)
 80010d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80010d8:	f003 0301 	and.w	r3, r3, #1
 80010dc:	617b      	str	r3, [r7, #20]
 80010de:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e0:	4b2f      	ldr	r3, [pc, #188]	@ (80011a0 <HAL_UART_MspInit+0x124>)
 80010e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010e4:	4a2e      	ldr	r2, [pc, #184]	@ (80011a0 <HAL_UART_MspInit+0x124>)
 80010e6:	f043 0301 	orr.w	r3, r3, #1
 80010ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010ec:	4b2c      	ldr	r3, [pc, #176]	@ (80011a0 <HAL_UART_MspInit+0x124>)
 80010ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010f0:	f003 0301 	and.w	r3, r3, #1
 80010f4:	613b      	str	r3, [r7, #16]
 80010f6:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80010f8:	230c      	movs	r3, #12
 80010fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fc:	2302      	movs	r3, #2
 80010fe:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001100:	2300      	movs	r3, #0
 8001102:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001104:	2300      	movs	r3, #0
 8001106:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001108:	230c      	movs	r3, #12
 800110a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800110c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001110:	4619      	mov	r1, r3
 8001112:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001116:	f002 f96d 	bl	80033f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800111a:	e03a      	b.n	8001192 <HAL_UART_MspInit+0x116>
  else if(huart->Instance==USART1)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a20      	ldr	r2, [pc, #128]	@ (80011a4 <HAL_UART_MspInit+0x128>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d135      	bne.n	8001192 <HAL_UART_MspInit+0x116>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001126:	2301      	movs	r3, #1
 8001128:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800112a:	2300      	movs	r3, #0
 800112c:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800112e:	f107 0318 	add.w	r3, r7, #24
 8001132:	4618      	mov	r0, r3
 8001134:	f003 f916 	bl	8004364 <HAL_RCCEx_PeriphCLKConfig>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <HAL_UART_MspInit+0xc6>
      Error_Handler();
 800113e:	f7ff fee9 	bl	8000f14 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001142:	4b17      	ldr	r3, [pc, #92]	@ (80011a0 <HAL_UART_MspInit+0x124>)
 8001144:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001146:	4a16      	ldr	r2, [pc, #88]	@ (80011a0 <HAL_UART_MspInit+0x124>)
 8001148:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800114c:	6613      	str	r3, [r2, #96]	@ 0x60
 800114e:	4b14      	ldr	r3, [pc, #80]	@ (80011a0 <HAL_UART_MspInit+0x124>)
 8001150:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001152:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001156:	60fb      	str	r3, [r7, #12]
 8001158:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800115a:	4b11      	ldr	r3, [pc, #68]	@ (80011a0 <HAL_UART_MspInit+0x124>)
 800115c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800115e:	4a10      	ldr	r2, [pc, #64]	@ (80011a0 <HAL_UART_MspInit+0x124>)
 8001160:	f043 0304 	orr.w	r3, r3, #4
 8001164:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001166:	4b0e      	ldr	r3, [pc, #56]	@ (80011a0 <HAL_UART_MspInit+0x124>)
 8001168:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800116a:	f003 0304 	and.w	r3, r3, #4
 800116e:	60bb      	str	r3, [r7, #8]
 8001170:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001172:	2330      	movs	r3, #48	@ 0x30
 8001174:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001176:	2302      	movs	r3, #2
 8001178:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117e:	2300      	movs	r3, #0
 8001180:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001182:	2307      	movs	r3, #7
 8001184:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001186:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800118a:	4619      	mov	r1, r3
 800118c:	4806      	ldr	r0, [pc, #24]	@ (80011a8 <HAL_UART_MspInit+0x12c>)
 800118e:	f002 f931 	bl	80033f4 <HAL_GPIO_Init>
}
 8001192:	bf00      	nop
 8001194:	3780      	adds	r7, #128	@ 0x80
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40008000 	.word	0x40008000
 80011a0:	40021000 	.word	0x40021000
 80011a4:	40013800 	.word	0x40013800
 80011a8:	48000800 	.word	0x48000800

080011ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b08a      	sub	sp, #40	@ 0x28
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b4:	f107 0314 	add.w	r3, r7, #20
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	60da      	str	r2, [r3, #12]
 80011c2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a1b      	ldr	r2, [pc, #108]	@ (8001238 <HAL_SPI_MspInit+0x8c>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d130      	bne.n	8001230 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80011ce:	4b1b      	ldr	r3, [pc, #108]	@ (800123c <HAL_SPI_MspInit+0x90>)
 80011d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011d2:	4a1a      	ldr	r2, [pc, #104]	@ (800123c <HAL_SPI_MspInit+0x90>)
 80011d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80011d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80011da:	4b18      	ldr	r3, [pc, #96]	@ (800123c <HAL_SPI_MspInit+0x90>)
 80011dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80011e2:	613b      	str	r3, [r7, #16]
 80011e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011e6:	4b15      	ldr	r3, [pc, #84]	@ (800123c <HAL_SPI_MspInit+0x90>)
 80011e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ea:	4a14      	ldr	r2, [pc, #80]	@ (800123c <HAL_SPI_MspInit+0x90>)
 80011ec:	f043 0304 	orr.w	r3, r3, #4
 80011f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011f2:	4b12      	ldr	r3, [pc, #72]	@ (800123c <HAL_SPI_MspInit+0x90>)
 80011f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011f6:	f003 0304 	and.w	r3, r3, #4
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80011fe:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001202:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001204:	2302      	movs	r3, #2
 8001206:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120c:	2300      	movs	r3, #0
 800120e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001210:	2306      	movs	r3, #6
 8001212:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001214:	f107 0314 	add.w	r3, r7, #20
 8001218:	4619      	mov	r1, r3
 800121a:	4809      	ldr	r0, [pc, #36]	@ (8001240 <HAL_SPI_MspInit+0x94>)
 800121c:	f002 f8ea 	bl	80033f4 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8001220:	2200      	movs	r2, #0
 8001222:	2100      	movs	r1, #0
 8001224:	2033      	movs	r0, #51	@ 0x33
 8001226:	f001 fe90 	bl	8002f4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 800122a:	2033      	movs	r0, #51	@ 0x33
 800122c:	f001 fea7 	bl	8002f7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001230:	bf00      	nop
 8001232:	3728      	adds	r7, #40	@ 0x28
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	40003c00 	.word	0x40003c00
 800123c:	40021000 	.word	0x40021000
 8001240:	48000800 	.word	0x48000800

08001244 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a0d      	ldr	r2, [pc, #52]	@ (8001288 <HAL_TIM_Base_MspInit+0x44>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d113      	bne.n	800127e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001256:	4b0d      	ldr	r3, [pc, #52]	@ (800128c <HAL_TIM_Base_MspInit+0x48>)
 8001258:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800125a:	4a0c      	ldr	r2, [pc, #48]	@ (800128c <HAL_TIM_Base_MspInit+0x48>)
 800125c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001260:	6613      	str	r3, [r2, #96]	@ 0x60
 8001262:	4b0a      	ldr	r3, [pc, #40]	@ (800128c <HAL_TIM_Base_MspInit+0x48>)
 8001264:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001266:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800126e:	2200      	movs	r2, #0
 8001270:	2100      	movs	r1, #0
 8001272:	2019      	movs	r0, #25
 8001274:	f001 fe69 	bl	8002f4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001278:	2019      	movs	r0, #25
 800127a:	f001 fe80 	bl	8002f7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800127e:	bf00      	nop
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	40014400 	.word	0x40014400
 800128c:	40021000 	.word	0x40021000

08001290 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001294:	bf00      	nop
 8001296:	e7fd      	b.n	8001294 <NMI_Handler+0x4>

08001298 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800129c:	bf00      	nop
 800129e:	e7fd      	b.n	800129c <HardFault_Handler+0x4>

080012a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012a4:	bf00      	nop
 80012a6:	e7fd      	b.n	80012a4 <MemManage_Handler+0x4>

080012a8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012ac:	bf00      	nop
 80012ae:	e7fd      	b.n	80012ac <BusFault_Handler+0x4>

080012b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012b4:	bf00      	nop
 80012b6:	e7fd      	b.n	80012b4 <UsageFault_Handler+0x4>

080012b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012bc:	bf00      	nop
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr

080012c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012c6:	b480      	push	{r7}
 80012c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012ca:	bf00      	nop
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr

080012d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012d8:	bf00      	nop
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr

080012e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012e2:	b580      	push	{r7, lr}
 80012e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012e6:	f000 f8c1 	bl	800146c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}
	...

080012f0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80012f4:	4802      	ldr	r0, [pc, #8]	@ (8001300 <DMA1_Channel1_IRQHandler+0x10>)
 80012f6:	f001 ff6c 	bl	80031d2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	200000c4 	.word	0x200000c4

08001304 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001308:	4802      	ldr	r0, [pc, #8]	@ (8001314 <ADC1_2_IRQHandler+0x10>)
 800130a:	f000 fd01 	bl	8001d10 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	2000002c 	.word	0x2000002c

08001318 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 800131c:	4802      	ldr	r0, [pc, #8]	@ (8001328 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800131e:	f004 f863 	bl	80053e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001322:	bf00      	nop
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	20000320 	.word	0x20000320

0800132c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001330:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001334:	f002 fa10 	bl	8003758 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001338:	bf00      	nop
 800133a:	bd80      	pop	{r7, pc}

0800133c <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8001340:	4802      	ldr	r0, [pc, #8]	@ (800134c <SPI3_IRQHandler+0x10>)
 8001342:	f003 fbb7 	bl	8004ab4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8001346:	bf00      	nop
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	200002bc 	.word	0x200002bc

08001350 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001354:	4b06      	ldr	r3, [pc, #24]	@ (8001370 <SystemInit+0x20>)
 8001356:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800135a:	4a05      	ldr	r2, [pc, #20]	@ (8001370 <SystemInit+0x20>)
 800135c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001360:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001364:	bf00      	nop
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	e000ed00 	.word	0xe000ed00

08001374 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001374:	480d      	ldr	r0, [pc, #52]	@ (80013ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001376:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001378:	f7ff ffea 	bl	8001350 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800137c:	480c      	ldr	r0, [pc, #48]	@ (80013b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800137e:	490d      	ldr	r1, [pc, #52]	@ (80013b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001380:	4a0d      	ldr	r2, [pc, #52]	@ (80013b8 <LoopForever+0xe>)
  movs r3, #0
 8001382:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001384:	e002      	b.n	800138c <LoopCopyDataInit>

08001386 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001386:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001388:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800138a:	3304      	adds	r3, #4

0800138c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800138c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800138e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001390:	d3f9      	bcc.n	8001386 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001392:	4a0a      	ldr	r2, [pc, #40]	@ (80013bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001394:	4c0a      	ldr	r4, [pc, #40]	@ (80013c0 <LoopForever+0x16>)
  movs r3, #0
 8001396:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001398:	e001      	b.n	800139e <LoopFillZerobss>

0800139a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800139a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800139c:	3204      	adds	r2, #4

0800139e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800139e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013a0:	d3fb      	bcc.n	800139a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013a2:	f005 facb 	bl	800693c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013a6:	f7ff f8af 	bl	8000508 <main>

080013aa <LoopForever>:

LoopForever:
    b LoopForever
 80013aa:	e7fe      	b.n	80013aa <LoopForever>
  ldr   r0, =_estack
 80013ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013b4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80013b8:	080069ec 	.word	0x080069ec
  ldr r2, =_sbss
 80013bc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80013c0:	2000043c 	.word	0x2000043c

080013c4 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013c4:	e7fe      	b.n	80013c4 <ADC3_IRQHandler>

080013c6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b082      	sub	sp, #8
 80013ca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013cc:	2300      	movs	r3, #0
 80013ce:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013d0:	2003      	movs	r0, #3
 80013d2:	f001 fdaf 	bl	8002f34 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013d6:	2000      	movs	r0, #0
 80013d8:	f000 f80e 	bl	80013f8 <HAL_InitTick>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d002      	beq.n	80013e8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	71fb      	strb	r3, [r7, #7]
 80013e6:	e001      	b.n	80013ec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013e8:	f7ff fd9a 	bl	8000f20 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013ec:	79fb      	ldrb	r3, [r7, #7]

}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
	...

080013f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001400:	2300      	movs	r3, #0
 8001402:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001404:	4b16      	ldr	r3, [pc, #88]	@ (8001460 <HAL_InitTick+0x68>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d022      	beq.n	8001452 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800140c:	4b15      	ldr	r3, [pc, #84]	@ (8001464 <HAL_InitTick+0x6c>)
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	4b13      	ldr	r3, [pc, #76]	@ (8001460 <HAL_InitTick+0x68>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001418:	fbb1 f3f3 	udiv	r3, r1, r3
 800141c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001420:	4618      	mov	r0, r3
 8001422:	f001 fdba 	bl	8002f9a <HAL_SYSTICK_Config>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d10f      	bne.n	800144c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2b0f      	cmp	r3, #15
 8001430:	d809      	bhi.n	8001446 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001432:	2200      	movs	r2, #0
 8001434:	6879      	ldr	r1, [r7, #4]
 8001436:	f04f 30ff 	mov.w	r0, #4294967295
 800143a:	f001 fd86 	bl	8002f4a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800143e:	4a0a      	ldr	r2, [pc, #40]	@ (8001468 <HAL_InitTick+0x70>)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6013      	str	r3, [r2, #0]
 8001444:	e007      	b.n	8001456 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	73fb      	strb	r3, [r7, #15]
 800144a:	e004      	b.n	8001456 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	73fb      	strb	r3, [r7, #15]
 8001450:	e001      	b.n	8001456 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001456:	7bfb      	ldrb	r3, [r7, #15]
}
 8001458:	4618      	mov	r0, r3
 800145a:	3710      	adds	r7, #16
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	20000008 	.word	0x20000008
 8001464:	20000000 	.word	0x20000000
 8001468:	20000004 	.word	0x20000004

0800146c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001470:	4b05      	ldr	r3, [pc, #20]	@ (8001488 <HAL_IncTick+0x1c>)
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	4b05      	ldr	r3, [pc, #20]	@ (800148c <HAL_IncTick+0x20>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4413      	add	r3, r2
 800147a:	4a03      	ldr	r2, [pc, #12]	@ (8001488 <HAL_IncTick+0x1c>)
 800147c:	6013      	str	r3, [r2, #0]
}
 800147e:	bf00      	nop
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	20000438 	.word	0x20000438
 800148c:	20000008 	.word	0x20000008

08001490 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  return uwTick;
 8001494:	4b03      	ldr	r3, [pc, #12]	@ (80014a4 <HAL_GetTick+0x14>)
 8001496:	681b      	ldr	r3, [r3, #0]
}
 8001498:	4618      	mov	r0, r3
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	20000438 	.word	0x20000438

080014a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014b0:	f7ff ffee 	bl	8001490 <HAL_GetTick>
 80014b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014c0:	d004      	beq.n	80014cc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80014c2:	4b09      	ldr	r3, [pc, #36]	@ (80014e8 <HAL_Delay+0x40>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	68fa      	ldr	r2, [r7, #12]
 80014c8:	4413      	add	r3, r2
 80014ca:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014cc:	bf00      	nop
 80014ce:	f7ff ffdf 	bl	8001490 <HAL_GetTick>
 80014d2:	4602      	mov	r2, r0
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	68fa      	ldr	r2, [r7, #12]
 80014da:	429a      	cmp	r2, r3
 80014dc:	d8f7      	bhi.n	80014ce <HAL_Delay+0x26>
  {
  }
}
 80014de:	bf00      	nop
 80014e0:	bf00      	nop
 80014e2:	3710      	adds	r7, #16
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	20000008 	.word	0x20000008

080014ec <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	431a      	orrs	r2, r3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	609a      	str	r2, [r3, #8]
}
 8001506:	bf00      	nop
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr

08001512 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001512:	b480      	push	{r7}
 8001514:	b083      	sub	sp, #12
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
 800151a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	431a      	orrs	r2, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	609a      	str	r2, [r3, #8]
}
 800152c:	bf00      	nop
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001548:	4618      	mov	r0, r3
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr

08001554 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001554:	b480      	push	{r7}
 8001556:	b087      	sub	sp, #28
 8001558:	af00      	add	r7, sp, #0
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	607a      	str	r2, [r7, #4]
 8001560:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	3360      	adds	r3, #96	@ 0x60
 8001566:	461a      	mov	r2, r3
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	4413      	add	r3, r2
 800156e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	4b08      	ldr	r3, [pc, #32]	@ (8001598 <LL_ADC_SetOffset+0x44>)
 8001576:	4013      	ands	r3, r2
 8001578:	687a      	ldr	r2, [r7, #4]
 800157a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800157e:	683a      	ldr	r2, [r7, #0]
 8001580:	430a      	orrs	r2, r1
 8001582:	4313      	orrs	r3, r2
 8001584:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800158c:	bf00      	nop
 800158e:	371c      	adds	r7, #28
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	03fff000 	.word	0x03fff000

0800159c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800159c:	b480      	push	{r7}
 800159e:	b085      	sub	sp, #20
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	3360      	adds	r3, #96	@ 0x60
 80015aa:	461a      	mov	r2, r3
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	4413      	add	r3, r2
 80015b2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3714      	adds	r7, #20
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr

080015c8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b087      	sub	sp, #28
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	60f8      	str	r0, [r7, #12]
 80015d0:	60b9      	str	r1, [r7, #8]
 80015d2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	3360      	adds	r3, #96	@ 0x60
 80015d8:	461a      	mov	r2, r3
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	4413      	add	r3, r2
 80015e0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	431a      	orrs	r2, r3
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80015f2:	bf00      	nop
 80015f4:	371c      	adds	r7, #28
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr

080015fe <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80015fe:	b480      	push	{r7}
 8001600:	b087      	sub	sp, #28
 8001602:	af00      	add	r7, sp, #0
 8001604:	60f8      	str	r0, [r7, #12]
 8001606:	60b9      	str	r1, [r7, #8]
 8001608:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	3360      	adds	r3, #96	@ 0x60
 800160e:	461a      	mov	r2, r3
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	4413      	add	r3, r2
 8001616:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	431a      	orrs	r2, r3
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001628:	bf00      	nop
 800162a:	371c      	adds	r7, #28
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001634:	b480      	push	{r7}
 8001636:	b087      	sub	sp, #28
 8001638:	af00      	add	r7, sp, #0
 800163a:	60f8      	str	r0, [r7, #12]
 800163c:	60b9      	str	r1, [r7, #8]
 800163e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	3360      	adds	r3, #96	@ 0x60
 8001644:	461a      	mov	r2, r3
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	4413      	add	r3, r2
 800164c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	431a      	orrs	r2, r3
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800165e:	bf00      	nop
 8001660:	371c      	adds	r7, #28
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr

0800166a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800166a:	b480      	push	{r7}
 800166c:	b083      	sub	sp, #12
 800166e:	af00      	add	r7, sp, #0
 8001670:	6078      	str	r0, [r7, #4]
 8001672:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	695b      	ldr	r3, [r3, #20]
 8001678:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	431a      	orrs	r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	615a      	str	r2, [r3, #20]
}
 8001684:	bf00      	nop
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d101      	bne.n	80016a8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80016a4:	2301      	movs	r3, #1
 80016a6:	e000      	b.n	80016aa <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80016a8:	2300      	movs	r3, #0
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	370c      	adds	r7, #12
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr

080016b6 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80016b6:	b480      	push	{r7}
 80016b8:	b087      	sub	sp, #28
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	60f8      	str	r0, [r7, #12]
 80016be:	60b9      	str	r1, [r7, #8]
 80016c0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	3330      	adds	r3, #48	@ 0x30
 80016c6:	461a      	mov	r2, r3
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	0a1b      	lsrs	r3, r3, #8
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	f003 030c 	and.w	r3, r3, #12
 80016d2:	4413      	add	r3, r2
 80016d4:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	f003 031f 	and.w	r3, r3, #31
 80016e0:	211f      	movs	r1, #31
 80016e2:	fa01 f303 	lsl.w	r3, r1, r3
 80016e6:	43db      	mvns	r3, r3
 80016e8:	401a      	ands	r2, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	0e9b      	lsrs	r3, r3, #26
 80016ee:	f003 011f 	and.w	r1, r3, #31
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	f003 031f 	and.w	r3, r3, #31
 80016f8:	fa01 f303 	lsl.w	r3, r1, r3
 80016fc:	431a      	orrs	r2, r3
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001702:	bf00      	nop
 8001704:	371c      	adds	r7, #28
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr

0800170e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800170e:	b480      	push	{r7}
 8001710:	b083      	sub	sp, #12
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800171a:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800171e:	2b00      	cmp	r3, #0
 8001720:	d101      	bne.n	8001726 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001722:	2301      	movs	r3, #1
 8001724:	e000      	b.n	8001728 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001726:	2300      	movs	r3, #0
}
 8001728:	4618      	mov	r0, r3
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001734:	b480      	push	{r7}
 8001736:	b087      	sub	sp, #28
 8001738:	af00      	add	r7, sp, #0
 800173a:	60f8      	str	r0, [r7, #12]
 800173c:	60b9      	str	r1, [r7, #8]
 800173e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	3314      	adds	r3, #20
 8001744:	461a      	mov	r2, r3
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	0e5b      	lsrs	r3, r3, #25
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	f003 0304 	and.w	r3, r3, #4
 8001750:	4413      	add	r3, r2
 8001752:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	0d1b      	lsrs	r3, r3, #20
 800175c:	f003 031f 	and.w	r3, r3, #31
 8001760:	2107      	movs	r1, #7
 8001762:	fa01 f303 	lsl.w	r3, r1, r3
 8001766:	43db      	mvns	r3, r3
 8001768:	401a      	ands	r2, r3
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	0d1b      	lsrs	r3, r3, #20
 800176e:	f003 031f 	and.w	r3, r3, #31
 8001772:	6879      	ldr	r1, [r7, #4]
 8001774:	fa01 f303 	lsl.w	r3, r1, r3
 8001778:	431a      	orrs	r2, r3
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800177e:	bf00      	nop
 8001780:	371c      	adds	r7, #28
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
	...

0800178c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800178c:	b480      	push	{r7}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
 8001792:	60f8      	str	r0, [r7, #12]
 8001794:	60b9      	str	r1, [r7, #8]
 8001796:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017a4:	43db      	mvns	r3, r3
 80017a6:	401a      	ands	r2, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	f003 0318 	and.w	r3, r3, #24
 80017ae:	4908      	ldr	r1, [pc, #32]	@ (80017d0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80017b0:	40d9      	lsrs	r1, r3
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	400b      	ands	r3, r1
 80017b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017ba:	431a      	orrs	r2, r3
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80017c2:	bf00      	nop
 80017c4:	3714      	adds	r7, #20
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	0007ffff 	.word	0x0007ffff

080017d4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	f003 031f 	and.w	r3, r3, #31
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001800:	4618      	mov	r0, r3
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800181c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	6093      	str	r3, [r2, #8]
}
 8001824:	bf00      	nop
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001840:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001844:	d101      	bne.n	800184a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001846:	2301      	movs	r3, #1
 8001848:	e000      	b.n	800184c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800184a:	2300      	movs	r3, #0
}
 800184c:	4618      	mov	r0, r3
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001868:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800186c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001874:	bf00      	nop
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001890:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001894:	d101      	bne.n	800189a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001896:	2301      	movs	r3, #1
 8001898:	e000      	b.n	800189c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800189a:	2300      	movs	r3, #0
}
 800189c:	4618      	mov	r0, r3
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	f003 0301 	and.w	r3, r3, #1
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d101      	bne.n	80018c0 <LL_ADC_IsEnabled+0x18>
 80018bc:	2301      	movs	r3, #1
 80018be:	e000      	b.n	80018c2 <LL_ADC_IsEnabled+0x1a>
 80018c0:	2300      	movs	r3, #0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr

080018ce <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80018ce:	b480      	push	{r7}
 80018d0:	b083      	sub	sp, #12
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	f003 0304 	and.w	r3, r3, #4
 80018de:	2b04      	cmp	r3, #4
 80018e0:	d101      	bne.n	80018e6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80018e2:	2301      	movs	r3, #1
 80018e4:	e000      	b.n	80018e8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80018e6:	2300      	movs	r3, #0
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	f003 0308 	and.w	r3, r3, #8
 8001904:	2b08      	cmp	r3, #8
 8001906:	d101      	bne.n	800190c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001908:	2301      	movs	r3, #1
 800190a:	e000      	b.n	800190e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800190c:	2300      	movs	r3, #0
}
 800190e:	4618      	mov	r0, r3
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
	...

0800191c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800191c:	b590      	push	{r4, r7, lr}
 800191e:	b089      	sub	sp, #36	@ 0x24
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001924:	2300      	movs	r3, #0
 8001926:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001928:	2300      	movs	r3, #0
 800192a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d101      	bne.n	8001936 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e1e4      	b.n	8001d00 <HAL_ADC_Init+0x3e4>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	695b      	ldr	r3, [r3, #20]
 800193a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001940:	2b00      	cmp	r3, #0
 8001942:	d133      	bne.n	80019ac <HAL_ADC_Init+0x90>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    /* Init the ADC Callback settings */
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	4a68      	ldr	r2, [pc, #416]	@ (8001ae8 <HAL_ADC_Init+0x1cc>)
 8001948:	66da      	str	r2, [r3, #108]	@ 0x6c
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a67      	ldr	r2, [pc, #412]	@ (8001aec <HAL_ADC_Init+0x1d0>)
 800194e:	671a      	str	r2, [r3, #112]	@ 0x70
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	4a67      	ldr	r2, [pc, #412]	@ (8001af0 <HAL_ADC_Init+0x1d4>)
 8001954:	675a      	str	r2, [r3, #116]	@ 0x74
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a66      	ldr	r2, [pc, #408]	@ (8001af4 <HAL_ADC_Init+0x1d8>)
 800195a:	679a      	str	r2, [r3, #120]	@ 0x78
    hadc->InjectedConvCpltCallback      = HAL_ADCEx_InjectedConvCpltCallback;       /* Legacy weak callback */
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	4a66      	ldr	r2, [pc, #408]	@ (8001af8 <HAL_ADC_Init+0x1dc>)
 8001960:	67da      	str	r2, [r3, #124]	@ 0x7c
    hadc->InjectedQueueOverflowCallback = HAL_ADCEx_InjectedQueueOverflowCallback;  /* Legacy weak callback */
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4a65      	ldr	r2, [pc, #404]	@ (8001afc <HAL_ADC_Init+0x1e0>)
 8001966:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    hadc->LevelOutOfWindow2Callback     = HAL_ADCEx_LevelOutOfWindow2Callback;      /* Legacy weak callback */
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4a64      	ldr	r2, [pc, #400]	@ (8001b00 <HAL_ADC_Init+0x1e4>)
 800196e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hadc->LevelOutOfWindow3Callback     = HAL_ADCEx_LevelOutOfWindow3Callback;      /* Legacy weak callback */
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4a63      	ldr	r2, [pc, #396]	@ (8001b04 <HAL_ADC_Init+0x1e8>)
 8001976:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    hadc->EndOfSamplingCallback         = HAL_ADCEx_EndOfSamplingCallback;          /* Legacy weak callback */
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4a62      	ldr	r2, [pc, #392]	@ (8001b08 <HAL_ADC_Init+0x1ec>)
 800197e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    if (hadc->MspInitCallback == NULL)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001988:	2b00      	cmp	r3, #0
 800198a:	d103      	bne.n	8001994 <HAL_ADC_Init+0x78>
    {
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	4a5f      	ldr	r2, [pc, #380]	@ (8001b0c <HAL_ADC_Init+0x1f0>)
 8001990:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	4798      	blx	r3
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2200      	movs	r2, #0
 80019a2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2200      	movs	r2, #0
 80019a8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7ff ff3d 	bl	8001830 <LL_ADC_IsDeepPowerDownEnabled>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d004      	beq.n	80019c6 <HAL_ADC_Init+0xaa>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff ff23 	bl	800180c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7ff ff58 	bl	8001880 <LL_ADC_IsInternalRegulatorEnabled>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d115      	bne.n	8001a02 <HAL_ADC_Init+0xe6>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4618      	mov	r0, r3
 80019dc:	f7ff ff3c 	bl	8001858 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80019e0:	4b4b      	ldr	r3, [pc, #300]	@ (8001b10 <HAL_ADC_Init+0x1f4>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	099b      	lsrs	r3, r3, #6
 80019e6:	4a4b      	ldr	r2, [pc, #300]	@ (8001b14 <HAL_ADC_Init+0x1f8>)
 80019e8:	fba2 2303 	umull	r2, r3, r2, r3
 80019ec:	099b      	lsrs	r3, r3, #6
 80019ee:	3301      	adds	r3, #1
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80019f4:	e002      	b.n	80019fc <HAL_ADC_Init+0xe0>
    {
      wait_loop_index--;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	3b01      	subs	r3, #1
 80019fa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d1f9      	bne.n	80019f6 <HAL_ADC_Init+0xda>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7ff ff3a 	bl	8001880 <LL_ADC_IsInternalRegulatorEnabled>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d10d      	bne.n	8001a2e <HAL_ADC_Init+0x112>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a16:	f043 0210 	orr.w	r2, r3, #16
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a22:	f043 0201 	orr.w	r2, r3, #1
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7ff ff4b 	bl	80018ce <LL_ADC_REG_IsConversionOngoing>
 8001a38:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a3e:	f003 0310 	and.w	r3, r3, #16
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	f040 8153 	bne.w	8001cee <HAL_ADC_Init+0x3d2>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	f040 814f 	bne.w	8001cee <HAL_ADC_Init+0x3d2>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a54:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001a58:	f043 0202 	orr.w	r2, r3, #2
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff ff1f 	bl	80018a8 <LL_ADC_IsEnabled>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d164      	bne.n	8001b3a <HAL_ADC_Init+0x21e>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001a78:	d004      	beq.n	8001a84 <HAL_ADC_Init+0x168>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a26      	ldr	r2, [pc, #152]	@ (8001b18 <HAL_ADC_Init+0x1fc>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d10f      	bne.n	8001aa4 <HAL_ADC_Init+0x188>
 8001a84:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001a88:	f7ff ff0e 	bl	80018a8 <LL_ADC_IsEnabled>
 8001a8c:	4604      	mov	r4, r0
 8001a8e:	4822      	ldr	r0, [pc, #136]	@ (8001b18 <HAL_ADC_Init+0x1fc>)
 8001a90:	f7ff ff0a 	bl	80018a8 <LL_ADC_IsEnabled>
 8001a94:	4603      	mov	r3, r0
 8001a96:	4323      	orrs	r3, r4
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	bf0c      	ite	eq
 8001a9c:	2301      	moveq	r3, #1
 8001a9e:	2300      	movne	r3, #0
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	e012      	b.n	8001aca <HAL_ADC_Init+0x1ae>
 8001aa4:	481d      	ldr	r0, [pc, #116]	@ (8001b1c <HAL_ADC_Init+0x200>)
 8001aa6:	f7ff feff 	bl	80018a8 <LL_ADC_IsEnabled>
 8001aaa:	4604      	mov	r4, r0
 8001aac:	481c      	ldr	r0, [pc, #112]	@ (8001b20 <HAL_ADC_Init+0x204>)
 8001aae:	f7ff fefb 	bl	80018a8 <LL_ADC_IsEnabled>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	431c      	orrs	r4, r3
 8001ab6:	481b      	ldr	r0, [pc, #108]	@ (8001b24 <HAL_ADC_Init+0x208>)
 8001ab8:	f7ff fef6 	bl	80018a8 <LL_ADC_IsEnabled>
 8001abc:	4603      	mov	r3, r0
 8001abe:	4323      	orrs	r3, r4
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	bf0c      	ite	eq
 8001ac4:	2301      	moveq	r3, #1
 8001ac6:	2300      	movne	r3, #0
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d035      	beq.n	8001b3a <HAL_ADC_Init+0x21e>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001ad6:	d004      	beq.n	8001ae2 <HAL_ADC_Init+0x1c6>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a0e      	ldr	r2, [pc, #56]	@ (8001b18 <HAL_ADC_Init+0x1fc>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d124      	bne.n	8001b2c <HAL_ADC_Init+0x210>
 8001ae2:	4a11      	ldr	r2, [pc, #68]	@ (8001b28 <HAL_ADC_Init+0x20c>)
 8001ae4:	e023      	b.n	8001b2e <HAL_ADC_Init+0x212>
 8001ae6:	bf00      	nop
 8001ae8:	080021e5 	.word	0x080021e5
 8001aec:	080021f9 	.word	0x080021f9
 8001af0:	0800220d 	.word	0x0800220d
 8001af4:	08002221 	.word	0x08002221
 8001af8:	08002b01 	.word	0x08002b01
 8001afc:	08002b15 	.word	0x08002b15
 8001b00:	08002b29 	.word	0x08002b29
 8001b04:	08002b3d 	.word	0x08002b3d
 8001b08:	08002b51 	.word	0x08002b51
 8001b0c:	08000f69 	.word	0x08000f69
 8001b10:	20000000 	.word	0x20000000
 8001b14:	053e2d63 	.word	0x053e2d63
 8001b18:	50000100 	.word	0x50000100
 8001b1c:	50000400 	.word	0x50000400
 8001b20:	50000500 	.word	0x50000500
 8001b24:	50000600 	.word	0x50000600
 8001b28:	50000300 	.word	0x50000300
 8001b2c:	4a76      	ldr	r2, [pc, #472]	@ (8001d08 <HAL_ADC_Init+0x3ec>)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	4619      	mov	r1, r3
 8001b34:	4610      	mov	r0, r2
 8001b36:	f7ff fcd9 	bl	80014ec <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	7f5b      	ldrb	r3, [r3, #29]
 8001b3e:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b44:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001b4a:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001b50:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001b58:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d106      	bne.n	8001b76 <HAL_ADC_Init+0x25a>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b6c:	3b01      	subs	r3, #1
 8001b6e:	045b      	lsls	r3, r3, #17
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d009      	beq.n	8001b92 <HAL_ADC_Init+0x276>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b82:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b8a:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	68da      	ldr	r2, [r3, #12]
 8001b98:	4b5c      	ldr	r3, [pc, #368]	@ (8001d0c <HAL_ADC_Init+0x3f0>)
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	6812      	ldr	r2, [r2, #0]
 8001ba0:	69b9      	ldr	r1, [r7, #24]
 8001ba2:	430b      	orrs	r3, r1
 8001ba4:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	691b      	ldr	r3, [r3, #16]
 8001bac:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	430a      	orrs	r2, r1
 8001bba:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff fe97 	bl	80018f4 <LL_ADC_INJ_IsConversionOngoing>
 8001bc6:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d16d      	bne.n	8001caa <HAL_ADC_Init+0x38e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d16a      	bne.n	8001caa <HAL_ADC_Init+0x38e>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001bd8:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001be0:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001be2:	4313      	orrs	r3, r2
 8001be4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001bf0:	f023 0302 	bic.w	r3, r3, #2
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	6812      	ldr	r2, [r2, #0]
 8001bf8:	69b9      	ldr	r1, [r7, #24]
 8001bfa:	430b      	orrs	r3, r1
 8001bfc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	691b      	ldr	r3, [r3, #16]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d017      	beq.n	8001c36 <HAL_ADC_Init+0x31a>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	691a      	ldr	r2, [r3, #16]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001c14:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001c1e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001c22:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	6911      	ldr	r1, [r2, #16]
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	6812      	ldr	r2, [r2, #0]
 8001c2e:	430b      	orrs	r3, r1
 8001c30:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8001c34:	e013      	b.n	8001c5e <HAL_ADC_Init+0x342>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	691a      	ldr	r2, [r3, #16]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001c44:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	6812      	ldr	r2, [r2, #0]
 8001c52:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001c56:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c5a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d118      	bne.n	8001c9a <HAL_ADC_Init+0x37e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	691b      	ldr	r3, [r3, #16]
 8001c6e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001c72:	f023 0304 	bic.w	r3, r3, #4
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001c7e:	4311      	orrs	r1, r2
 8001c80:	687a      	ldr	r2, [r7, #4]
 8001c82:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001c84:	4311      	orrs	r1, r2
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001c8a:	430a      	orrs	r2, r1
 8001c8c:	431a      	orrs	r2, r3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f042 0201 	orr.w	r2, r2, #1
 8001c96:	611a      	str	r2, [r3, #16]
 8001c98:	e007      	b.n	8001caa <HAL_ADC_Init+0x38e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	691a      	ldr	r2, [r3, #16]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f022 0201 	bic.w	r2, r2, #1
 8001ca8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	695b      	ldr	r3, [r3, #20]
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d10c      	bne.n	8001ccc <HAL_ADC_Init+0x3b0>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb8:	f023 010f 	bic.w	r1, r3, #15
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6a1b      	ldr	r3, [r3, #32]
 8001cc0:	1e5a      	subs	r2, r3, #1
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	430a      	orrs	r2, r1
 8001cc8:	631a      	str	r2, [r3, #48]	@ 0x30
 8001cca:	e007      	b.n	8001cdc <HAL_ADC_Init+0x3c0>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f022 020f 	bic.w	r2, r2, #15
 8001cda:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ce0:	f023 0303 	bic.w	r3, r3, #3
 8001ce4:	f043 0201 	orr.w	r2, r3, #1
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001cec:	e007      	b.n	8001cfe <HAL_ADC_Init+0x3e2>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cf2:	f043 0210 	orr.w	r2, r3, #16
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001cfe:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3724      	adds	r7, #36	@ 0x24
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd90      	pop	{r4, r7, pc}
 8001d08:	50000700 	.word	0x50000700
 8001d0c:	fff04007 	.word	0xfff04007

08001d10 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b08a      	sub	sp, #40	@ 0x28
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001d18:	2300      	movs	r3, #0
 8001d1a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001d34:	d004      	beq.n	8001d40 <HAL_ADC_IRQHandler+0x30>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a8f      	ldr	r2, [pc, #572]	@ (8001f78 <HAL_ADC_IRQHandler+0x268>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d101      	bne.n	8001d44 <HAL_ADC_IRQHandler+0x34>
 8001d40:	4b8e      	ldr	r3, [pc, #568]	@ (8001f7c <HAL_ADC_IRQHandler+0x26c>)
 8001d42:	e000      	b.n	8001d46 <HAL_ADC_IRQHandler+0x36>
 8001d44:	4b8e      	ldr	r3, [pc, #568]	@ (8001f80 <HAL_ADC_IRQHandler+0x270>)
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7ff fd44 	bl	80017d4 <LL_ADC_GetMultimode>
 8001d4c:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	f003 0302 	and.w	r3, r3, #2
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d019      	beq.n	8001d8c <HAL_ADC_IRQHandler+0x7c>
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	f003 0302 	and.w	r3, r3, #2
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d014      	beq.n	8001d8c <HAL_ADC_IRQHandler+0x7c>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d66:	f003 0310 	and.w	r3, r3, #16
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d105      	bne.n	8001d7a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d72:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	4798      	blx	r3
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2202      	movs	r2, #2
 8001d8a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	f003 0304 	and.w	r3, r3, #4
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d004      	beq.n	8001da0 <HAL_ADC_IRQHandler+0x90>
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	f003 0304 	and.w	r3, r3, #4
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d10b      	bne.n	8001db8 <HAL_ADC_IRQHandler+0xa8>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	f000 8095 	beq.w	8001ed6 <HAL_ADC_IRQHandler+0x1c6>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	f003 0308 	and.w	r3, r3, #8
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	f000 808f 	beq.w	8001ed6 <HAL_ADC_IRQHandler+0x1c6>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dbc:	f003 0310 	and.w	r3, r3, #16
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d105      	bne.n	8001dd0 <HAL_ADC_IRQHandler+0xc0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dc8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff fc5b 	bl	8001690 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d072      	beq.n	8001ec6 <HAL_ADC_IRQHandler+0x1b6>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a64      	ldr	r2, [pc, #400]	@ (8001f78 <HAL_ADC_IRQHandler+0x268>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d009      	beq.n	8001dfe <HAL_ADC_IRQHandler+0xee>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a65      	ldr	r2, [pc, #404]	@ (8001f84 <HAL_ADC_IRQHandler+0x274>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d002      	beq.n	8001dfa <HAL_ADC_IRQHandler+0xea>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	e003      	b.n	8001e02 <HAL_ADC_IRQHandler+0xf2>
 8001dfa:	4b63      	ldr	r3, [pc, #396]	@ (8001f88 <HAL_ADC_IRQHandler+0x278>)
 8001dfc:	e001      	b.n	8001e02 <HAL_ADC_IRQHandler+0xf2>
 8001dfe:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	6812      	ldr	r2, [r2, #0]
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d008      	beq.n	8001e1c <HAL_ADC_IRQHandler+0x10c>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d005      	beq.n	8001e1c <HAL_ADC_IRQHandler+0x10c>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	2b05      	cmp	r3, #5
 8001e14:	d002      	beq.n	8001e1c <HAL_ADC_IRQHandler+0x10c>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	2b09      	cmp	r3, #9
 8001e1a:	d104      	bne.n	8001e26 <HAL_ADC_IRQHandler+0x116>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	623b      	str	r3, [r7, #32]
 8001e24:	e014      	b.n	8001e50 <HAL_ADC_IRQHandler+0x140>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a53      	ldr	r2, [pc, #332]	@ (8001f78 <HAL_ADC_IRQHandler+0x268>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d009      	beq.n	8001e44 <HAL_ADC_IRQHandler+0x134>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a53      	ldr	r2, [pc, #332]	@ (8001f84 <HAL_ADC_IRQHandler+0x274>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d002      	beq.n	8001e40 <HAL_ADC_IRQHandler+0x130>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	e003      	b.n	8001e48 <HAL_ADC_IRQHandler+0x138>
 8001e40:	4b51      	ldr	r3, [pc, #324]	@ (8001f88 <HAL_ADC_IRQHandler+0x278>)
 8001e42:	e001      	b.n	8001e48 <HAL_ADC_IRQHandler+0x138>
 8001e44:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001e48:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001e50:	6a3b      	ldr	r3, [r7, #32]
 8001e52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d135      	bne.n	8001ec6 <HAL_ADC_IRQHandler+0x1b6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0308 	and.w	r3, r3, #8
 8001e64:	2b08      	cmp	r3, #8
 8001e66:	d12e      	bne.n	8001ec6 <HAL_ADC_IRQHandler+0x1b6>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7ff fd2e 	bl	80018ce <LL_ADC_REG_IsConversionOngoing>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d11a      	bne.n	8001eae <HAL_ADC_IRQHandler+0x19e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	685a      	ldr	r2, [r3, #4]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f022 020c 	bic.w	r2, r2, #12
 8001e86:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e8c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e98:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d112      	bne.n	8001ec6 <HAL_ADC_IRQHandler+0x1b6>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ea4:	f043 0201 	orr.w	r2, r3, #1
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001eac:	e00b      	b.n	8001ec6 <HAL_ADC_IRQHandler+0x1b6>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eb2:	f043 0210 	orr.w	r2, r3, #16
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ebe:	f043 0201 	orr.w	r2, r3, #1
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Note: Into callback function "HAL_ADC_ConvCpltCallback()",             */
    /*       to determine if conversion has been triggered from EOC or EOS,   */
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	4798      	blx	r3
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	220c      	movs	r2, #12
 8001ed4:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	f003 0320 	and.w	r3, r3, #32
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d004      	beq.n	8001eea <HAL_ADC_IRQHandler+0x1da>
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	f003 0320 	and.w	r3, r3, #32
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d10b      	bne.n	8001f02 <HAL_ADC_IRQHandler+0x1f2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	f000 80b3 	beq.w	800205c <HAL_ADC_IRQHandler+0x34c>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	f000 80ad 	beq.w	800205c <HAL_ADC_IRQHandler+0x34c>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f06:	f003 0310 	and.w	r3, r3, #16
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d105      	bne.n	8001f1a <HAL_ADC_IRQHandler+0x20a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f12:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7ff fbf5 	bl	800170e <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001f24:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7ff fbb0 	bl	8001690 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001f30:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a10      	ldr	r2, [pc, #64]	@ (8001f78 <HAL_ADC_IRQHandler+0x268>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d009      	beq.n	8001f50 <HAL_ADC_IRQHandler+0x240>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a10      	ldr	r2, [pc, #64]	@ (8001f84 <HAL_ADC_IRQHandler+0x274>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d002      	beq.n	8001f4c <HAL_ADC_IRQHandler+0x23c>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	e003      	b.n	8001f54 <HAL_ADC_IRQHandler+0x244>
 8001f4c:	4b0e      	ldr	r3, [pc, #56]	@ (8001f88 <HAL_ADC_IRQHandler+0x278>)
 8001f4e:	e001      	b.n	8001f54 <HAL_ADC_IRQHandler+0x244>
 8001f50:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	6812      	ldr	r2, [r2, #0]
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d008      	beq.n	8001f6e <HAL_ADC_IRQHandler+0x25e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d005      	beq.n	8001f6e <HAL_ADC_IRQHandler+0x25e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	2b06      	cmp	r3, #6
 8001f66:	d002      	beq.n	8001f6e <HAL_ADC_IRQHandler+0x25e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	2b07      	cmp	r3, #7
 8001f6c:	d10e      	bne.n	8001f8c <HAL_ADC_IRQHandler+0x27c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	623b      	str	r3, [r7, #32]
 8001f76:	e01e      	b.n	8001fb6 <HAL_ADC_IRQHandler+0x2a6>
 8001f78:	50000100 	.word	0x50000100
 8001f7c:	50000300 	.word	0x50000300
 8001f80:	50000700 	.word	0x50000700
 8001f84:	50000500 	.word	0x50000500
 8001f88:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a8f      	ldr	r2, [pc, #572]	@ (80021d0 <HAL_ADC_IRQHandler+0x4c0>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d009      	beq.n	8001faa <HAL_ADC_IRQHandler+0x29a>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a8e      	ldr	r2, [pc, #568]	@ (80021d4 <HAL_ADC_IRQHandler+0x4c4>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d002      	beq.n	8001fa6 <HAL_ADC_IRQHandler+0x296>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	e003      	b.n	8001fae <HAL_ADC_IRQHandler+0x29e>
 8001fa6:	4b8c      	ldr	r3, [pc, #560]	@ (80021d8 <HAL_ADC_IRQHandler+0x4c8>)
 8001fa8:	e001      	b.n	8001fae <HAL_ADC_IRQHandler+0x29e>
 8001faa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001fae:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d047      	beq.n	800204c <HAL_ADC_IRQHandler+0x33c>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001fbc:	6a3b      	ldr	r3, [r7, #32]
 8001fbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d007      	beq.n	8001fd6 <HAL_ADC_IRQHandler+0x2c6>
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d03f      	beq.n	800204c <HAL_ADC_IRQHandler+0x33c>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001fcc:	6a3b      	ldr	r3, [r7, #32]
 8001fce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d13a      	bne.n	800204c <HAL_ADC_IRQHandler+0x33c>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fe0:	2b40      	cmp	r3, #64	@ 0x40
 8001fe2:	d133      	bne.n	800204c <HAL_ADC_IRQHandler+0x33c>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001fe4:	6a3b      	ldr	r3, [r7, #32]
 8001fe6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d12e      	bne.n	800204c <HAL_ADC_IRQHandler+0x33c>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7ff fc7e 	bl	80018f4 <LL_ADC_INJ_IsConversionOngoing>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d11a      	bne.n	8002034 <HAL_ADC_IRQHandler+0x324>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	685a      	ldr	r2, [r3, #4]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800200c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002012:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800201e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002022:	2b00      	cmp	r3, #0
 8002024:	d112      	bne.n	800204c <HAL_ADC_IRQHandler+0x33c>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800202a:	f043 0201 	orr.w	r2, r3, #1
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002032:	e00b      	b.n	800204c <HAL_ADC_IRQHandler+0x33c>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002038:	f043 0210 	orr.w	r2, r3, #16
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002044:	f043 0201 	orr.w	r2, r3, #1
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	661a      	str	r2, [r3, #96]	@ 0x60
              if (__HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) or
              if (__HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOC)) to determine whether
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	4798      	blx	r3
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2260      	movs	r2, #96	@ 0x60
 800205a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002062:	2b00      	cmp	r3, #0
 8002064:	d012      	beq.n	800208c <HAL_ADC_IRQHandler+0x37c>
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800206c:	2b00      	cmp	r3, #0
 800206e:	d00d      	beq.n	800208c <HAL_ADC_IRQHandler+0x37c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002074:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	4798      	blx	r3
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2280      	movs	r2, #128	@ 0x80
 800208a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002092:	2b00      	cmp	r3, #0
 8002094:	d014      	beq.n	80020c0 <HAL_ADC_IRQHandler+0x3b0>
 8002096:	69bb      	ldr	r3, [r7, #24]
 8002098:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800209c:	2b00      	cmp	r3, #0
 800209e:	d00f      	beq.n	80020c0 <HAL_ADC_IRQHandler+0x3b0>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020a4:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	4798      	blx	r3
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80020be:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d014      	beq.n	80020f4 <HAL_ADC_IRQHandler+0x3e4>
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d00f      	beq.n	80020f4 <HAL_ADC_IRQHandler+0x3e4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020d8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	4798      	blx	r3
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020f2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	f003 0310 	and.w	r3, r3, #16
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d044      	beq.n	8002188 <HAL_ADC_IRQHandler+0x478>
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	f003 0310 	and.w	r3, r3, #16
 8002104:	2b00      	cmp	r3, #0
 8002106:	d03f      	beq.n	8002188 <HAL_ADC_IRQHandler+0x478>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800210c:	2b00      	cmp	r3, #0
 800210e:	d102      	bne.n	8002116 <HAL_ADC_IRQHandler+0x406>
    {
      overrun_error = 1UL;
 8002110:	2301      	movs	r3, #1
 8002112:	627b      	str	r3, [r7, #36]	@ 0x24
 8002114:	e021      	b.n	800215a <HAL_ADC_IRQHandler+0x44a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d015      	beq.n	8002148 <HAL_ADC_IRQHandler+0x438>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002124:	d004      	beq.n	8002130 <HAL_ADC_IRQHandler+0x420>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a29      	ldr	r2, [pc, #164]	@ (80021d0 <HAL_ADC_IRQHandler+0x4c0>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d101      	bne.n	8002134 <HAL_ADC_IRQHandler+0x424>
 8002130:	4b2a      	ldr	r3, [pc, #168]	@ (80021dc <HAL_ADC_IRQHandler+0x4cc>)
 8002132:	e000      	b.n	8002136 <HAL_ADC_IRQHandler+0x426>
 8002134:	4b2a      	ldr	r3, [pc, #168]	@ (80021e0 <HAL_ADC_IRQHandler+0x4d0>)
 8002136:	4618      	mov	r0, r3
 8002138:	f7ff fb5a 	bl	80017f0 <LL_ADC_GetMultiDMATransfer>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d00b      	beq.n	800215a <HAL_ADC_IRQHandler+0x44a>
        {
          overrun_error = 1UL;
 8002142:	2301      	movs	r3, #1
 8002144:	627b      	str	r3, [r7, #36]	@ 0x24
 8002146:	e008      	b.n	800215a <HAL_ADC_IRQHandler+0x44a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	68db      	ldr	r3, [r3, #12]
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <HAL_ADC_IRQHandler+0x44a>
        {
          overrun_error = 1UL;
 8002156:	2301      	movs	r3, #1
 8002158:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800215a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800215c:	2b01      	cmp	r3, #1
 800215e:	d10f      	bne.n	8002180 <HAL_ADC_IRQHandler+0x470>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002164:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002170:	f043 0202 	orr.w	r2, r3, #2
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	661a      	str	r2, [r3, #96]	@ 0x60
      /* Note: In case of overrun, ADC conversion data is preserved until     */
      /*       flag OVR is reset.                                             */
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	4798      	blx	r3
      HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2210      	movs	r2, #16
 8002186:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800218e:	2b00      	cmp	r3, #0
 8002190:	d01a      	beq.n	80021c8 <HAL_ADC_IRQHandler+0x4b8>
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002198:	2b00      	cmp	r3, #0
 800219a:	d015      	beq.n	80021c8 <HAL_ADC_IRQHandler+0x4b8>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021a0:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021ac:	f043 0208 	orr.w	r2, r3, #8
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80021bc:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	4798      	blx	r3
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80021c8:	bf00      	nop
 80021ca:	3728      	adds	r7, #40	@ 0x28
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	50000100 	.word	0x50000100
 80021d4:	50000500 	.word	0x50000500
 80021d8:	50000400 	.word	0x50000400
 80021dc:	50000300 	.word	0x50000300
 80021e0:	50000700 	.word	0x50000700

080021e4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80021ec:	bf00      	nop
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002200:	bf00      	nop
 8002202:	370c      	adds	r7, #12
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002214:	bf00      	nop
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002228:	bf00      	nop
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b0b6      	sub	sp, #216	@ 0xd8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800223e:	2300      	movs	r3, #0
 8002240:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002244:	2300      	movs	r3, #0
 8002246:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800224e:	2b01      	cmp	r3, #1
 8002250:	d102      	bne.n	8002258 <HAL_ADC_ConfigChannel+0x24>
 8002252:	2302      	movs	r3, #2
 8002254:	f000 bc13 	b.w	8002a7e <HAL_ADC_ConfigChannel+0x84a>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2201      	movs	r2, #1
 800225c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4618      	mov	r0, r3
 8002266:	f7ff fb32 	bl	80018ce <LL_ADC_REG_IsConversionOngoing>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	f040 83f3 	bne.w	8002a58 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6818      	ldr	r0, [r3, #0]
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	6859      	ldr	r1, [r3, #4]
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	461a      	mov	r2, r3
 8002280:	f7ff fa19 	bl	80016b6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4618      	mov	r0, r3
 800228a:	f7ff fb20 	bl	80018ce <LL_ADC_REG_IsConversionOngoing>
 800228e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4618      	mov	r0, r3
 8002298:	f7ff fb2c 	bl	80018f4 <LL_ADC_INJ_IsConversionOngoing>
 800229c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80022a0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	f040 81d9 	bne.w	800265c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80022aa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	f040 81d4 	bne.w	800265c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80022bc:	d10f      	bne.n	80022de <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6818      	ldr	r0, [r3, #0]
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2200      	movs	r2, #0
 80022c8:	4619      	mov	r1, r3
 80022ca:	f7ff fa33 	bl	8001734 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7ff f9c7 	bl	800166a <LL_ADC_SetSamplingTimeCommonConfig>
 80022dc:	e00e      	b.n	80022fc <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6818      	ldr	r0, [r3, #0]
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	6819      	ldr	r1, [r3, #0]
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	461a      	mov	r2, r3
 80022ec:	f7ff fa22 	bl	8001734 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2100      	movs	r1, #0
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7ff f9b7 	bl	800166a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	695a      	ldr	r2, [r3, #20]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	08db      	lsrs	r3, r3, #3
 8002308:	f003 0303 	and.w	r3, r3, #3
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	fa02 f303 	lsl.w	r3, r2, r3
 8002312:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	691b      	ldr	r3, [r3, #16]
 800231a:	2b04      	cmp	r3, #4
 800231c:	d022      	beq.n	8002364 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6818      	ldr	r0, [r3, #0]
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	6919      	ldr	r1, [r3, #16]
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800232e:	f7ff f911 	bl	8001554 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6818      	ldr	r0, [r3, #0]
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	6919      	ldr	r1, [r3, #16]
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	699b      	ldr	r3, [r3, #24]
 800233e:	461a      	mov	r2, r3
 8002340:	f7ff f95d 	bl	80015fe <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6818      	ldr	r0, [r3, #0]
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002350:	2b01      	cmp	r3, #1
 8002352:	d102      	bne.n	800235a <HAL_ADC_ConfigChannel+0x126>
 8002354:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002358:	e000      	b.n	800235c <HAL_ADC_ConfigChannel+0x128>
 800235a:	2300      	movs	r3, #0
 800235c:	461a      	mov	r2, r3
 800235e:	f7ff f969 	bl	8001634 <LL_ADC_SetOffsetSaturation>
 8002362:	e17b      	b.n	800265c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2100      	movs	r1, #0
 800236a:	4618      	mov	r0, r3
 800236c:	f7ff f916 	bl	800159c <LL_ADC_GetOffsetChannel>
 8002370:	4603      	mov	r3, r0
 8002372:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002376:	2b00      	cmp	r3, #0
 8002378:	d10a      	bne.n	8002390 <HAL_ADC_ConfigChannel+0x15c>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2100      	movs	r1, #0
 8002380:	4618      	mov	r0, r3
 8002382:	f7ff f90b 	bl	800159c <LL_ADC_GetOffsetChannel>
 8002386:	4603      	mov	r3, r0
 8002388:	0e9b      	lsrs	r3, r3, #26
 800238a:	f003 021f 	and.w	r2, r3, #31
 800238e:	e01e      	b.n	80023ce <HAL_ADC_ConfigChannel+0x19a>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2100      	movs	r1, #0
 8002396:	4618      	mov	r0, r3
 8002398:	f7ff f900 	bl	800159c <LL_ADC_GetOffsetChannel>
 800239c:	4603      	mov	r3, r0
 800239e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80023a6:	fa93 f3a3 	rbit	r3, r3
 80023aa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80023ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80023b2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80023b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d101      	bne.n	80023c2 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80023be:	2320      	movs	r3, #32
 80023c0:	e004      	b.n	80023cc <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80023c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80023c6:	fab3 f383 	clz	r3, r3
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d105      	bne.n	80023e6 <HAL_ADC_ConfigChannel+0x1b2>
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	0e9b      	lsrs	r3, r3, #26
 80023e0:	f003 031f 	and.w	r3, r3, #31
 80023e4:	e018      	b.n	8002418 <HAL_ADC_ConfigChannel+0x1e4>
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80023f2:	fa93 f3a3 	rbit	r3, r3
 80023f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80023fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80023fe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002402:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002406:	2b00      	cmp	r3, #0
 8002408:	d101      	bne.n	800240e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800240a:	2320      	movs	r3, #32
 800240c:	e004      	b.n	8002418 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800240e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002412:	fab3 f383 	clz	r3, r3
 8002416:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002418:	429a      	cmp	r2, r3
 800241a:	d106      	bne.n	800242a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2200      	movs	r2, #0
 8002422:	2100      	movs	r1, #0
 8002424:	4618      	mov	r0, r3
 8002426:	f7ff f8cf 	bl	80015c8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2101      	movs	r1, #1
 8002430:	4618      	mov	r0, r3
 8002432:	f7ff f8b3 	bl	800159c <LL_ADC_GetOffsetChannel>
 8002436:	4603      	mov	r3, r0
 8002438:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800243c:	2b00      	cmp	r3, #0
 800243e:	d10a      	bne.n	8002456 <HAL_ADC_ConfigChannel+0x222>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2101      	movs	r1, #1
 8002446:	4618      	mov	r0, r3
 8002448:	f7ff f8a8 	bl	800159c <LL_ADC_GetOffsetChannel>
 800244c:	4603      	mov	r3, r0
 800244e:	0e9b      	lsrs	r3, r3, #26
 8002450:	f003 021f 	and.w	r2, r3, #31
 8002454:	e01e      	b.n	8002494 <HAL_ADC_ConfigChannel+0x260>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	2101      	movs	r1, #1
 800245c:	4618      	mov	r0, r3
 800245e:	f7ff f89d 	bl	800159c <LL_ADC_GetOffsetChannel>
 8002462:	4603      	mov	r3, r0
 8002464:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002468:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800246c:	fa93 f3a3 	rbit	r3, r3
 8002470:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002474:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002478:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800247c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002480:	2b00      	cmp	r3, #0
 8002482:	d101      	bne.n	8002488 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002484:	2320      	movs	r3, #32
 8002486:	e004      	b.n	8002492 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002488:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800248c:	fab3 f383 	clz	r3, r3
 8002490:	b2db      	uxtb	r3, r3
 8002492:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800249c:	2b00      	cmp	r3, #0
 800249e:	d105      	bne.n	80024ac <HAL_ADC_ConfigChannel+0x278>
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	0e9b      	lsrs	r3, r3, #26
 80024a6:	f003 031f 	and.w	r3, r3, #31
 80024aa:	e018      	b.n	80024de <HAL_ADC_ConfigChannel+0x2aa>
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80024b8:	fa93 f3a3 	rbit	r3, r3
 80024bc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80024c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80024c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80024c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d101      	bne.n	80024d4 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80024d0:	2320      	movs	r3, #32
 80024d2:	e004      	b.n	80024de <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80024d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80024d8:	fab3 f383 	clz	r3, r3
 80024dc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80024de:	429a      	cmp	r2, r3
 80024e0:	d106      	bne.n	80024f0 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2200      	movs	r2, #0
 80024e8:	2101      	movs	r1, #1
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7ff f86c 	bl	80015c8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2102      	movs	r1, #2
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7ff f850 	bl	800159c <LL_ADC_GetOffsetChannel>
 80024fc:	4603      	mov	r3, r0
 80024fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002502:	2b00      	cmp	r3, #0
 8002504:	d10a      	bne.n	800251c <HAL_ADC_ConfigChannel+0x2e8>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2102      	movs	r1, #2
 800250c:	4618      	mov	r0, r3
 800250e:	f7ff f845 	bl	800159c <LL_ADC_GetOffsetChannel>
 8002512:	4603      	mov	r3, r0
 8002514:	0e9b      	lsrs	r3, r3, #26
 8002516:	f003 021f 	and.w	r2, r3, #31
 800251a:	e01e      	b.n	800255a <HAL_ADC_ConfigChannel+0x326>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2102      	movs	r1, #2
 8002522:	4618      	mov	r0, r3
 8002524:	f7ff f83a 	bl	800159c <LL_ADC_GetOffsetChannel>
 8002528:	4603      	mov	r3, r0
 800252a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800252e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002532:	fa93 f3a3 	rbit	r3, r3
 8002536:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800253a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800253e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002542:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002546:	2b00      	cmp	r3, #0
 8002548:	d101      	bne.n	800254e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800254a:	2320      	movs	r3, #32
 800254c:	e004      	b.n	8002558 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800254e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002552:	fab3 f383 	clz	r3, r3
 8002556:	b2db      	uxtb	r3, r3
 8002558:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002562:	2b00      	cmp	r3, #0
 8002564:	d105      	bne.n	8002572 <HAL_ADC_ConfigChannel+0x33e>
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	0e9b      	lsrs	r3, r3, #26
 800256c:	f003 031f 	and.w	r3, r3, #31
 8002570:	e016      	b.n	80025a0 <HAL_ADC_ConfigChannel+0x36c>
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800257a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800257e:	fa93 f3a3 	rbit	r3, r3
 8002582:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002584:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002586:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800258a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800258e:	2b00      	cmp	r3, #0
 8002590:	d101      	bne.n	8002596 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002592:	2320      	movs	r3, #32
 8002594:	e004      	b.n	80025a0 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002596:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800259a:	fab3 f383 	clz	r3, r3
 800259e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d106      	bne.n	80025b2 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2200      	movs	r2, #0
 80025aa:	2102      	movs	r1, #2
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7ff f80b 	bl	80015c8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2103      	movs	r1, #3
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7fe ffef 	bl	800159c <LL_ADC_GetOffsetChannel>
 80025be:	4603      	mov	r3, r0
 80025c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d10a      	bne.n	80025de <HAL_ADC_ConfigChannel+0x3aa>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2103      	movs	r1, #3
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7fe ffe4 	bl	800159c <LL_ADC_GetOffsetChannel>
 80025d4:	4603      	mov	r3, r0
 80025d6:	0e9b      	lsrs	r3, r3, #26
 80025d8:	f003 021f 	and.w	r2, r3, #31
 80025dc:	e017      	b.n	800260e <HAL_ADC_ConfigChannel+0x3da>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	2103      	movs	r1, #3
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7fe ffd9 	bl	800159c <LL_ADC_GetOffsetChannel>
 80025ea:	4603      	mov	r3, r0
 80025ec:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80025f0:	fa93 f3a3 	rbit	r3, r3
 80025f4:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80025f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80025f8:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80025fa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d101      	bne.n	8002604 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002600:	2320      	movs	r3, #32
 8002602:	e003      	b.n	800260c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002604:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002606:	fab3 f383 	clz	r3, r3
 800260a:	b2db      	uxtb	r3, r3
 800260c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002616:	2b00      	cmp	r3, #0
 8002618:	d105      	bne.n	8002626 <HAL_ADC_ConfigChannel+0x3f2>
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	0e9b      	lsrs	r3, r3, #26
 8002620:	f003 031f 	and.w	r3, r3, #31
 8002624:	e011      	b.n	800264a <HAL_ADC_ConfigChannel+0x416>
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800262c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800262e:	fa93 f3a3 	rbit	r3, r3
 8002632:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002634:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002636:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002638:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800263a:	2b00      	cmp	r3, #0
 800263c:	d101      	bne.n	8002642 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800263e:	2320      	movs	r3, #32
 8002640:	e003      	b.n	800264a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002642:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002644:	fab3 f383 	clz	r3, r3
 8002648:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800264a:	429a      	cmp	r2, r3
 800264c:	d106      	bne.n	800265c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2200      	movs	r2, #0
 8002654:	2103      	movs	r1, #3
 8002656:	4618      	mov	r0, r3
 8002658:	f7fe ffb6 	bl	80015c8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4618      	mov	r0, r3
 8002662:	f7ff f921 	bl	80018a8 <LL_ADC_IsEnabled>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	f040 813d 	bne.w	80028e8 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6818      	ldr	r0, [r3, #0]
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	6819      	ldr	r1, [r3, #0]
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	461a      	mov	r2, r3
 800267c:	f7ff f886 	bl	800178c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	4aa2      	ldr	r2, [pc, #648]	@ (8002910 <HAL_ADC_ConfigChannel+0x6dc>)
 8002686:	4293      	cmp	r3, r2
 8002688:	f040 812e 	bne.w	80028e8 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002698:	2b00      	cmp	r3, #0
 800269a:	d10b      	bne.n	80026b4 <HAL_ADC_ConfigChannel+0x480>
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	0e9b      	lsrs	r3, r3, #26
 80026a2:	3301      	adds	r3, #1
 80026a4:	f003 031f 	and.w	r3, r3, #31
 80026a8:	2b09      	cmp	r3, #9
 80026aa:	bf94      	ite	ls
 80026ac:	2301      	movls	r3, #1
 80026ae:	2300      	movhi	r3, #0
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	e019      	b.n	80026e8 <HAL_ADC_ConfigChannel+0x4b4>
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80026bc:	fa93 f3a3 	rbit	r3, r3
 80026c0:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80026c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80026c4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80026c6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d101      	bne.n	80026d0 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80026cc:	2320      	movs	r3, #32
 80026ce:	e003      	b.n	80026d8 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80026d0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80026d2:	fab3 f383 	clz	r3, r3
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	3301      	adds	r3, #1
 80026da:	f003 031f 	and.w	r3, r3, #31
 80026de:	2b09      	cmp	r3, #9
 80026e0:	bf94      	ite	ls
 80026e2:	2301      	movls	r3, #1
 80026e4:	2300      	movhi	r3, #0
 80026e6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d079      	beq.n	80027e0 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d107      	bne.n	8002708 <HAL_ADC_ConfigChannel+0x4d4>
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	0e9b      	lsrs	r3, r3, #26
 80026fe:	3301      	adds	r3, #1
 8002700:	069b      	lsls	r3, r3, #26
 8002702:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002706:	e015      	b.n	8002734 <HAL_ADC_ConfigChannel+0x500>
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800270e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002710:	fa93 f3a3 	rbit	r3, r3
 8002714:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002716:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002718:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800271a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800271c:	2b00      	cmp	r3, #0
 800271e:	d101      	bne.n	8002724 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002720:	2320      	movs	r3, #32
 8002722:	e003      	b.n	800272c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002724:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002726:	fab3 f383 	clz	r3, r3
 800272a:	b2db      	uxtb	r3, r3
 800272c:	3301      	adds	r3, #1
 800272e:	069b      	lsls	r3, r3, #26
 8002730:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800273c:	2b00      	cmp	r3, #0
 800273e:	d109      	bne.n	8002754 <HAL_ADC_ConfigChannel+0x520>
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	0e9b      	lsrs	r3, r3, #26
 8002746:	3301      	adds	r3, #1
 8002748:	f003 031f 	and.w	r3, r3, #31
 800274c:	2101      	movs	r1, #1
 800274e:	fa01 f303 	lsl.w	r3, r1, r3
 8002752:	e017      	b.n	8002784 <HAL_ADC_ConfigChannel+0x550>
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800275a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800275c:	fa93 f3a3 	rbit	r3, r3
 8002760:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002762:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002764:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002766:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002768:	2b00      	cmp	r3, #0
 800276a:	d101      	bne.n	8002770 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800276c:	2320      	movs	r3, #32
 800276e:	e003      	b.n	8002778 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002770:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002772:	fab3 f383 	clz	r3, r3
 8002776:	b2db      	uxtb	r3, r3
 8002778:	3301      	adds	r3, #1
 800277a:	f003 031f 	and.w	r3, r3, #31
 800277e:	2101      	movs	r1, #1
 8002780:	fa01 f303 	lsl.w	r3, r1, r3
 8002784:	ea42 0103 	orr.w	r1, r2, r3
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002790:	2b00      	cmp	r3, #0
 8002792:	d10a      	bne.n	80027aa <HAL_ADC_ConfigChannel+0x576>
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	0e9b      	lsrs	r3, r3, #26
 800279a:	3301      	adds	r3, #1
 800279c:	f003 021f 	and.w	r2, r3, #31
 80027a0:	4613      	mov	r3, r2
 80027a2:	005b      	lsls	r3, r3, #1
 80027a4:	4413      	add	r3, r2
 80027a6:	051b      	lsls	r3, r3, #20
 80027a8:	e018      	b.n	80027dc <HAL_ADC_ConfigChannel+0x5a8>
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027b2:	fa93 f3a3 	rbit	r3, r3
 80027b6:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80027b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80027bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d101      	bne.n	80027c6 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80027c2:	2320      	movs	r3, #32
 80027c4:	e003      	b.n	80027ce <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80027c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80027c8:	fab3 f383 	clz	r3, r3
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	3301      	adds	r3, #1
 80027d0:	f003 021f 	and.w	r2, r3, #31
 80027d4:	4613      	mov	r3, r2
 80027d6:	005b      	lsls	r3, r3, #1
 80027d8:	4413      	add	r3, r2
 80027da:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027dc:	430b      	orrs	r3, r1
 80027de:	e07e      	b.n	80028de <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d107      	bne.n	80027fc <HAL_ADC_ConfigChannel+0x5c8>
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	0e9b      	lsrs	r3, r3, #26
 80027f2:	3301      	adds	r3, #1
 80027f4:	069b      	lsls	r3, r3, #26
 80027f6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80027fa:	e015      	b.n	8002828 <HAL_ADC_ConfigChannel+0x5f4>
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002802:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002804:	fa93 f3a3 	rbit	r3, r3
 8002808:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800280a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800280c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800280e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002810:	2b00      	cmp	r3, #0
 8002812:	d101      	bne.n	8002818 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002814:	2320      	movs	r3, #32
 8002816:	e003      	b.n	8002820 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800281a:	fab3 f383 	clz	r3, r3
 800281e:	b2db      	uxtb	r3, r3
 8002820:	3301      	adds	r3, #1
 8002822:	069b      	lsls	r3, r3, #26
 8002824:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002830:	2b00      	cmp	r3, #0
 8002832:	d109      	bne.n	8002848 <HAL_ADC_ConfigChannel+0x614>
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	0e9b      	lsrs	r3, r3, #26
 800283a:	3301      	adds	r3, #1
 800283c:	f003 031f 	and.w	r3, r3, #31
 8002840:	2101      	movs	r1, #1
 8002842:	fa01 f303 	lsl.w	r3, r1, r3
 8002846:	e017      	b.n	8002878 <HAL_ADC_ConfigChannel+0x644>
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800284e:	6a3b      	ldr	r3, [r7, #32]
 8002850:	fa93 f3a3 	rbit	r3, r3
 8002854:	61fb      	str	r3, [r7, #28]
  return result;
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800285a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800285c:	2b00      	cmp	r3, #0
 800285e:	d101      	bne.n	8002864 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002860:	2320      	movs	r3, #32
 8002862:	e003      	b.n	800286c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002866:	fab3 f383 	clz	r3, r3
 800286a:	b2db      	uxtb	r3, r3
 800286c:	3301      	adds	r3, #1
 800286e:	f003 031f 	and.w	r3, r3, #31
 8002872:	2101      	movs	r1, #1
 8002874:	fa01 f303 	lsl.w	r3, r1, r3
 8002878:	ea42 0103 	orr.w	r1, r2, r3
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002884:	2b00      	cmp	r3, #0
 8002886:	d10d      	bne.n	80028a4 <HAL_ADC_ConfigChannel+0x670>
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	0e9b      	lsrs	r3, r3, #26
 800288e:	3301      	adds	r3, #1
 8002890:	f003 021f 	and.w	r2, r3, #31
 8002894:	4613      	mov	r3, r2
 8002896:	005b      	lsls	r3, r3, #1
 8002898:	4413      	add	r3, r2
 800289a:	3b1e      	subs	r3, #30
 800289c:	051b      	lsls	r3, r3, #20
 800289e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80028a2:	e01b      	b.n	80028dc <HAL_ADC_ConfigChannel+0x6a8>
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	fa93 f3a3 	rbit	r3, r3
 80028b0:	613b      	str	r3, [r7, #16]
  return result;
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d101      	bne.n	80028c0 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80028bc:	2320      	movs	r3, #32
 80028be:	e003      	b.n	80028c8 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	fab3 f383 	clz	r3, r3
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	3301      	adds	r3, #1
 80028ca:	f003 021f 	and.w	r2, r3, #31
 80028ce:	4613      	mov	r3, r2
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	4413      	add	r3, r2
 80028d4:	3b1e      	subs	r3, #30
 80028d6:	051b      	lsls	r3, r3, #20
 80028d8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028dc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80028de:	683a      	ldr	r2, [r7, #0]
 80028e0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028e2:	4619      	mov	r1, r3
 80028e4:	f7fe ff26 	bl	8001734 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	4b09      	ldr	r3, [pc, #36]	@ (8002914 <HAL_ADC_ConfigChannel+0x6e0>)
 80028ee:	4013      	ands	r3, r2
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	f000 80be 	beq.w	8002a72 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80028fe:	d004      	beq.n	800290a <HAL_ADC_ConfigChannel+0x6d6>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a04      	ldr	r2, [pc, #16]	@ (8002918 <HAL_ADC_ConfigChannel+0x6e4>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d10a      	bne.n	8002920 <HAL_ADC_ConfigChannel+0x6ec>
 800290a:	4b04      	ldr	r3, [pc, #16]	@ (800291c <HAL_ADC_ConfigChannel+0x6e8>)
 800290c:	e009      	b.n	8002922 <HAL_ADC_ConfigChannel+0x6ee>
 800290e:	bf00      	nop
 8002910:	407f0000 	.word	0x407f0000
 8002914:	80080000 	.word	0x80080000
 8002918:	50000100 	.word	0x50000100
 800291c:	50000300 	.word	0x50000300
 8002920:	4b59      	ldr	r3, [pc, #356]	@ (8002a88 <HAL_ADC_ConfigChannel+0x854>)
 8002922:	4618      	mov	r0, r3
 8002924:	f7fe fe08 	bl	8001538 <LL_ADC_GetCommonPathInternalCh>
 8002928:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a56      	ldr	r2, [pc, #344]	@ (8002a8c <HAL_ADC_ConfigChannel+0x858>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d004      	beq.n	8002940 <HAL_ADC_ConfigChannel+0x70c>
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a55      	ldr	r2, [pc, #340]	@ (8002a90 <HAL_ADC_ConfigChannel+0x85c>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d13a      	bne.n	80029b6 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002940:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002944:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d134      	bne.n	80029b6 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002954:	d005      	beq.n	8002962 <HAL_ADC_ConfigChannel+0x72e>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a4e      	ldr	r2, [pc, #312]	@ (8002a94 <HAL_ADC_ConfigChannel+0x860>)
 800295c:	4293      	cmp	r3, r2
 800295e:	f040 8085 	bne.w	8002a6c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800296a:	d004      	beq.n	8002976 <HAL_ADC_ConfigChannel+0x742>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a49      	ldr	r2, [pc, #292]	@ (8002a98 <HAL_ADC_ConfigChannel+0x864>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d101      	bne.n	800297a <HAL_ADC_ConfigChannel+0x746>
 8002976:	4a49      	ldr	r2, [pc, #292]	@ (8002a9c <HAL_ADC_ConfigChannel+0x868>)
 8002978:	e000      	b.n	800297c <HAL_ADC_ConfigChannel+0x748>
 800297a:	4a43      	ldr	r2, [pc, #268]	@ (8002a88 <HAL_ADC_ConfigChannel+0x854>)
 800297c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002980:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002984:	4619      	mov	r1, r3
 8002986:	4610      	mov	r0, r2
 8002988:	f7fe fdc3 	bl	8001512 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800298c:	4b44      	ldr	r3, [pc, #272]	@ (8002aa0 <HAL_ADC_ConfigChannel+0x86c>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	099b      	lsrs	r3, r3, #6
 8002992:	4a44      	ldr	r2, [pc, #272]	@ (8002aa4 <HAL_ADC_ConfigChannel+0x870>)
 8002994:	fba2 2303 	umull	r2, r3, r2, r3
 8002998:	099b      	lsrs	r3, r3, #6
 800299a:	1c5a      	adds	r2, r3, #1
 800299c:	4613      	mov	r3, r2
 800299e:	005b      	lsls	r3, r3, #1
 80029a0:	4413      	add	r3, r2
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80029a6:	e002      	b.n	80029ae <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	3b01      	subs	r3, #1
 80029ac:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d1f9      	bne.n	80029a8 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80029b4:	e05a      	b.n	8002a6c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a3b      	ldr	r2, [pc, #236]	@ (8002aa8 <HAL_ADC_ConfigChannel+0x874>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d125      	bne.n	8002a0c <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80029c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80029c4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d11f      	bne.n	8002a0c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a31      	ldr	r2, [pc, #196]	@ (8002a98 <HAL_ADC_ConfigChannel+0x864>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d104      	bne.n	80029e0 <HAL_ADC_ConfigChannel+0x7ac>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a34      	ldr	r2, [pc, #208]	@ (8002aac <HAL_ADC_ConfigChannel+0x878>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d047      	beq.n	8002a70 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80029e8:	d004      	beq.n	80029f4 <HAL_ADC_ConfigChannel+0x7c0>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a2a      	ldr	r2, [pc, #168]	@ (8002a98 <HAL_ADC_ConfigChannel+0x864>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d101      	bne.n	80029f8 <HAL_ADC_ConfigChannel+0x7c4>
 80029f4:	4a29      	ldr	r2, [pc, #164]	@ (8002a9c <HAL_ADC_ConfigChannel+0x868>)
 80029f6:	e000      	b.n	80029fa <HAL_ADC_ConfigChannel+0x7c6>
 80029f8:	4a23      	ldr	r2, [pc, #140]	@ (8002a88 <HAL_ADC_ConfigChannel+0x854>)
 80029fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80029fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a02:	4619      	mov	r1, r3
 8002a04:	4610      	mov	r0, r2
 8002a06:	f7fe fd84 	bl	8001512 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a0a:	e031      	b.n	8002a70 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a27      	ldr	r2, [pc, #156]	@ (8002ab0 <HAL_ADC_ConfigChannel+0x87c>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d12d      	bne.n	8002a72 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002a16:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002a1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d127      	bne.n	8002a72 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a1c      	ldr	r2, [pc, #112]	@ (8002a98 <HAL_ADC_ConfigChannel+0x864>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d022      	beq.n	8002a72 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a34:	d004      	beq.n	8002a40 <HAL_ADC_ConfigChannel+0x80c>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a17      	ldr	r2, [pc, #92]	@ (8002a98 <HAL_ADC_ConfigChannel+0x864>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d101      	bne.n	8002a44 <HAL_ADC_ConfigChannel+0x810>
 8002a40:	4a16      	ldr	r2, [pc, #88]	@ (8002a9c <HAL_ADC_ConfigChannel+0x868>)
 8002a42:	e000      	b.n	8002a46 <HAL_ADC_ConfigChannel+0x812>
 8002a44:	4a10      	ldr	r2, [pc, #64]	@ (8002a88 <HAL_ADC_ConfigChannel+0x854>)
 8002a46:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002a4a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002a4e:	4619      	mov	r1, r3
 8002a50:	4610      	mov	r0, r2
 8002a52:	f7fe fd5e 	bl	8001512 <LL_ADC_SetCommonPathInternalCh>
 8002a56:	e00c      	b.n	8002a72 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a5c:	f043 0220 	orr.w	r2, r3, #32
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002a6a:	e002      	b.n	8002a72 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a6c:	bf00      	nop
 8002a6e:	e000      	b.n	8002a72 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a70:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002a7a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	37d8      	adds	r7, #216	@ 0xd8
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	50000700 	.word	0x50000700
 8002a8c:	c3210000 	.word	0xc3210000
 8002a90:	90c00010 	.word	0x90c00010
 8002a94:	50000600 	.word	0x50000600
 8002a98:	50000100 	.word	0x50000100
 8002a9c:	50000300 	.word	0x50000300
 8002aa0:	20000000 	.word	0x20000000
 8002aa4:	053e2d63 	.word	0x053e2d63
 8002aa8:	c7520000 	.word	0xc7520000
 8002aac:	50000500 	.word	0x50000500
 8002ab0:	cb840000 	.word	0xcb840000

08002ab4 <LL_ADC_IsEnabled>:
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	f003 0301 	and.w	r3, r3, #1
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d101      	bne.n	8002acc <LL_ADC_IsEnabled+0x18>
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e000      	b.n	8002ace <LL_ADC_IsEnabled+0x1a>
 8002acc:	2300      	movs	r3, #0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	370c      	adds	r7, #12
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr

08002ada <LL_ADC_REG_IsConversionOngoing>:
{
 8002ada:	b480      	push	{r7}
 8002adc:	b083      	sub	sp, #12
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f003 0304 	and.w	r3, r3, #4
 8002aea:	2b04      	cmp	r3, #4
 8002aec:	d101      	bne.n	8002af2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002aee:	2301      	movs	r3, #1
 8002af0:	e000      	b.n	8002af4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002af2:	2300      	movs	r3, #0
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr

08002b00 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002b08:	bf00      	nop
 8002b0a:	370c      	adds	r7, #12
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr

08002b14 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002b1c:	bf00      	nop
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002b30:	bf00      	nop
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr

08002b3c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002b44:	bf00      	nop
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002b58:	bf00      	nop
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002b64:	b590      	push	{r4, r7, lr}
 8002b66:	b0ad      	sub	sp, #180	@ 0xb4
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d101      	bne.n	8002b82 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002b7e:	2302      	movs	r3, #2
 8002b80:	e0f8      	b.n	8002d74 <HAL_ADCEx_MultiModeConfigChannel+0x210>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2201      	movs	r2, #1
 8002b86:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002b8e:	2300      	movs	r3, #0
 8002b90:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002b94:	2300      	movs	r3, #0
 8002b96:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ba6:	d102      	bne.n	8002bae <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8002ba8:	4b74      	ldr	r3, [pc, #464]	@ (8002d7c <HAL_ADCEx_MultiModeConfigChannel+0x218>)
 8002baa:	60fb      	str	r3, [r7, #12]
 8002bac:	e009      	b.n	8002bc2 <HAL_ADCEx_MultiModeConfigChannel+0x5e>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a73      	ldr	r2, [pc, #460]	@ (8002d80 <HAL_ADCEx_MultiModeConfigChannel+0x21c>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d102      	bne.n	8002bbe <HAL_ADCEx_MultiModeConfigChannel+0x5a>
 8002bb8:	4b72      	ldr	r3, [pc, #456]	@ (8002d84 <HAL_ADCEx_MultiModeConfigChannel+0x220>)
 8002bba:	60fb      	str	r3, [r7, #12]
 8002bbc:	e001      	b.n	8002bc2 <HAL_ADCEx_MultiModeConfigChannel+0x5e>
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d10b      	bne.n	8002be0 <HAL_ADCEx_MultiModeConfigChannel+0x7c>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bcc:	f043 0220 	orr.w	r2, r3, #32
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e0c9      	b.n	8002d74 <HAL_ADCEx_MultiModeConfigChannel+0x210>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7ff ff79 	bl	8002ada <LL_ADC_REG_IsConversionOngoing>
 8002be8:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f7ff ff72 	bl	8002ada <LL_ADC_REG_IsConversionOngoing>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	f040 80aa 	bne.w	8002d52 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002bfe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	f040 80a5 	bne.w	8002d52 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c10:	d004      	beq.n	8002c1c <HAL_ADCEx_MultiModeConfigChannel+0xb8>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a59      	ldr	r2, [pc, #356]	@ (8002d7c <HAL_ADCEx_MultiModeConfigChannel+0x218>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d101      	bne.n	8002c20 <HAL_ADCEx_MultiModeConfigChannel+0xbc>
 8002c1c:	4b5a      	ldr	r3, [pc, #360]	@ (8002d88 <HAL_ADCEx_MultiModeConfigChannel+0x224>)
 8002c1e:	e000      	b.n	8002c22 <HAL_ADCEx_MultiModeConfigChannel+0xbe>
 8002c20:	4b5a      	ldr	r3, [pc, #360]	@ (8002d8c <HAL_ADCEx_MultiModeConfigChannel+0x228>)
 8002c22:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d04f      	beq.n	8002cce <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002c2e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	6859      	ldr	r1, [r3, #4]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002c42:	035b      	lsls	r3, r3, #13
 8002c44:	430b      	orrs	r3, r1
 8002c46:	431a      	orrs	r2, r3
 8002c48:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002c4c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c56:	d004      	beq.n	8002c62 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a47      	ldr	r2, [pc, #284]	@ (8002d7c <HAL_ADCEx_MultiModeConfigChannel+0x218>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d10f      	bne.n	8002c82 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
 8002c62:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002c66:	f7ff ff25 	bl	8002ab4 <LL_ADC_IsEnabled>
 8002c6a:	4604      	mov	r4, r0
 8002c6c:	4843      	ldr	r0, [pc, #268]	@ (8002d7c <HAL_ADCEx_MultiModeConfigChannel+0x218>)
 8002c6e:	f7ff ff21 	bl	8002ab4 <LL_ADC_IsEnabled>
 8002c72:	4603      	mov	r3, r0
 8002c74:	4323      	orrs	r3, r4
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	bf0c      	ite	eq
 8002c7a:	2301      	moveq	r3, #1
 8002c7c:	2300      	movne	r3, #0
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	e012      	b.n	8002ca8 <HAL_ADCEx_MultiModeConfigChannel+0x144>
 8002c82:	483f      	ldr	r0, [pc, #252]	@ (8002d80 <HAL_ADCEx_MultiModeConfigChannel+0x21c>)
 8002c84:	f7ff ff16 	bl	8002ab4 <LL_ADC_IsEnabled>
 8002c88:	4604      	mov	r4, r0
 8002c8a:	483e      	ldr	r0, [pc, #248]	@ (8002d84 <HAL_ADCEx_MultiModeConfigChannel+0x220>)
 8002c8c:	f7ff ff12 	bl	8002ab4 <LL_ADC_IsEnabled>
 8002c90:	4603      	mov	r3, r0
 8002c92:	431c      	orrs	r4, r3
 8002c94:	483e      	ldr	r0, [pc, #248]	@ (8002d90 <HAL_ADCEx_MultiModeConfigChannel+0x22c>)
 8002c96:	f7ff ff0d 	bl	8002ab4 <LL_ADC_IsEnabled>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	4323      	orrs	r3, r4
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	bf0c      	ite	eq
 8002ca2:	2301      	moveq	r3, #1
 8002ca4:	2300      	movne	r3, #0
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d05c      	beq.n	8002d66 <HAL_ADCEx_MultiModeConfigChannel+0x202>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002cac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002cb6:	f023 030f 	bic.w	r3, r3, #15
 8002cba:	683a      	ldr	r2, [r7, #0]
 8002cbc:	6811      	ldr	r1, [r2, #0]
 8002cbe:	683a      	ldr	r2, [r7, #0]
 8002cc0:	6892      	ldr	r2, [r2, #8]
 8002cc2:	430a      	orrs	r2, r1
 8002cc4:	431a      	orrs	r2, r3
 8002cc6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002cca:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002ccc:	e04b      	b.n	8002d66 <HAL_ADCEx_MultiModeConfigChannel+0x202>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002cce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002cd8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002cdc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ce6:	d004      	beq.n	8002cf2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a23      	ldr	r2, [pc, #140]	@ (8002d7c <HAL_ADCEx_MultiModeConfigChannel+0x218>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d10f      	bne.n	8002d12 <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
 8002cf2:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002cf6:	f7ff fedd 	bl	8002ab4 <LL_ADC_IsEnabled>
 8002cfa:	4604      	mov	r4, r0
 8002cfc:	481f      	ldr	r0, [pc, #124]	@ (8002d7c <HAL_ADCEx_MultiModeConfigChannel+0x218>)
 8002cfe:	f7ff fed9 	bl	8002ab4 <LL_ADC_IsEnabled>
 8002d02:	4603      	mov	r3, r0
 8002d04:	4323      	orrs	r3, r4
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	bf0c      	ite	eq
 8002d0a:	2301      	moveq	r3, #1
 8002d0c:	2300      	movne	r3, #0
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	e012      	b.n	8002d38 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>
 8002d12:	481b      	ldr	r0, [pc, #108]	@ (8002d80 <HAL_ADCEx_MultiModeConfigChannel+0x21c>)
 8002d14:	f7ff fece 	bl	8002ab4 <LL_ADC_IsEnabled>
 8002d18:	4604      	mov	r4, r0
 8002d1a:	481a      	ldr	r0, [pc, #104]	@ (8002d84 <HAL_ADCEx_MultiModeConfigChannel+0x220>)
 8002d1c:	f7ff feca 	bl	8002ab4 <LL_ADC_IsEnabled>
 8002d20:	4603      	mov	r3, r0
 8002d22:	431c      	orrs	r4, r3
 8002d24:	481a      	ldr	r0, [pc, #104]	@ (8002d90 <HAL_ADCEx_MultiModeConfigChannel+0x22c>)
 8002d26:	f7ff fec5 	bl	8002ab4 <LL_ADC_IsEnabled>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	4323      	orrs	r3, r4
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	bf0c      	ite	eq
 8002d32:	2301      	moveq	r3, #1
 8002d34:	2300      	movne	r3, #0
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d014      	beq.n	8002d66 <HAL_ADCEx_MultiModeConfigChannel+0x202>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002d3c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002d46:	f023 030f 	bic.w	r3, r3, #15
 8002d4a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8002d4e:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002d50:	e009      	b.n	8002d66 <HAL_ADCEx_MultiModeConfigChannel+0x202>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d56:	f043 0220 	orr.w	r2, r3, #32
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
 8002d64:	e000      	b.n	8002d68 <HAL_ADCEx_MultiModeConfigChannel+0x204>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002d66:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002d70:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	37b4      	adds	r7, #180	@ 0xb4
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd90      	pop	{r4, r7, pc}
 8002d7c:	50000100 	.word	0x50000100
 8002d80:	50000400 	.word	0x50000400
 8002d84:	50000500 	.word	0x50000500
 8002d88:	50000300 	.word	0x50000300
 8002d8c:	50000700 	.word	0x50000700
 8002d90:	50000600 	.word	0x50000600

08002d94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b085      	sub	sp, #20
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f003 0307 	and.w	r3, r3, #7
 8002da2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002da4:	4b0c      	ldr	r3, [pc, #48]	@ (8002dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002daa:	68ba      	ldr	r2, [r7, #8]
 8002dac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002db0:	4013      	ands	r3, r2
 8002db2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002dbc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002dc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002dc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dc6:	4a04      	ldr	r2, [pc, #16]	@ (8002dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	60d3      	str	r3, [r2, #12]
}
 8002dcc:	bf00      	nop
 8002dce:	3714      	adds	r7, #20
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr
 8002dd8:	e000ed00 	.word	0xe000ed00

08002ddc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002de0:	4b04      	ldr	r3, [pc, #16]	@ (8002df4 <__NVIC_GetPriorityGrouping+0x18>)
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	0a1b      	lsrs	r3, r3, #8
 8002de6:	f003 0307 	and.w	r3, r3, #7
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr
 8002df4:	e000ed00 	.word	0xe000ed00

08002df8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	4603      	mov	r3, r0
 8002e00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	db0b      	blt.n	8002e22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e0a:	79fb      	ldrb	r3, [r7, #7]
 8002e0c:	f003 021f 	and.w	r2, r3, #31
 8002e10:	4907      	ldr	r1, [pc, #28]	@ (8002e30 <__NVIC_EnableIRQ+0x38>)
 8002e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e16:	095b      	lsrs	r3, r3, #5
 8002e18:	2001      	movs	r0, #1
 8002e1a:	fa00 f202 	lsl.w	r2, r0, r2
 8002e1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e22:	bf00      	nop
 8002e24:	370c      	adds	r7, #12
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	e000e100 	.word	0xe000e100

08002e34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	6039      	str	r1, [r7, #0]
 8002e3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	db0a      	blt.n	8002e5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	b2da      	uxtb	r2, r3
 8002e4c:	490c      	ldr	r1, [pc, #48]	@ (8002e80 <__NVIC_SetPriority+0x4c>)
 8002e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e52:	0112      	lsls	r2, r2, #4
 8002e54:	b2d2      	uxtb	r2, r2
 8002e56:	440b      	add	r3, r1
 8002e58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e5c:	e00a      	b.n	8002e74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	b2da      	uxtb	r2, r3
 8002e62:	4908      	ldr	r1, [pc, #32]	@ (8002e84 <__NVIC_SetPriority+0x50>)
 8002e64:	79fb      	ldrb	r3, [r7, #7]
 8002e66:	f003 030f 	and.w	r3, r3, #15
 8002e6a:	3b04      	subs	r3, #4
 8002e6c:	0112      	lsls	r2, r2, #4
 8002e6e:	b2d2      	uxtb	r2, r2
 8002e70:	440b      	add	r3, r1
 8002e72:	761a      	strb	r2, [r3, #24]
}
 8002e74:	bf00      	nop
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr
 8002e80:	e000e100 	.word	0xe000e100
 8002e84:	e000ed00 	.word	0xe000ed00

08002e88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b089      	sub	sp, #36	@ 0x24
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	60b9      	str	r1, [r7, #8]
 8002e92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f003 0307 	and.w	r3, r3, #7
 8002e9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	f1c3 0307 	rsb	r3, r3, #7
 8002ea2:	2b04      	cmp	r3, #4
 8002ea4:	bf28      	it	cs
 8002ea6:	2304      	movcs	r3, #4
 8002ea8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	3304      	adds	r3, #4
 8002eae:	2b06      	cmp	r3, #6
 8002eb0:	d902      	bls.n	8002eb8 <NVIC_EncodePriority+0x30>
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	3b03      	subs	r3, #3
 8002eb6:	e000      	b.n	8002eba <NVIC_EncodePriority+0x32>
 8002eb8:	2300      	movs	r3, #0
 8002eba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ebc:	f04f 32ff 	mov.w	r2, #4294967295
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec6:	43da      	mvns	r2, r3
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	401a      	ands	r2, r3
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ed0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eda:	43d9      	mvns	r1, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ee0:	4313      	orrs	r3, r2
         );
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3724      	adds	r7, #36	@ 0x24
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr
	...

08002ef0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	3b01      	subs	r3, #1
 8002efc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f00:	d301      	bcc.n	8002f06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f02:	2301      	movs	r3, #1
 8002f04:	e00f      	b.n	8002f26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f06:	4a0a      	ldr	r2, [pc, #40]	@ (8002f30 <SysTick_Config+0x40>)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	3b01      	subs	r3, #1
 8002f0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f0e:	210f      	movs	r1, #15
 8002f10:	f04f 30ff 	mov.w	r0, #4294967295
 8002f14:	f7ff ff8e 	bl	8002e34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f18:	4b05      	ldr	r3, [pc, #20]	@ (8002f30 <SysTick_Config+0x40>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f1e:	4b04      	ldr	r3, [pc, #16]	@ (8002f30 <SysTick_Config+0x40>)
 8002f20:	2207      	movs	r2, #7
 8002f22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3708      	adds	r7, #8
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	e000e010 	.word	0xe000e010

08002f34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f7ff ff29 	bl	8002d94 <__NVIC_SetPriorityGrouping>
}
 8002f42:	bf00      	nop
 8002f44:	3708      	adds	r7, #8
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}

08002f4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f4a:	b580      	push	{r7, lr}
 8002f4c:	b086      	sub	sp, #24
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	4603      	mov	r3, r0
 8002f52:	60b9      	str	r1, [r7, #8]
 8002f54:	607a      	str	r2, [r7, #4]
 8002f56:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f58:	f7ff ff40 	bl	8002ddc <__NVIC_GetPriorityGrouping>
 8002f5c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	68b9      	ldr	r1, [r7, #8]
 8002f62:	6978      	ldr	r0, [r7, #20]
 8002f64:	f7ff ff90 	bl	8002e88 <NVIC_EncodePriority>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f6e:	4611      	mov	r1, r2
 8002f70:	4618      	mov	r0, r3
 8002f72:	f7ff ff5f 	bl	8002e34 <__NVIC_SetPriority>
}
 8002f76:	bf00      	nop
 8002f78:	3718      	adds	r7, #24
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}

08002f7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f7e:	b580      	push	{r7, lr}
 8002f80:	b082      	sub	sp, #8
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	4603      	mov	r3, r0
 8002f86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7ff ff33 	bl	8002df8 <__NVIC_EnableIRQ>
}
 8002f92:	bf00      	nop
 8002f94:	3708      	adds	r7, #8
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	b082      	sub	sp, #8
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f7ff ffa4 	bl	8002ef0 <SysTick_Config>
 8002fa8:	4603      	mov	r3, r0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3708      	adds	r7, #8
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
	...

08002fb4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d101      	bne.n	8002fc6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e08d      	b.n	80030e2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	461a      	mov	r2, r3
 8002fcc:	4b47      	ldr	r3, [pc, #284]	@ (80030ec <HAL_DMA_Init+0x138>)
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d80f      	bhi.n	8002ff2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	4b45      	ldr	r3, [pc, #276]	@ (80030f0 <HAL_DMA_Init+0x13c>)
 8002fda:	4413      	add	r3, r2
 8002fdc:	4a45      	ldr	r2, [pc, #276]	@ (80030f4 <HAL_DMA_Init+0x140>)
 8002fde:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe2:	091b      	lsrs	r3, r3, #4
 8002fe4:	009a      	lsls	r2, r3, #2
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4a42      	ldr	r2, [pc, #264]	@ (80030f8 <HAL_DMA_Init+0x144>)
 8002fee:	641a      	str	r2, [r3, #64]	@ 0x40
 8002ff0:	e00e      	b.n	8003010 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	4b40      	ldr	r3, [pc, #256]	@ (80030fc <HAL_DMA_Init+0x148>)
 8002ffa:	4413      	add	r3, r2
 8002ffc:	4a3d      	ldr	r2, [pc, #244]	@ (80030f4 <HAL_DMA_Init+0x140>)
 8002ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8003002:	091b      	lsrs	r3, r3, #4
 8003004:	009a      	lsls	r2, r3, #2
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a3c      	ldr	r2, [pc, #240]	@ (8003100 <HAL_DMA_Init+0x14c>)
 800300e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2202      	movs	r2, #2
 8003014:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003026:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800302a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003034:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003040:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	699b      	ldr	r3, [r3, #24]
 8003046:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800304c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6a1b      	ldr	r3, [r3, #32]
 8003052:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003054:	68fa      	ldr	r2, [r7, #12]
 8003056:	4313      	orrs	r3, r2
 8003058:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	68fa      	ldr	r2, [r7, #12]
 8003060:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f000 f964 	bl	8003330 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003070:	d102      	bne.n	8003078 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685a      	ldr	r2, [r3, #4]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003080:	b2d2      	uxtb	r2, r2
 8003082:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800308c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d010      	beq.n	80030b8 <HAL_DMA_Init+0x104>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	2b04      	cmp	r3, #4
 800309c:	d80c      	bhi.n	80030b8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 f984 	bl	80033ac <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030a8:	2200      	movs	r2, #0
 80030aa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80030b4:	605a      	str	r2, [r3, #4]
 80030b6:	e008      	b.n	80030ca <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3710      	adds	r7, #16
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	40020407 	.word	0x40020407
 80030f0:	bffdfff8 	.word	0xbffdfff8
 80030f4:	cccccccd 	.word	0xcccccccd
 80030f8:	40020000 	.word	0x40020000
 80030fc:	bffdfbf8 	.word	0xbffdfbf8
 8003100:	40020400 	.word	0x40020400

08003104 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800310c:	2300      	movs	r3, #0
 800310e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003116:	b2db      	uxtb	r3, r3
 8003118:	2b02      	cmp	r3, #2
 800311a:	d00d      	beq.n	8003138 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2204      	movs	r2, #4
 8003120:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2201      	movs	r2, #1
 8003126:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	73fb      	strb	r3, [r7, #15]
 8003136:	e047      	b.n	80031c8 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f022 020e 	bic.w	r2, r2, #14
 8003146:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f022 0201 	bic.w	r2, r2, #1
 8003156:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003162:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003166:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800316c:	f003 021f 	and.w	r2, r3, #31
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003174:	2101      	movs	r1, #1
 8003176:	fa01 f202 	lsl.w	r2, r1, r2
 800317a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003184:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800318a:	2b00      	cmp	r3, #0
 800318c:	d00c      	beq.n	80031a8 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003198:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800319c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80031a6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d003      	beq.n	80031c8 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	4798      	blx	r3
    }
  }
  return status;
 80031c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3710      	adds	r7, #16
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80031d2:	b580      	push	{r7, lr}
 80031d4:	b084      	sub	sp, #16
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031ee:	f003 031f 	and.w	r3, r3, #31
 80031f2:	2204      	movs	r2, #4
 80031f4:	409a      	lsls	r2, r3
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	4013      	ands	r3, r2
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d026      	beq.n	800324c <HAL_DMA_IRQHandler+0x7a>
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	f003 0304 	and.w	r3, r3, #4
 8003204:	2b00      	cmp	r3, #0
 8003206:	d021      	beq.n	800324c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0320 	and.w	r3, r3, #32
 8003212:	2b00      	cmp	r3, #0
 8003214:	d107      	bne.n	8003226 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f022 0204 	bic.w	r2, r2, #4
 8003224:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800322a:	f003 021f 	and.w	r2, r3, #31
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003232:	2104      	movs	r1, #4
 8003234:	fa01 f202 	lsl.w	r2, r1, r2
 8003238:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800323e:	2b00      	cmp	r3, #0
 8003240:	d071      	beq.n	8003326 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800324a:	e06c      	b.n	8003326 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003250:	f003 031f 	and.w	r3, r3, #31
 8003254:	2202      	movs	r2, #2
 8003256:	409a      	lsls	r2, r3
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	4013      	ands	r3, r2
 800325c:	2b00      	cmp	r3, #0
 800325e:	d02e      	beq.n	80032be <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	f003 0302 	and.w	r3, r3, #2
 8003266:	2b00      	cmp	r3, #0
 8003268:	d029      	beq.n	80032be <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0320 	and.w	r3, r3, #32
 8003274:	2b00      	cmp	r3, #0
 8003276:	d10b      	bne.n	8003290 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f022 020a 	bic.w	r2, r2, #10
 8003286:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003294:	f003 021f 	and.w	r2, r3, #31
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800329c:	2102      	movs	r1, #2
 800329e:	fa01 f202 	lsl.w	r2, r1, r2
 80032a2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d038      	beq.n	8003326 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80032bc:	e033      	b.n	8003326 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032c2:	f003 031f 	and.w	r3, r3, #31
 80032c6:	2208      	movs	r2, #8
 80032c8:	409a      	lsls	r2, r3
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	4013      	ands	r3, r2
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d02a      	beq.n	8003328 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	f003 0308 	and.w	r3, r3, #8
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d025      	beq.n	8003328 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f022 020e 	bic.w	r2, r2, #14
 80032ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032f0:	f003 021f 	and.w	r2, r3, #31
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f8:	2101      	movs	r1, #1
 80032fa:	fa01 f202 	lsl.w	r2, r1, r2
 80032fe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2201      	movs	r2, #1
 800330a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800331a:	2b00      	cmp	r3, #0
 800331c:	d004      	beq.n	8003328 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003326:	bf00      	nop
 8003328:	bf00      	nop
}
 800332a:	3710      	adds	r7, #16
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}

08003330 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003330:	b480      	push	{r7}
 8003332:	b087      	sub	sp, #28
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	461a      	mov	r2, r3
 800333e:	4b16      	ldr	r3, [pc, #88]	@ (8003398 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003340:	429a      	cmp	r2, r3
 8003342:	d802      	bhi.n	800334a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003344:	4b15      	ldr	r3, [pc, #84]	@ (800339c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003346:	617b      	str	r3, [r7, #20]
 8003348:	e001      	b.n	800334e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800334a:	4b15      	ldr	r3, [pc, #84]	@ (80033a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800334c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	b2db      	uxtb	r3, r3
 8003358:	3b08      	subs	r3, #8
 800335a:	4a12      	ldr	r2, [pc, #72]	@ (80033a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800335c:	fba2 2303 	umull	r2, r3, r2, r3
 8003360:	091b      	lsrs	r3, r3, #4
 8003362:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003368:	089b      	lsrs	r3, r3, #2
 800336a:	009a      	lsls	r2, r3, #2
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	4413      	add	r3, r2
 8003370:	461a      	mov	r2, r3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a0b      	ldr	r2, [pc, #44]	@ (80033a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800337a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f003 031f 	and.w	r3, r3, #31
 8003382:	2201      	movs	r2, #1
 8003384:	409a      	lsls	r2, r3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800338a:	bf00      	nop
 800338c:	371c      	adds	r7, #28
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	40020407 	.word	0x40020407
 800339c:	40020800 	.word	0x40020800
 80033a0:	40020820 	.word	0x40020820
 80033a4:	cccccccd 	.word	0xcccccccd
 80033a8:	40020880 	.word	0x40020880

080033ac <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b085      	sub	sp, #20
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80033bc:	68fa      	ldr	r2, [r7, #12]
 80033be:	4b0b      	ldr	r3, [pc, #44]	@ (80033ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80033c0:	4413      	add	r3, r2
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	461a      	mov	r2, r3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a08      	ldr	r2, [pc, #32]	@ (80033f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80033ce:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	3b01      	subs	r3, #1
 80033d4:	f003 031f 	and.w	r3, r3, #31
 80033d8:	2201      	movs	r2, #1
 80033da:	409a      	lsls	r2, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80033e0:	bf00      	nop
 80033e2:	3714      	adds	r7, #20
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr
 80033ec:	1000823f 	.word	0x1000823f
 80033f0:	40020940 	.word	0x40020940

080033f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b087      	sub	sp, #28
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80033fe:	2300      	movs	r3, #0
 8003400:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003402:	e15a      	b.n	80036ba <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	2101      	movs	r1, #1
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	fa01 f303 	lsl.w	r3, r1, r3
 8003410:	4013      	ands	r3, r2
 8003412:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2b00      	cmp	r3, #0
 8003418:	f000 814c 	beq.w	80036b4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f003 0303 	and.w	r3, r3, #3
 8003424:	2b01      	cmp	r3, #1
 8003426:	d005      	beq.n	8003434 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003430:	2b02      	cmp	r3, #2
 8003432:	d130      	bne.n	8003496 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	005b      	lsls	r3, r3, #1
 800343e:	2203      	movs	r2, #3
 8003440:	fa02 f303 	lsl.w	r3, r2, r3
 8003444:	43db      	mvns	r3, r3
 8003446:	693a      	ldr	r2, [r7, #16]
 8003448:	4013      	ands	r3, r2
 800344a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	68da      	ldr	r2, [r3, #12]
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	005b      	lsls	r3, r3, #1
 8003454:	fa02 f303 	lsl.w	r3, r2, r3
 8003458:	693a      	ldr	r2, [r7, #16]
 800345a:	4313      	orrs	r3, r2
 800345c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	693a      	ldr	r2, [r7, #16]
 8003462:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800346a:	2201      	movs	r2, #1
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	fa02 f303 	lsl.w	r3, r2, r3
 8003472:	43db      	mvns	r3, r3
 8003474:	693a      	ldr	r2, [r7, #16]
 8003476:	4013      	ands	r3, r2
 8003478:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	091b      	lsrs	r3, r3, #4
 8003480:	f003 0201 	and.w	r2, r3, #1
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	fa02 f303 	lsl.w	r3, r2, r3
 800348a:	693a      	ldr	r2, [r7, #16]
 800348c:	4313      	orrs	r3, r2
 800348e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	693a      	ldr	r2, [r7, #16]
 8003494:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f003 0303 	and.w	r3, r3, #3
 800349e:	2b03      	cmp	r3, #3
 80034a0:	d017      	beq.n	80034d2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	005b      	lsls	r3, r3, #1
 80034ac:	2203      	movs	r2, #3
 80034ae:	fa02 f303 	lsl.w	r3, r2, r3
 80034b2:	43db      	mvns	r3, r3
 80034b4:	693a      	ldr	r2, [r7, #16]
 80034b6:	4013      	ands	r3, r2
 80034b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	689a      	ldr	r2, [r3, #8]
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	005b      	lsls	r3, r3, #1
 80034c2:	fa02 f303 	lsl.w	r3, r2, r3
 80034c6:	693a      	ldr	r2, [r7, #16]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	693a      	ldr	r2, [r7, #16]
 80034d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	f003 0303 	and.w	r3, r3, #3
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d123      	bne.n	8003526 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	08da      	lsrs	r2, r3, #3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	3208      	adds	r2, #8
 80034e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	f003 0307 	and.w	r3, r3, #7
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	220f      	movs	r2, #15
 80034f6:	fa02 f303 	lsl.w	r3, r2, r3
 80034fa:	43db      	mvns	r3, r3
 80034fc:	693a      	ldr	r2, [r7, #16]
 80034fe:	4013      	ands	r3, r2
 8003500:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	691a      	ldr	r2, [r3, #16]
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	f003 0307 	and.w	r3, r3, #7
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	fa02 f303 	lsl.w	r3, r2, r3
 8003512:	693a      	ldr	r2, [r7, #16]
 8003514:	4313      	orrs	r3, r2
 8003516:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	08da      	lsrs	r2, r3, #3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	3208      	adds	r2, #8
 8003520:	6939      	ldr	r1, [r7, #16]
 8003522:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	005b      	lsls	r3, r3, #1
 8003530:	2203      	movs	r2, #3
 8003532:	fa02 f303 	lsl.w	r3, r2, r3
 8003536:	43db      	mvns	r3, r3
 8003538:	693a      	ldr	r2, [r7, #16]
 800353a:	4013      	ands	r3, r2
 800353c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f003 0203 	and.w	r2, r3, #3
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	005b      	lsls	r3, r3, #1
 800354a:	fa02 f303 	lsl.w	r3, r2, r3
 800354e:	693a      	ldr	r2, [r7, #16]
 8003550:	4313      	orrs	r3, r2
 8003552:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	693a      	ldr	r2, [r7, #16]
 8003558:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003562:	2b00      	cmp	r3, #0
 8003564:	f000 80a6 	beq.w	80036b4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003568:	4b5b      	ldr	r3, [pc, #364]	@ (80036d8 <HAL_GPIO_Init+0x2e4>)
 800356a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800356c:	4a5a      	ldr	r2, [pc, #360]	@ (80036d8 <HAL_GPIO_Init+0x2e4>)
 800356e:	f043 0301 	orr.w	r3, r3, #1
 8003572:	6613      	str	r3, [r2, #96]	@ 0x60
 8003574:	4b58      	ldr	r3, [pc, #352]	@ (80036d8 <HAL_GPIO_Init+0x2e4>)
 8003576:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003578:	f003 0301 	and.w	r3, r3, #1
 800357c:	60bb      	str	r3, [r7, #8]
 800357e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003580:	4a56      	ldr	r2, [pc, #344]	@ (80036dc <HAL_GPIO_Init+0x2e8>)
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	089b      	lsrs	r3, r3, #2
 8003586:	3302      	adds	r3, #2
 8003588:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800358c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	f003 0303 	and.w	r3, r3, #3
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	220f      	movs	r2, #15
 8003598:	fa02 f303 	lsl.w	r3, r2, r3
 800359c:	43db      	mvns	r3, r3
 800359e:	693a      	ldr	r2, [r7, #16]
 80035a0:	4013      	ands	r3, r2
 80035a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80035aa:	d01f      	beq.n	80035ec <HAL_GPIO_Init+0x1f8>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	4a4c      	ldr	r2, [pc, #304]	@ (80036e0 <HAL_GPIO_Init+0x2ec>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d019      	beq.n	80035e8 <HAL_GPIO_Init+0x1f4>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	4a4b      	ldr	r2, [pc, #300]	@ (80036e4 <HAL_GPIO_Init+0x2f0>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d013      	beq.n	80035e4 <HAL_GPIO_Init+0x1f0>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	4a4a      	ldr	r2, [pc, #296]	@ (80036e8 <HAL_GPIO_Init+0x2f4>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d00d      	beq.n	80035e0 <HAL_GPIO_Init+0x1ec>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	4a49      	ldr	r2, [pc, #292]	@ (80036ec <HAL_GPIO_Init+0x2f8>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d007      	beq.n	80035dc <HAL_GPIO_Init+0x1e8>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4a48      	ldr	r2, [pc, #288]	@ (80036f0 <HAL_GPIO_Init+0x2fc>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d101      	bne.n	80035d8 <HAL_GPIO_Init+0x1e4>
 80035d4:	2305      	movs	r3, #5
 80035d6:	e00a      	b.n	80035ee <HAL_GPIO_Init+0x1fa>
 80035d8:	2306      	movs	r3, #6
 80035da:	e008      	b.n	80035ee <HAL_GPIO_Init+0x1fa>
 80035dc:	2304      	movs	r3, #4
 80035de:	e006      	b.n	80035ee <HAL_GPIO_Init+0x1fa>
 80035e0:	2303      	movs	r3, #3
 80035e2:	e004      	b.n	80035ee <HAL_GPIO_Init+0x1fa>
 80035e4:	2302      	movs	r3, #2
 80035e6:	e002      	b.n	80035ee <HAL_GPIO_Init+0x1fa>
 80035e8:	2301      	movs	r3, #1
 80035ea:	e000      	b.n	80035ee <HAL_GPIO_Init+0x1fa>
 80035ec:	2300      	movs	r3, #0
 80035ee:	697a      	ldr	r2, [r7, #20]
 80035f0:	f002 0203 	and.w	r2, r2, #3
 80035f4:	0092      	lsls	r2, r2, #2
 80035f6:	4093      	lsls	r3, r2
 80035f8:	693a      	ldr	r2, [r7, #16]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035fe:	4937      	ldr	r1, [pc, #220]	@ (80036dc <HAL_GPIO_Init+0x2e8>)
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	089b      	lsrs	r3, r3, #2
 8003604:	3302      	adds	r3, #2
 8003606:	693a      	ldr	r2, [r7, #16]
 8003608:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800360c:	4b39      	ldr	r3, [pc, #228]	@ (80036f4 <HAL_GPIO_Init+0x300>)
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	43db      	mvns	r3, r3
 8003616:	693a      	ldr	r2, [r7, #16]
 8003618:	4013      	ands	r3, r2
 800361a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d003      	beq.n	8003630 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003628:	693a      	ldr	r2, [r7, #16]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	4313      	orrs	r3, r2
 800362e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003630:	4a30      	ldr	r2, [pc, #192]	@ (80036f4 <HAL_GPIO_Init+0x300>)
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003636:	4b2f      	ldr	r3, [pc, #188]	@ (80036f4 <HAL_GPIO_Init+0x300>)
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	43db      	mvns	r3, r3
 8003640:	693a      	ldr	r2, [r7, #16]
 8003642:	4013      	ands	r3, r2
 8003644:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d003      	beq.n	800365a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003652:	693a      	ldr	r2, [r7, #16]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	4313      	orrs	r3, r2
 8003658:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800365a:	4a26      	ldr	r2, [pc, #152]	@ (80036f4 <HAL_GPIO_Init+0x300>)
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003660:	4b24      	ldr	r3, [pc, #144]	@ (80036f4 <HAL_GPIO_Init+0x300>)
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	43db      	mvns	r3, r3
 800366a:	693a      	ldr	r2, [r7, #16]
 800366c:	4013      	ands	r3, r2
 800366e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003678:	2b00      	cmp	r3, #0
 800367a:	d003      	beq.n	8003684 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800367c:	693a      	ldr	r2, [r7, #16]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	4313      	orrs	r3, r2
 8003682:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003684:	4a1b      	ldr	r2, [pc, #108]	@ (80036f4 <HAL_GPIO_Init+0x300>)
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800368a:	4b1a      	ldr	r3, [pc, #104]	@ (80036f4 <HAL_GPIO_Init+0x300>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	43db      	mvns	r3, r3
 8003694:	693a      	ldr	r2, [r7, #16]
 8003696:	4013      	ands	r3, r2
 8003698:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d003      	beq.n	80036ae <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80036a6:	693a      	ldr	r2, [r7, #16]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80036ae:	4a11      	ldr	r2, [pc, #68]	@ (80036f4 <HAL_GPIO_Init+0x300>)
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	3301      	adds	r3, #1
 80036b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	fa22 f303 	lsr.w	r3, r2, r3
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	f47f ae9d 	bne.w	8003404 <HAL_GPIO_Init+0x10>
  }
}
 80036ca:	bf00      	nop
 80036cc:	bf00      	nop
 80036ce:	371c      	adds	r7, #28
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr
 80036d8:	40021000 	.word	0x40021000
 80036dc:	40010000 	.word	0x40010000
 80036e0:	48000400 	.word	0x48000400
 80036e4:	48000800 	.word	0x48000800
 80036e8:	48000c00 	.word	0x48000c00
 80036ec:	48001000 	.word	0x48001000
 80036f0:	48001400 	.word	0x48001400
 80036f4:	40010400 	.word	0x40010400

080036f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b085      	sub	sp, #20
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	460b      	mov	r3, r1
 8003702:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	691a      	ldr	r2, [r3, #16]
 8003708:	887b      	ldrh	r3, [r7, #2]
 800370a:	4013      	ands	r3, r2
 800370c:	2b00      	cmp	r3, #0
 800370e:	d002      	beq.n	8003716 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003710:	2301      	movs	r3, #1
 8003712:	73fb      	strb	r3, [r7, #15]
 8003714:	e001      	b.n	800371a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003716:	2300      	movs	r3, #0
 8003718:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800371a:	7bfb      	ldrb	r3, [r7, #15]
}
 800371c:	4618      	mov	r0, r3
 800371e:	3714      	adds	r7, #20
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr

08003728 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	460b      	mov	r3, r1
 8003732:	807b      	strh	r3, [r7, #2]
 8003734:	4613      	mov	r3, r2
 8003736:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003738:	787b      	ldrb	r3, [r7, #1]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d003      	beq.n	8003746 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800373e:	887a      	ldrh	r2, [r7, #2]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003744:	e002      	b.n	800374c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003746:	887a      	ldrh	r2, [r7, #2]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800374c:	bf00      	nop
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
 800375e:	4603      	mov	r3, r0
 8003760:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003762:	4b08      	ldr	r3, [pc, #32]	@ (8003784 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003764:	695a      	ldr	r2, [r3, #20]
 8003766:	88fb      	ldrh	r3, [r7, #6]
 8003768:	4013      	ands	r3, r2
 800376a:	2b00      	cmp	r3, #0
 800376c:	d006      	beq.n	800377c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800376e:	4a05      	ldr	r2, [pc, #20]	@ (8003784 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003770:	88fb      	ldrh	r3, [r7, #6]
 8003772:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003774:	88fb      	ldrh	r3, [r7, #6]
 8003776:	4618      	mov	r0, r3
 8003778:	f000 f806 	bl	8003788 <HAL_GPIO_EXTI_Callback>
  }
}
 800377c:	bf00      	nop
 800377e:	3708      	adds	r7, #8
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	40010400 	.word	0x40010400

08003788 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	4603      	mov	r3, r0
 8003790:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003792:	bf00      	nop
 8003794:	370c      	adds	r7, #12
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
	...

080037a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b085      	sub	sp, #20
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d141      	bne.n	8003832 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80037ae:	4b4b      	ldr	r3, [pc, #300]	@ (80038dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80037b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037ba:	d131      	bne.n	8003820 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80037bc:	4b47      	ldr	r3, [pc, #284]	@ (80038dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80037c2:	4a46      	ldr	r2, [pc, #280]	@ (80038dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80037c8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80037cc:	4b43      	ldr	r3, [pc, #268]	@ (80038dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80037d4:	4a41      	ldr	r2, [pc, #260]	@ (80038dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80037da:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80037dc:	4b40      	ldr	r3, [pc, #256]	@ (80038e0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2232      	movs	r2, #50	@ 0x32
 80037e2:	fb02 f303 	mul.w	r3, r2, r3
 80037e6:	4a3f      	ldr	r2, [pc, #252]	@ (80038e4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80037e8:	fba2 2303 	umull	r2, r3, r2, r3
 80037ec:	0c9b      	lsrs	r3, r3, #18
 80037ee:	3301      	adds	r3, #1
 80037f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037f2:	e002      	b.n	80037fa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	3b01      	subs	r3, #1
 80037f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037fa:	4b38      	ldr	r3, [pc, #224]	@ (80038dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037fc:	695b      	ldr	r3, [r3, #20]
 80037fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003802:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003806:	d102      	bne.n	800380e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d1f2      	bne.n	80037f4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800380e:	4b33      	ldr	r3, [pc, #204]	@ (80038dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003810:	695b      	ldr	r3, [r3, #20]
 8003812:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003816:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800381a:	d158      	bne.n	80038ce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800381c:	2303      	movs	r3, #3
 800381e:	e057      	b.n	80038d0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003820:	4b2e      	ldr	r3, [pc, #184]	@ (80038dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003822:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003826:	4a2d      	ldr	r2, [pc, #180]	@ (80038dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003828:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800382c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003830:	e04d      	b.n	80038ce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003838:	d141      	bne.n	80038be <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800383a:	4b28      	ldr	r3, [pc, #160]	@ (80038dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003842:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003846:	d131      	bne.n	80038ac <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003848:	4b24      	ldr	r3, [pc, #144]	@ (80038dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800384a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800384e:	4a23      	ldr	r2, [pc, #140]	@ (80038dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003850:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003854:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003858:	4b20      	ldr	r3, [pc, #128]	@ (80038dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003860:	4a1e      	ldr	r2, [pc, #120]	@ (80038dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003862:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003866:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003868:	4b1d      	ldr	r3, [pc, #116]	@ (80038e0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	2232      	movs	r2, #50	@ 0x32
 800386e:	fb02 f303 	mul.w	r3, r2, r3
 8003872:	4a1c      	ldr	r2, [pc, #112]	@ (80038e4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003874:	fba2 2303 	umull	r2, r3, r2, r3
 8003878:	0c9b      	lsrs	r3, r3, #18
 800387a:	3301      	adds	r3, #1
 800387c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800387e:	e002      	b.n	8003886 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	3b01      	subs	r3, #1
 8003884:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003886:	4b15      	ldr	r3, [pc, #84]	@ (80038dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003888:	695b      	ldr	r3, [r3, #20]
 800388a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800388e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003892:	d102      	bne.n	800389a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d1f2      	bne.n	8003880 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800389a:	4b10      	ldr	r3, [pc, #64]	@ (80038dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800389c:	695b      	ldr	r3, [r3, #20]
 800389e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038a6:	d112      	bne.n	80038ce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80038a8:	2303      	movs	r3, #3
 80038aa:	e011      	b.n	80038d0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80038ac:	4b0b      	ldr	r3, [pc, #44]	@ (80038dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038b2:	4a0a      	ldr	r2, [pc, #40]	@ (80038dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038b8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80038bc:	e007      	b.n	80038ce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80038be:	4b07      	ldr	r3, [pc, #28]	@ (80038dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80038c6:	4a05      	ldr	r2, [pc, #20]	@ (80038dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038c8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80038cc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80038ce:	2300      	movs	r3, #0
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3714      	adds	r7, #20
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr
 80038dc:	40007000 	.word	0x40007000
 80038e0:	20000000 	.word	0x20000000
 80038e4:	431bde83 	.word	0x431bde83

080038e8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80038e8:	b480      	push	{r7}
 80038ea:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80038ec:	4b05      	ldr	r3, [pc, #20]	@ (8003904 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	4a04      	ldr	r2, [pc, #16]	@ (8003904 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80038f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80038f6:	6093      	str	r3, [r2, #8]
}
 80038f8:	bf00      	nop
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr
 8003902:	bf00      	nop
 8003904:	40007000 	.word	0x40007000

08003908 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b088      	sub	sp, #32
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d101      	bne.n	800391a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e2fe      	b.n	8003f18 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0301 	and.w	r3, r3, #1
 8003922:	2b00      	cmp	r3, #0
 8003924:	d075      	beq.n	8003a12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003926:	4b97      	ldr	r3, [pc, #604]	@ (8003b84 <HAL_RCC_OscConfig+0x27c>)
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	f003 030c 	and.w	r3, r3, #12
 800392e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003930:	4b94      	ldr	r3, [pc, #592]	@ (8003b84 <HAL_RCC_OscConfig+0x27c>)
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	f003 0303 	and.w	r3, r3, #3
 8003938:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800393a:	69bb      	ldr	r3, [r7, #24]
 800393c:	2b0c      	cmp	r3, #12
 800393e:	d102      	bne.n	8003946 <HAL_RCC_OscConfig+0x3e>
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	2b03      	cmp	r3, #3
 8003944:	d002      	beq.n	800394c <HAL_RCC_OscConfig+0x44>
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	2b08      	cmp	r3, #8
 800394a:	d10b      	bne.n	8003964 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800394c:	4b8d      	ldr	r3, [pc, #564]	@ (8003b84 <HAL_RCC_OscConfig+0x27c>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d05b      	beq.n	8003a10 <HAL_RCC_OscConfig+0x108>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d157      	bne.n	8003a10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e2d9      	b.n	8003f18 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800396c:	d106      	bne.n	800397c <HAL_RCC_OscConfig+0x74>
 800396e:	4b85      	ldr	r3, [pc, #532]	@ (8003b84 <HAL_RCC_OscConfig+0x27c>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a84      	ldr	r2, [pc, #528]	@ (8003b84 <HAL_RCC_OscConfig+0x27c>)
 8003974:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003978:	6013      	str	r3, [r2, #0]
 800397a:	e01d      	b.n	80039b8 <HAL_RCC_OscConfig+0xb0>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003984:	d10c      	bne.n	80039a0 <HAL_RCC_OscConfig+0x98>
 8003986:	4b7f      	ldr	r3, [pc, #508]	@ (8003b84 <HAL_RCC_OscConfig+0x27c>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a7e      	ldr	r2, [pc, #504]	@ (8003b84 <HAL_RCC_OscConfig+0x27c>)
 800398c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003990:	6013      	str	r3, [r2, #0]
 8003992:	4b7c      	ldr	r3, [pc, #496]	@ (8003b84 <HAL_RCC_OscConfig+0x27c>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a7b      	ldr	r2, [pc, #492]	@ (8003b84 <HAL_RCC_OscConfig+0x27c>)
 8003998:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800399c:	6013      	str	r3, [r2, #0]
 800399e:	e00b      	b.n	80039b8 <HAL_RCC_OscConfig+0xb0>
 80039a0:	4b78      	ldr	r3, [pc, #480]	@ (8003b84 <HAL_RCC_OscConfig+0x27c>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a77      	ldr	r2, [pc, #476]	@ (8003b84 <HAL_RCC_OscConfig+0x27c>)
 80039a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039aa:	6013      	str	r3, [r2, #0]
 80039ac:	4b75      	ldr	r3, [pc, #468]	@ (8003b84 <HAL_RCC_OscConfig+0x27c>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a74      	ldr	r2, [pc, #464]	@ (8003b84 <HAL_RCC_OscConfig+0x27c>)
 80039b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d013      	beq.n	80039e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039c0:	f7fd fd66 	bl	8001490 <HAL_GetTick>
 80039c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039c6:	e008      	b.n	80039da <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039c8:	f7fd fd62 	bl	8001490 <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	2b64      	cmp	r3, #100	@ 0x64
 80039d4:	d901      	bls.n	80039da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e29e      	b.n	8003f18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039da:	4b6a      	ldr	r3, [pc, #424]	@ (8003b84 <HAL_RCC_OscConfig+0x27c>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d0f0      	beq.n	80039c8 <HAL_RCC_OscConfig+0xc0>
 80039e6:	e014      	b.n	8003a12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e8:	f7fd fd52 	bl	8001490 <HAL_GetTick>
 80039ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039ee:	e008      	b.n	8003a02 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039f0:	f7fd fd4e 	bl	8001490 <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	2b64      	cmp	r3, #100	@ 0x64
 80039fc:	d901      	bls.n	8003a02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e28a      	b.n	8003f18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a02:	4b60      	ldr	r3, [pc, #384]	@ (8003b84 <HAL_RCC_OscConfig+0x27c>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d1f0      	bne.n	80039f0 <HAL_RCC_OscConfig+0xe8>
 8003a0e:	e000      	b.n	8003a12 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0302 	and.w	r3, r3, #2
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d075      	beq.n	8003b0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a1e:	4b59      	ldr	r3, [pc, #356]	@ (8003b84 <HAL_RCC_OscConfig+0x27c>)
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	f003 030c 	and.w	r3, r3, #12
 8003a26:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a28:	4b56      	ldr	r3, [pc, #344]	@ (8003b84 <HAL_RCC_OscConfig+0x27c>)
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	f003 0303 	and.w	r3, r3, #3
 8003a30:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003a32:	69bb      	ldr	r3, [r7, #24]
 8003a34:	2b0c      	cmp	r3, #12
 8003a36:	d102      	bne.n	8003a3e <HAL_RCC_OscConfig+0x136>
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d002      	beq.n	8003a44 <HAL_RCC_OscConfig+0x13c>
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	2b04      	cmp	r3, #4
 8003a42:	d11f      	bne.n	8003a84 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a44:	4b4f      	ldr	r3, [pc, #316]	@ (8003b84 <HAL_RCC_OscConfig+0x27c>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d005      	beq.n	8003a5c <HAL_RCC_OscConfig+0x154>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d101      	bne.n	8003a5c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e25d      	b.n	8003f18 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a5c:	4b49      	ldr	r3, [pc, #292]	@ (8003b84 <HAL_RCC_OscConfig+0x27c>)
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	691b      	ldr	r3, [r3, #16]
 8003a68:	061b      	lsls	r3, r3, #24
 8003a6a:	4946      	ldr	r1, [pc, #280]	@ (8003b84 <HAL_RCC_OscConfig+0x27c>)
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003a70:	4b45      	ldr	r3, [pc, #276]	@ (8003b88 <HAL_RCC_OscConfig+0x280>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4618      	mov	r0, r3
 8003a76:	f7fd fcbf 	bl	80013f8 <HAL_InitTick>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d043      	beq.n	8003b08 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e249      	b.n	8003f18 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d023      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a8c:	4b3d      	ldr	r3, [pc, #244]	@ (8003b84 <HAL_RCC_OscConfig+0x27c>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a3c      	ldr	r2, [pc, #240]	@ (8003b84 <HAL_RCC_OscConfig+0x27c>)
 8003a92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a98:	f7fd fcfa 	bl	8001490 <HAL_GetTick>
 8003a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a9e:	e008      	b.n	8003ab2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003aa0:	f7fd fcf6 	bl	8001490 <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d901      	bls.n	8003ab2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e232      	b.n	8003f18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ab2:	4b34      	ldr	r3, [pc, #208]	@ (8003b84 <HAL_RCC_OscConfig+0x27c>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d0f0      	beq.n	8003aa0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003abe:	4b31      	ldr	r3, [pc, #196]	@ (8003b84 <HAL_RCC_OscConfig+0x27c>)
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	061b      	lsls	r3, r3, #24
 8003acc:	492d      	ldr	r1, [pc, #180]	@ (8003b84 <HAL_RCC_OscConfig+0x27c>)
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	604b      	str	r3, [r1, #4]
 8003ad2:	e01a      	b.n	8003b0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ad4:	4b2b      	ldr	r3, [pc, #172]	@ (8003b84 <HAL_RCC_OscConfig+0x27c>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a2a      	ldr	r2, [pc, #168]	@ (8003b84 <HAL_RCC_OscConfig+0x27c>)
 8003ada:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ade:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ae0:	f7fd fcd6 	bl	8001490 <HAL_GetTick>
 8003ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ae6:	e008      	b.n	8003afa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ae8:	f7fd fcd2 	bl	8001490 <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d901      	bls.n	8003afa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e20e      	b.n	8003f18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003afa:	4b22      	ldr	r3, [pc, #136]	@ (8003b84 <HAL_RCC_OscConfig+0x27c>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d1f0      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x1e0>
 8003b06:	e000      	b.n	8003b0a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b08:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0308 	and.w	r3, r3, #8
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d041      	beq.n	8003b9a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	695b      	ldr	r3, [r3, #20]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d01c      	beq.n	8003b58 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b1e:	4b19      	ldr	r3, [pc, #100]	@ (8003b84 <HAL_RCC_OscConfig+0x27c>)
 8003b20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b24:	4a17      	ldr	r2, [pc, #92]	@ (8003b84 <HAL_RCC_OscConfig+0x27c>)
 8003b26:	f043 0301 	orr.w	r3, r3, #1
 8003b2a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b2e:	f7fd fcaf 	bl	8001490 <HAL_GetTick>
 8003b32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b34:	e008      	b.n	8003b48 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b36:	f7fd fcab 	bl	8001490 <HAL_GetTick>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d901      	bls.n	8003b48 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	e1e7      	b.n	8003f18 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b48:	4b0e      	ldr	r3, [pc, #56]	@ (8003b84 <HAL_RCC_OscConfig+0x27c>)
 8003b4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b4e:	f003 0302 	and.w	r3, r3, #2
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d0ef      	beq.n	8003b36 <HAL_RCC_OscConfig+0x22e>
 8003b56:	e020      	b.n	8003b9a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b58:	4b0a      	ldr	r3, [pc, #40]	@ (8003b84 <HAL_RCC_OscConfig+0x27c>)
 8003b5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b5e:	4a09      	ldr	r2, [pc, #36]	@ (8003b84 <HAL_RCC_OscConfig+0x27c>)
 8003b60:	f023 0301 	bic.w	r3, r3, #1
 8003b64:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b68:	f7fd fc92 	bl	8001490 <HAL_GetTick>
 8003b6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b6e:	e00d      	b.n	8003b8c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b70:	f7fd fc8e 	bl	8001490 <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	2b02      	cmp	r3, #2
 8003b7c:	d906      	bls.n	8003b8c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e1ca      	b.n	8003f18 <HAL_RCC_OscConfig+0x610>
 8003b82:	bf00      	nop
 8003b84:	40021000 	.word	0x40021000
 8003b88:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b8c:	4b8c      	ldr	r3, [pc, #560]	@ (8003dc0 <HAL_RCC_OscConfig+0x4b8>)
 8003b8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b92:	f003 0302 	and.w	r3, r3, #2
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d1ea      	bne.n	8003b70 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0304 	and.w	r3, r3, #4
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	f000 80a6 	beq.w	8003cf4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003bac:	4b84      	ldr	r3, [pc, #528]	@ (8003dc0 <HAL_RCC_OscConfig+0x4b8>)
 8003bae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d101      	bne.n	8003bbc <HAL_RCC_OscConfig+0x2b4>
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e000      	b.n	8003bbe <HAL_RCC_OscConfig+0x2b6>
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d00d      	beq.n	8003bde <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bc2:	4b7f      	ldr	r3, [pc, #508]	@ (8003dc0 <HAL_RCC_OscConfig+0x4b8>)
 8003bc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bc6:	4a7e      	ldr	r2, [pc, #504]	@ (8003dc0 <HAL_RCC_OscConfig+0x4b8>)
 8003bc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bcc:	6593      	str	r3, [r2, #88]	@ 0x58
 8003bce:	4b7c      	ldr	r3, [pc, #496]	@ (8003dc0 <HAL_RCC_OscConfig+0x4b8>)
 8003bd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bd6:	60fb      	str	r3, [r7, #12]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bde:	4b79      	ldr	r3, [pc, #484]	@ (8003dc4 <HAL_RCC_OscConfig+0x4bc>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d118      	bne.n	8003c1c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bea:	4b76      	ldr	r3, [pc, #472]	@ (8003dc4 <HAL_RCC_OscConfig+0x4bc>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a75      	ldr	r2, [pc, #468]	@ (8003dc4 <HAL_RCC_OscConfig+0x4bc>)
 8003bf0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bf4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bf6:	f7fd fc4b 	bl	8001490 <HAL_GetTick>
 8003bfa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bfc:	e008      	b.n	8003c10 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bfe:	f7fd fc47 	bl	8001490 <HAL_GetTick>
 8003c02:	4602      	mov	r2, r0
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	2b02      	cmp	r3, #2
 8003c0a:	d901      	bls.n	8003c10 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003c0c:	2303      	movs	r3, #3
 8003c0e:	e183      	b.n	8003f18 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c10:	4b6c      	ldr	r3, [pc, #432]	@ (8003dc4 <HAL_RCC_OscConfig+0x4bc>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d0f0      	beq.n	8003bfe <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d108      	bne.n	8003c36 <HAL_RCC_OscConfig+0x32e>
 8003c24:	4b66      	ldr	r3, [pc, #408]	@ (8003dc0 <HAL_RCC_OscConfig+0x4b8>)
 8003c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c2a:	4a65      	ldr	r2, [pc, #404]	@ (8003dc0 <HAL_RCC_OscConfig+0x4b8>)
 8003c2c:	f043 0301 	orr.w	r3, r3, #1
 8003c30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003c34:	e024      	b.n	8003c80 <HAL_RCC_OscConfig+0x378>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	2b05      	cmp	r3, #5
 8003c3c:	d110      	bne.n	8003c60 <HAL_RCC_OscConfig+0x358>
 8003c3e:	4b60      	ldr	r3, [pc, #384]	@ (8003dc0 <HAL_RCC_OscConfig+0x4b8>)
 8003c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c44:	4a5e      	ldr	r2, [pc, #376]	@ (8003dc0 <HAL_RCC_OscConfig+0x4b8>)
 8003c46:	f043 0304 	orr.w	r3, r3, #4
 8003c4a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003c4e:	4b5c      	ldr	r3, [pc, #368]	@ (8003dc0 <HAL_RCC_OscConfig+0x4b8>)
 8003c50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c54:	4a5a      	ldr	r2, [pc, #360]	@ (8003dc0 <HAL_RCC_OscConfig+0x4b8>)
 8003c56:	f043 0301 	orr.w	r3, r3, #1
 8003c5a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003c5e:	e00f      	b.n	8003c80 <HAL_RCC_OscConfig+0x378>
 8003c60:	4b57      	ldr	r3, [pc, #348]	@ (8003dc0 <HAL_RCC_OscConfig+0x4b8>)
 8003c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c66:	4a56      	ldr	r2, [pc, #344]	@ (8003dc0 <HAL_RCC_OscConfig+0x4b8>)
 8003c68:	f023 0301 	bic.w	r3, r3, #1
 8003c6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003c70:	4b53      	ldr	r3, [pc, #332]	@ (8003dc0 <HAL_RCC_OscConfig+0x4b8>)
 8003c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c76:	4a52      	ldr	r2, [pc, #328]	@ (8003dc0 <HAL_RCC_OscConfig+0x4b8>)
 8003c78:	f023 0304 	bic.w	r3, r3, #4
 8003c7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d016      	beq.n	8003cb6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c88:	f7fd fc02 	bl	8001490 <HAL_GetTick>
 8003c8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c8e:	e00a      	b.n	8003ca6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c90:	f7fd fbfe 	bl	8001490 <HAL_GetTick>
 8003c94:	4602      	mov	r2, r0
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d901      	bls.n	8003ca6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	e138      	b.n	8003f18 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ca6:	4b46      	ldr	r3, [pc, #280]	@ (8003dc0 <HAL_RCC_OscConfig+0x4b8>)
 8003ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cac:	f003 0302 	and.w	r3, r3, #2
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d0ed      	beq.n	8003c90 <HAL_RCC_OscConfig+0x388>
 8003cb4:	e015      	b.n	8003ce2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cb6:	f7fd fbeb 	bl	8001490 <HAL_GetTick>
 8003cba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003cbc:	e00a      	b.n	8003cd4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cbe:	f7fd fbe7 	bl	8001490 <HAL_GetTick>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d901      	bls.n	8003cd4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	e121      	b.n	8003f18 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003cd4:	4b3a      	ldr	r3, [pc, #232]	@ (8003dc0 <HAL_RCC_OscConfig+0x4b8>)
 8003cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cda:	f003 0302 	and.w	r3, r3, #2
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d1ed      	bne.n	8003cbe <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003ce2:	7ffb      	ldrb	r3, [r7, #31]
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d105      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ce8:	4b35      	ldr	r3, [pc, #212]	@ (8003dc0 <HAL_RCC_OscConfig+0x4b8>)
 8003cea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cec:	4a34      	ldr	r2, [pc, #208]	@ (8003dc0 <HAL_RCC_OscConfig+0x4b8>)
 8003cee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003cf2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0320 	and.w	r3, r3, #32
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d03c      	beq.n	8003d7a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	699b      	ldr	r3, [r3, #24]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d01c      	beq.n	8003d42 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003d08:	4b2d      	ldr	r3, [pc, #180]	@ (8003dc0 <HAL_RCC_OscConfig+0x4b8>)
 8003d0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003d0e:	4a2c      	ldr	r2, [pc, #176]	@ (8003dc0 <HAL_RCC_OscConfig+0x4b8>)
 8003d10:	f043 0301 	orr.w	r3, r3, #1
 8003d14:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d18:	f7fd fbba 	bl	8001490 <HAL_GetTick>
 8003d1c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d1e:	e008      	b.n	8003d32 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d20:	f7fd fbb6 	bl	8001490 <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d901      	bls.n	8003d32 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	e0f2      	b.n	8003f18 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d32:	4b23      	ldr	r3, [pc, #140]	@ (8003dc0 <HAL_RCC_OscConfig+0x4b8>)
 8003d34:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003d38:	f003 0302 	and.w	r3, r3, #2
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d0ef      	beq.n	8003d20 <HAL_RCC_OscConfig+0x418>
 8003d40:	e01b      	b.n	8003d7a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003d42:	4b1f      	ldr	r3, [pc, #124]	@ (8003dc0 <HAL_RCC_OscConfig+0x4b8>)
 8003d44:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003d48:	4a1d      	ldr	r2, [pc, #116]	@ (8003dc0 <HAL_RCC_OscConfig+0x4b8>)
 8003d4a:	f023 0301 	bic.w	r3, r3, #1
 8003d4e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d52:	f7fd fb9d 	bl	8001490 <HAL_GetTick>
 8003d56:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d58:	e008      	b.n	8003d6c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d5a:	f7fd fb99 	bl	8001490 <HAL_GetTick>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	2b02      	cmp	r3, #2
 8003d66:	d901      	bls.n	8003d6c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003d68:	2303      	movs	r3, #3
 8003d6a:	e0d5      	b.n	8003f18 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d6c:	4b14      	ldr	r3, [pc, #80]	@ (8003dc0 <HAL_RCC_OscConfig+0x4b8>)
 8003d6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003d72:	f003 0302 	and.w	r3, r3, #2
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d1ef      	bne.n	8003d5a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	69db      	ldr	r3, [r3, #28]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	f000 80c9 	beq.w	8003f16 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d84:	4b0e      	ldr	r3, [pc, #56]	@ (8003dc0 <HAL_RCC_OscConfig+0x4b8>)
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	f003 030c 	and.w	r3, r3, #12
 8003d8c:	2b0c      	cmp	r3, #12
 8003d8e:	f000 8083 	beq.w	8003e98 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	69db      	ldr	r3, [r3, #28]
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d15e      	bne.n	8003e58 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d9a:	4b09      	ldr	r3, [pc, #36]	@ (8003dc0 <HAL_RCC_OscConfig+0x4b8>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a08      	ldr	r2, [pc, #32]	@ (8003dc0 <HAL_RCC_OscConfig+0x4b8>)
 8003da0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003da4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003da6:	f7fd fb73 	bl	8001490 <HAL_GetTick>
 8003daa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003dac:	e00c      	b.n	8003dc8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dae:	f7fd fb6f 	bl	8001490 <HAL_GetTick>
 8003db2:	4602      	mov	r2, r0
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	d905      	bls.n	8003dc8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	e0ab      	b.n	8003f18 <HAL_RCC_OscConfig+0x610>
 8003dc0:	40021000 	.word	0x40021000
 8003dc4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003dc8:	4b55      	ldr	r3, [pc, #340]	@ (8003f20 <HAL_RCC_OscConfig+0x618>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d1ec      	bne.n	8003dae <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003dd4:	4b52      	ldr	r3, [pc, #328]	@ (8003f20 <HAL_RCC_OscConfig+0x618>)
 8003dd6:	68da      	ldr	r2, [r3, #12]
 8003dd8:	4b52      	ldr	r3, [pc, #328]	@ (8003f24 <HAL_RCC_OscConfig+0x61c>)
 8003dda:	4013      	ands	r3, r2
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	6a11      	ldr	r1, [r2, #32]
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003de4:	3a01      	subs	r2, #1
 8003de6:	0112      	lsls	r2, r2, #4
 8003de8:	4311      	orrs	r1, r2
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003dee:	0212      	lsls	r2, r2, #8
 8003df0:	4311      	orrs	r1, r2
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003df6:	0852      	lsrs	r2, r2, #1
 8003df8:	3a01      	subs	r2, #1
 8003dfa:	0552      	lsls	r2, r2, #21
 8003dfc:	4311      	orrs	r1, r2
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003e02:	0852      	lsrs	r2, r2, #1
 8003e04:	3a01      	subs	r2, #1
 8003e06:	0652      	lsls	r2, r2, #25
 8003e08:	4311      	orrs	r1, r2
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003e0e:	06d2      	lsls	r2, r2, #27
 8003e10:	430a      	orrs	r2, r1
 8003e12:	4943      	ldr	r1, [pc, #268]	@ (8003f20 <HAL_RCC_OscConfig+0x618>)
 8003e14:	4313      	orrs	r3, r2
 8003e16:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e18:	4b41      	ldr	r3, [pc, #260]	@ (8003f20 <HAL_RCC_OscConfig+0x618>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a40      	ldr	r2, [pc, #256]	@ (8003f20 <HAL_RCC_OscConfig+0x618>)
 8003e1e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e22:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e24:	4b3e      	ldr	r3, [pc, #248]	@ (8003f20 <HAL_RCC_OscConfig+0x618>)
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	4a3d      	ldr	r2, [pc, #244]	@ (8003f20 <HAL_RCC_OscConfig+0x618>)
 8003e2a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e2e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e30:	f7fd fb2e 	bl	8001490 <HAL_GetTick>
 8003e34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e36:	e008      	b.n	8003e4a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e38:	f7fd fb2a 	bl	8001490 <HAL_GetTick>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	2b02      	cmp	r3, #2
 8003e44:	d901      	bls.n	8003e4a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e066      	b.n	8003f18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e4a:	4b35      	ldr	r3, [pc, #212]	@ (8003f20 <HAL_RCC_OscConfig+0x618>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d0f0      	beq.n	8003e38 <HAL_RCC_OscConfig+0x530>
 8003e56:	e05e      	b.n	8003f16 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e58:	4b31      	ldr	r3, [pc, #196]	@ (8003f20 <HAL_RCC_OscConfig+0x618>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a30      	ldr	r2, [pc, #192]	@ (8003f20 <HAL_RCC_OscConfig+0x618>)
 8003e5e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e64:	f7fd fb14 	bl	8001490 <HAL_GetTick>
 8003e68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e6a:	e008      	b.n	8003e7e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e6c:	f7fd fb10 	bl	8001490 <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	d901      	bls.n	8003e7e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e04c      	b.n	8003f18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e7e:	4b28      	ldr	r3, [pc, #160]	@ (8003f20 <HAL_RCC_OscConfig+0x618>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d1f0      	bne.n	8003e6c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003e8a:	4b25      	ldr	r3, [pc, #148]	@ (8003f20 <HAL_RCC_OscConfig+0x618>)
 8003e8c:	68da      	ldr	r2, [r3, #12]
 8003e8e:	4924      	ldr	r1, [pc, #144]	@ (8003f20 <HAL_RCC_OscConfig+0x618>)
 8003e90:	4b25      	ldr	r3, [pc, #148]	@ (8003f28 <HAL_RCC_OscConfig+0x620>)
 8003e92:	4013      	ands	r3, r2
 8003e94:	60cb      	str	r3, [r1, #12]
 8003e96:	e03e      	b.n	8003f16 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	69db      	ldr	r3, [r3, #28]
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d101      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e039      	b.n	8003f18 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003ea4:	4b1e      	ldr	r3, [pc, #120]	@ (8003f20 <HAL_RCC_OscConfig+0x618>)
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	f003 0203 	and.w	r2, r3, #3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6a1b      	ldr	r3, [r3, #32]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d12c      	bne.n	8003f12 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d123      	bne.n	8003f12 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ed4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d11b      	bne.n	8003f12 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ee4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d113      	bne.n	8003f12 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ef4:	085b      	lsrs	r3, r3, #1
 8003ef6:	3b01      	subs	r3, #1
 8003ef8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d109      	bne.n	8003f12 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f08:	085b      	lsrs	r3, r3, #1
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d001      	beq.n	8003f16 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e000      	b.n	8003f18 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003f16:	2300      	movs	r3, #0
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3720      	adds	r7, #32
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	40021000 	.word	0x40021000
 8003f24:	019f800c 	.word	0x019f800c
 8003f28:	feeefffc 	.word	0xfeeefffc

08003f2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b086      	sub	sp, #24
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003f36:	2300      	movs	r3, #0
 8003f38:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d101      	bne.n	8003f44 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e11e      	b.n	8004182 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f44:	4b91      	ldr	r3, [pc, #580]	@ (800418c <HAL_RCC_ClockConfig+0x260>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 030f 	and.w	r3, r3, #15
 8003f4c:	683a      	ldr	r2, [r7, #0]
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d910      	bls.n	8003f74 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f52:	4b8e      	ldr	r3, [pc, #568]	@ (800418c <HAL_RCC_ClockConfig+0x260>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f023 020f 	bic.w	r2, r3, #15
 8003f5a:	498c      	ldr	r1, [pc, #560]	@ (800418c <HAL_RCC_ClockConfig+0x260>)
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f62:	4b8a      	ldr	r3, [pc, #552]	@ (800418c <HAL_RCC_ClockConfig+0x260>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 030f 	and.w	r3, r3, #15
 8003f6a:	683a      	ldr	r2, [r7, #0]
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d001      	beq.n	8003f74 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e106      	b.n	8004182 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0301 	and.w	r3, r3, #1
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d073      	beq.n	8004068 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	2b03      	cmp	r3, #3
 8003f86:	d129      	bne.n	8003fdc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f88:	4b81      	ldr	r3, [pc, #516]	@ (8004190 <HAL_RCC_ClockConfig+0x264>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d101      	bne.n	8003f98 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e0f4      	b.n	8004182 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003f98:	f000 f99e 	bl	80042d8 <RCC_GetSysClockFreqFromPLLSource>
 8003f9c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	4a7c      	ldr	r2, [pc, #496]	@ (8004194 <HAL_RCC_ClockConfig+0x268>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d93f      	bls.n	8004026 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003fa6:	4b7a      	ldr	r3, [pc, #488]	@ (8004190 <HAL_RCC_ClockConfig+0x264>)
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d009      	beq.n	8003fc6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d033      	beq.n	8004026 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d12f      	bne.n	8004026 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003fc6:	4b72      	ldr	r3, [pc, #456]	@ (8004190 <HAL_RCC_ClockConfig+0x264>)
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003fce:	4a70      	ldr	r2, [pc, #448]	@ (8004190 <HAL_RCC_ClockConfig+0x264>)
 8003fd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fd4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003fd6:	2380      	movs	r3, #128	@ 0x80
 8003fd8:	617b      	str	r3, [r7, #20]
 8003fda:	e024      	b.n	8004026 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	2b02      	cmp	r3, #2
 8003fe2:	d107      	bne.n	8003ff4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fe4:	4b6a      	ldr	r3, [pc, #424]	@ (8004190 <HAL_RCC_ClockConfig+0x264>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d109      	bne.n	8004004 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e0c6      	b.n	8004182 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ff4:	4b66      	ldr	r3, [pc, #408]	@ (8004190 <HAL_RCC_ClockConfig+0x264>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d101      	bne.n	8004004 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e0be      	b.n	8004182 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004004:	f000 f8ce 	bl	80041a4 <HAL_RCC_GetSysClockFreq>
 8004008:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	4a61      	ldr	r2, [pc, #388]	@ (8004194 <HAL_RCC_ClockConfig+0x268>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d909      	bls.n	8004026 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004012:	4b5f      	ldr	r3, [pc, #380]	@ (8004190 <HAL_RCC_ClockConfig+0x264>)
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800401a:	4a5d      	ldr	r2, [pc, #372]	@ (8004190 <HAL_RCC_ClockConfig+0x264>)
 800401c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004020:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004022:	2380      	movs	r3, #128	@ 0x80
 8004024:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004026:	4b5a      	ldr	r3, [pc, #360]	@ (8004190 <HAL_RCC_ClockConfig+0x264>)
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	f023 0203 	bic.w	r2, r3, #3
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	4957      	ldr	r1, [pc, #348]	@ (8004190 <HAL_RCC_ClockConfig+0x264>)
 8004034:	4313      	orrs	r3, r2
 8004036:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004038:	f7fd fa2a 	bl	8001490 <HAL_GetTick>
 800403c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800403e:	e00a      	b.n	8004056 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004040:	f7fd fa26 	bl	8001490 <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800404e:	4293      	cmp	r3, r2
 8004050:	d901      	bls.n	8004056 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e095      	b.n	8004182 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004056:	4b4e      	ldr	r3, [pc, #312]	@ (8004190 <HAL_RCC_ClockConfig+0x264>)
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f003 020c 	and.w	r2, r3, #12
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	429a      	cmp	r2, r3
 8004066:	d1eb      	bne.n	8004040 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 0302 	and.w	r3, r3, #2
 8004070:	2b00      	cmp	r3, #0
 8004072:	d023      	beq.n	80040bc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 0304 	and.w	r3, r3, #4
 800407c:	2b00      	cmp	r3, #0
 800407e:	d005      	beq.n	800408c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004080:	4b43      	ldr	r3, [pc, #268]	@ (8004190 <HAL_RCC_ClockConfig+0x264>)
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	4a42      	ldr	r2, [pc, #264]	@ (8004190 <HAL_RCC_ClockConfig+0x264>)
 8004086:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800408a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0308 	and.w	r3, r3, #8
 8004094:	2b00      	cmp	r3, #0
 8004096:	d007      	beq.n	80040a8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004098:	4b3d      	ldr	r3, [pc, #244]	@ (8004190 <HAL_RCC_ClockConfig+0x264>)
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80040a0:	4a3b      	ldr	r2, [pc, #236]	@ (8004190 <HAL_RCC_ClockConfig+0x264>)
 80040a2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80040a6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040a8:	4b39      	ldr	r3, [pc, #228]	@ (8004190 <HAL_RCC_ClockConfig+0x264>)
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	4936      	ldr	r1, [pc, #216]	@ (8004190 <HAL_RCC_ClockConfig+0x264>)
 80040b6:	4313      	orrs	r3, r2
 80040b8:	608b      	str	r3, [r1, #8]
 80040ba:	e008      	b.n	80040ce <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	2b80      	cmp	r3, #128	@ 0x80
 80040c0:	d105      	bne.n	80040ce <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80040c2:	4b33      	ldr	r3, [pc, #204]	@ (8004190 <HAL_RCC_ClockConfig+0x264>)
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	4a32      	ldr	r2, [pc, #200]	@ (8004190 <HAL_RCC_ClockConfig+0x264>)
 80040c8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80040cc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040ce:	4b2f      	ldr	r3, [pc, #188]	@ (800418c <HAL_RCC_ClockConfig+0x260>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 030f 	and.w	r3, r3, #15
 80040d6:	683a      	ldr	r2, [r7, #0]
 80040d8:	429a      	cmp	r2, r3
 80040da:	d21d      	bcs.n	8004118 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040dc:	4b2b      	ldr	r3, [pc, #172]	@ (800418c <HAL_RCC_ClockConfig+0x260>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f023 020f 	bic.w	r2, r3, #15
 80040e4:	4929      	ldr	r1, [pc, #164]	@ (800418c <HAL_RCC_ClockConfig+0x260>)
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80040ec:	f7fd f9d0 	bl	8001490 <HAL_GetTick>
 80040f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040f2:	e00a      	b.n	800410a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040f4:	f7fd f9cc 	bl	8001490 <HAL_GetTick>
 80040f8:	4602      	mov	r2, r0
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004102:	4293      	cmp	r3, r2
 8004104:	d901      	bls.n	800410a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e03b      	b.n	8004182 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800410a:	4b20      	ldr	r3, [pc, #128]	@ (800418c <HAL_RCC_ClockConfig+0x260>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 030f 	and.w	r3, r3, #15
 8004112:	683a      	ldr	r2, [r7, #0]
 8004114:	429a      	cmp	r2, r3
 8004116:	d1ed      	bne.n	80040f4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0304 	and.w	r3, r3, #4
 8004120:	2b00      	cmp	r3, #0
 8004122:	d008      	beq.n	8004136 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004124:	4b1a      	ldr	r3, [pc, #104]	@ (8004190 <HAL_RCC_ClockConfig+0x264>)
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	4917      	ldr	r1, [pc, #92]	@ (8004190 <HAL_RCC_ClockConfig+0x264>)
 8004132:	4313      	orrs	r3, r2
 8004134:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0308 	and.w	r3, r3, #8
 800413e:	2b00      	cmp	r3, #0
 8004140:	d009      	beq.n	8004156 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004142:	4b13      	ldr	r3, [pc, #76]	@ (8004190 <HAL_RCC_ClockConfig+0x264>)
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	691b      	ldr	r3, [r3, #16]
 800414e:	00db      	lsls	r3, r3, #3
 8004150:	490f      	ldr	r1, [pc, #60]	@ (8004190 <HAL_RCC_ClockConfig+0x264>)
 8004152:	4313      	orrs	r3, r2
 8004154:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004156:	f000 f825 	bl	80041a4 <HAL_RCC_GetSysClockFreq>
 800415a:	4602      	mov	r2, r0
 800415c:	4b0c      	ldr	r3, [pc, #48]	@ (8004190 <HAL_RCC_ClockConfig+0x264>)
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	091b      	lsrs	r3, r3, #4
 8004162:	f003 030f 	and.w	r3, r3, #15
 8004166:	490c      	ldr	r1, [pc, #48]	@ (8004198 <HAL_RCC_ClockConfig+0x26c>)
 8004168:	5ccb      	ldrb	r3, [r1, r3]
 800416a:	f003 031f 	and.w	r3, r3, #31
 800416e:	fa22 f303 	lsr.w	r3, r2, r3
 8004172:	4a0a      	ldr	r2, [pc, #40]	@ (800419c <HAL_RCC_ClockConfig+0x270>)
 8004174:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004176:	4b0a      	ldr	r3, [pc, #40]	@ (80041a0 <HAL_RCC_ClockConfig+0x274>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4618      	mov	r0, r3
 800417c:	f7fd f93c 	bl	80013f8 <HAL_InitTick>
 8004180:	4603      	mov	r3, r0
}
 8004182:	4618      	mov	r0, r3
 8004184:	3718      	adds	r7, #24
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop
 800418c:	40022000 	.word	0x40022000
 8004190:	40021000 	.word	0x40021000
 8004194:	04c4b400 	.word	0x04c4b400
 8004198:	0800699c 	.word	0x0800699c
 800419c:	20000000 	.word	0x20000000
 80041a0:	20000004 	.word	0x20000004

080041a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b087      	sub	sp, #28
 80041a8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80041aa:	4b2c      	ldr	r3, [pc, #176]	@ (800425c <HAL_RCC_GetSysClockFreq+0xb8>)
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	f003 030c 	and.w	r3, r3, #12
 80041b2:	2b04      	cmp	r3, #4
 80041b4:	d102      	bne.n	80041bc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80041b6:	4b2a      	ldr	r3, [pc, #168]	@ (8004260 <HAL_RCC_GetSysClockFreq+0xbc>)
 80041b8:	613b      	str	r3, [r7, #16]
 80041ba:	e047      	b.n	800424c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80041bc:	4b27      	ldr	r3, [pc, #156]	@ (800425c <HAL_RCC_GetSysClockFreq+0xb8>)
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	f003 030c 	and.w	r3, r3, #12
 80041c4:	2b08      	cmp	r3, #8
 80041c6:	d102      	bne.n	80041ce <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80041c8:	4b26      	ldr	r3, [pc, #152]	@ (8004264 <HAL_RCC_GetSysClockFreq+0xc0>)
 80041ca:	613b      	str	r3, [r7, #16]
 80041cc:	e03e      	b.n	800424c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80041ce:	4b23      	ldr	r3, [pc, #140]	@ (800425c <HAL_RCC_GetSysClockFreq+0xb8>)
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f003 030c 	and.w	r3, r3, #12
 80041d6:	2b0c      	cmp	r3, #12
 80041d8:	d136      	bne.n	8004248 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80041da:	4b20      	ldr	r3, [pc, #128]	@ (800425c <HAL_RCC_GetSysClockFreq+0xb8>)
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	f003 0303 	and.w	r3, r3, #3
 80041e2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80041e4:	4b1d      	ldr	r3, [pc, #116]	@ (800425c <HAL_RCC_GetSysClockFreq+0xb8>)
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	091b      	lsrs	r3, r3, #4
 80041ea:	f003 030f 	and.w	r3, r3, #15
 80041ee:	3301      	adds	r3, #1
 80041f0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2b03      	cmp	r3, #3
 80041f6:	d10c      	bne.n	8004212 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80041f8:	4a1a      	ldr	r2, [pc, #104]	@ (8004264 <HAL_RCC_GetSysClockFreq+0xc0>)
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004200:	4a16      	ldr	r2, [pc, #88]	@ (800425c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004202:	68d2      	ldr	r2, [r2, #12]
 8004204:	0a12      	lsrs	r2, r2, #8
 8004206:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800420a:	fb02 f303 	mul.w	r3, r2, r3
 800420e:	617b      	str	r3, [r7, #20]
      break;
 8004210:	e00c      	b.n	800422c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004212:	4a13      	ldr	r2, [pc, #76]	@ (8004260 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	fbb2 f3f3 	udiv	r3, r2, r3
 800421a:	4a10      	ldr	r2, [pc, #64]	@ (800425c <HAL_RCC_GetSysClockFreq+0xb8>)
 800421c:	68d2      	ldr	r2, [r2, #12]
 800421e:	0a12      	lsrs	r2, r2, #8
 8004220:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004224:	fb02 f303 	mul.w	r3, r2, r3
 8004228:	617b      	str	r3, [r7, #20]
      break;
 800422a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800422c:	4b0b      	ldr	r3, [pc, #44]	@ (800425c <HAL_RCC_GetSysClockFreq+0xb8>)
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	0e5b      	lsrs	r3, r3, #25
 8004232:	f003 0303 	and.w	r3, r3, #3
 8004236:	3301      	adds	r3, #1
 8004238:	005b      	lsls	r3, r3, #1
 800423a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800423c:	697a      	ldr	r2, [r7, #20]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	fbb2 f3f3 	udiv	r3, r2, r3
 8004244:	613b      	str	r3, [r7, #16]
 8004246:	e001      	b.n	800424c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004248:	2300      	movs	r3, #0
 800424a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800424c:	693b      	ldr	r3, [r7, #16]
}
 800424e:	4618      	mov	r0, r3
 8004250:	371c      	adds	r7, #28
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr
 800425a:	bf00      	nop
 800425c:	40021000 	.word	0x40021000
 8004260:	00f42400 	.word	0x00f42400
 8004264:	016e3600 	.word	0x016e3600

08004268 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004268:	b480      	push	{r7}
 800426a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800426c:	4b03      	ldr	r3, [pc, #12]	@ (800427c <HAL_RCC_GetHCLKFreq+0x14>)
 800426e:	681b      	ldr	r3, [r3, #0]
}
 8004270:	4618      	mov	r0, r3
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr
 800427a:	bf00      	nop
 800427c:	20000000 	.word	0x20000000

08004280 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004284:	f7ff fff0 	bl	8004268 <HAL_RCC_GetHCLKFreq>
 8004288:	4602      	mov	r2, r0
 800428a:	4b06      	ldr	r3, [pc, #24]	@ (80042a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	0a1b      	lsrs	r3, r3, #8
 8004290:	f003 0307 	and.w	r3, r3, #7
 8004294:	4904      	ldr	r1, [pc, #16]	@ (80042a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004296:	5ccb      	ldrb	r3, [r1, r3]
 8004298:	f003 031f 	and.w	r3, r3, #31
 800429c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	bd80      	pop	{r7, pc}
 80042a4:	40021000 	.word	0x40021000
 80042a8:	080069ac 	.word	0x080069ac

080042ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80042b0:	f7ff ffda 	bl	8004268 <HAL_RCC_GetHCLKFreq>
 80042b4:	4602      	mov	r2, r0
 80042b6:	4b06      	ldr	r3, [pc, #24]	@ (80042d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	0adb      	lsrs	r3, r3, #11
 80042bc:	f003 0307 	and.w	r3, r3, #7
 80042c0:	4904      	ldr	r1, [pc, #16]	@ (80042d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80042c2:	5ccb      	ldrb	r3, [r1, r3]
 80042c4:	f003 031f 	and.w	r3, r3, #31
 80042c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	40021000 	.word	0x40021000
 80042d4:	080069ac 	.word	0x080069ac

080042d8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80042d8:	b480      	push	{r7}
 80042da:	b087      	sub	sp, #28
 80042dc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80042de:	4b1e      	ldr	r3, [pc, #120]	@ (8004358 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	f003 0303 	and.w	r3, r3, #3
 80042e6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80042e8:	4b1b      	ldr	r3, [pc, #108]	@ (8004358 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	091b      	lsrs	r3, r3, #4
 80042ee:	f003 030f 	and.w	r3, r3, #15
 80042f2:	3301      	adds	r3, #1
 80042f4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	2b03      	cmp	r3, #3
 80042fa:	d10c      	bne.n	8004316 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80042fc:	4a17      	ldr	r2, [pc, #92]	@ (800435c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	fbb2 f3f3 	udiv	r3, r2, r3
 8004304:	4a14      	ldr	r2, [pc, #80]	@ (8004358 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004306:	68d2      	ldr	r2, [r2, #12]
 8004308:	0a12      	lsrs	r2, r2, #8
 800430a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800430e:	fb02 f303 	mul.w	r3, r2, r3
 8004312:	617b      	str	r3, [r7, #20]
    break;
 8004314:	e00c      	b.n	8004330 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004316:	4a12      	ldr	r2, [pc, #72]	@ (8004360 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	fbb2 f3f3 	udiv	r3, r2, r3
 800431e:	4a0e      	ldr	r2, [pc, #56]	@ (8004358 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004320:	68d2      	ldr	r2, [r2, #12]
 8004322:	0a12      	lsrs	r2, r2, #8
 8004324:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004328:	fb02 f303 	mul.w	r3, r2, r3
 800432c:	617b      	str	r3, [r7, #20]
    break;
 800432e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004330:	4b09      	ldr	r3, [pc, #36]	@ (8004358 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	0e5b      	lsrs	r3, r3, #25
 8004336:	f003 0303 	and.w	r3, r3, #3
 800433a:	3301      	adds	r3, #1
 800433c:	005b      	lsls	r3, r3, #1
 800433e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004340:	697a      	ldr	r2, [r7, #20]
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	fbb2 f3f3 	udiv	r3, r2, r3
 8004348:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800434a:	687b      	ldr	r3, [r7, #4]
}
 800434c:	4618      	mov	r0, r3
 800434e:	371c      	adds	r7, #28
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr
 8004358:	40021000 	.word	0x40021000
 800435c:	016e3600 	.word	0x016e3600
 8004360:	00f42400 	.word	0x00f42400

08004364 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b086      	sub	sp, #24
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800436c:	2300      	movs	r3, #0
 800436e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004370:	2300      	movs	r3, #0
 8004372:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800437c:	2b00      	cmp	r3, #0
 800437e:	f000 8098 	beq.w	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004382:	2300      	movs	r3, #0
 8004384:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004386:	4b43      	ldr	r3, [pc, #268]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004388:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800438a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800438e:	2b00      	cmp	r3, #0
 8004390:	d10d      	bne.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004392:	4b40      	ldr	r3, [pc, #256]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004394:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004396:	4a3f      	ldr	r2, [pc, #252]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004398:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800439c:	6593      	str	r3, [r2, #88]	@ 0x58
 800439e:	4b3d      	ldr	r3, [pc, #244]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043a6:	60bb      	str	r3, [r7, #8]
 80043a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043aa:	2301      	movs	r3, #1
 80043ac:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043ae:	4b3a      	ldr	r3, [pc, #232]	@ (8004498 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a39      	ldr	r2, [pc, #228]	@ (8004498 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80043b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043b8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80043ba:	f7fd f869 	bl	8001490 <HAL_GetTick>
 80043be:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80043c0:	e009      	b.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043c2:	f7fd f865 	bl	8001490 <HAL_GetTick>
 80043c6:	4602      	mov	r2, r0
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	2b02      	cmp	r3, #2
 80043ce:	d902      	bls.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80043d0:	2303      	movs	r3, #3
 80043d2:	74fb      	strb	r3, [r7, #19]
        break;
 80043d4:	e005      	b.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80043d6:	4b30      	ldr	r3, [pc, #192]	@ (8004498 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d0ef      	beq.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80043e2:	7cfb      	ldrb	r3, [r7, #19]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d159      	bne.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80043e8:	4b2a      	ldr	r3, [pc, #168]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043f2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d01e      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043fe:	697a      	ldr	r2, [r7, #20]
 8004400:	429a      	cmp	r2, r3
 8004402:	d019      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004404:	4b23      	ldr	r3, [pc, #140]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004406:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800440a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800440e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004410:	4b20      	ldr	r3, [pc, #128]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004412:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004416:	4a1f      	ldr	r2, [pc, #124]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004418:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800441c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004420:	4b1c      	ldr	r3, [pc, #112]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004422:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004426:	4a1b      	ldr	r2, [pc, #108]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004428:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800442c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004430:	4a18      	ldr	r2, [pc, #96]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	f003 0301 	and.w	r3, r3, #1
 800443e:	2b00      	cmp	r3, #0
 8004440:	d016      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004442:	f7fd f825 	bl	8001490 <HAL_GetTick>
 8004446:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004448:	e00b      	b.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800444a:	f7fd f821 	bl	8001490 <HAL_GetTick>
 800444e:	4602      	mov	r2, r0
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	1ad3      	subs	r3, r2, r3
 8004454:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004458:	4293      	cmp	r3, r2
 800445a:	d902      	bls.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800445c:	2303      	movs	r3, #3
 800445e:	74fb      	strb	r3, [r7, #19]
            break;
 8004460:	e006      	b.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004462:	4b0c      	ldr	r3, [pc, #48]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004464:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004468:	f003 0302 	and.w	r3, r3, #2
 800446c:	2b00      	cmp	r3, #0
 800446e:	d0ec      	beq.n	800444a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004470:	7cfb      	ldrb	r3, [r7, #19]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d10b      	bne.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004476:	4b07      	ldr	r3, [pc, #28]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004478:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800447c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004484:	4903      	ldr	r1, [pc, #12]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004486:	4313      	orrs	r3, r2
 8004488:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800448c:	e008      	b.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800448e:	7cfb      	ldrb	r3, [r7, #19]
 8004490:	74bb      	strb	r3, [r7, #18]
 8004492:	e005      	b.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004494:	40021000 	.word	0x40021000
 8004498:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800449c:	7cfb      	ldrb	r3, [r7, #19]
 800449e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044a0:	7c7b      	ldrb	r3, [r7, #17]
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d105      	bne.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044a6:	4ba7      	ldr	r3, [pc, #668]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044aa:	4aa6      	ldr	r2, [pc, #664]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044b0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0301 	and.w	r3, r3, #1
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d00a      	beq.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80044be:	4ba1      	ldr	r3, [pc, #644]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044c4:	f023 0203 	bic.w	r2, r3, #3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	499d      	ldr	r1, [pc, #628]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044ce:	4313      	orrs	r3, r2
 80044d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 0302 	and.w	r3, r3, #2
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d00a      	beq.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80044e0:	4b98      	ldr	r3, [pc, #608]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044e6:	f023 020c 	bic.w	r2, r3, #12
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	4995      	ldr	r1, [pc, #596]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044f0:	4313      	orrs	r3, r2
 80044f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 0304 	and.w	r3, r3, #4
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d00a      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004502:	4b90      	ldr	r3, [pc, #576]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004504:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004508:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	498c      	ldr	r1, [pc, #560]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004512:	4313      	orrs	r3, r2
 8004514:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0308 	and.w	r3, r3, #8
 8004520:	2b00      	cmp	r3, #0
 8004522:	d00a      	beq.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004524:	4b87      	ldr	r3, [pc, #540]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004526:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800452a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	691b      	ldr	r3, [r3, #16]
 8004532:	4984      	ldr	r1, [pc, #528]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004534:	4313      	orrs	r3, r2
 8004536:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 0310 	and.w	r3, r3, #16
 8004542:	2b00      	cmp	r3, #0
 8004544:	d00a      	beq.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004546:	4b7f      	ldr	r3, [pc, #508]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004548:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800454c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	695b      	ldr	r3, [r3, #20]
 8004554:	497b      	ldr	r1, [pc, #492]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004556:	4313      	orrs	r3, r2
 8004558:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 0320 	and.w	r3, r3, #32
 8004564:	2b00      	cmp	r3, #0
 8004566:	d00a      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004568:	4b76      	ldr	r3, [pc, #472]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800456a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800456e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	699b      	ldr	r3, [r3, #24]
 8004576:	4973      	ldr	r1, [pc, #460]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004578:	4313      	orrs	r3, r2
 800457a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004586:	2b00      	cmp	r3, #0
 8004588:	d00a      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800458a:	4b6e      	ldr	r3, [pc, #440]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800458c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004590:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	69db      	ldr	r3, [r3, #28]
 8004598:	496a      	ldr	r1, [pc, #424]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800459a:	4313      	orrs	r3, r2
 800459c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d00a      	beq.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80045ac:	4b65      	ldr	r3, [pc, #404]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045b2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a1b      	ldr	r3, [r3, #32]
 80045ba:	4962      	ldr	r1, [pc, #392]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045bc:	4313      	orrs	r3, r2
 80045be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d00a      	beq.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80045ce:	4b5d      	ldr	r3, [pc, #372]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045d4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045dc:	4959      	ldr	r1, [pc, #356]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045de:	4313      	orrs	r3, r2
 80045e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d00a      	beq.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80045f0:	4b54      	ldr	r3, [pc, #336]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80045f6:	f023 0203 	bic.w	r2, r3, #3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045fe:	4951      	ldr	r1, [pc, #324]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004600:	4313      	orrs	r3, r2
 8004602:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800460e:	2b00      	cmp	r3, #0
 8004610:	d00a      	beq.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004612:	4b4c      	ldr	r3, [pc, #304]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004614:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004618:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004620:	4948      	ldr	r1, [pc, #288]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004622:	4313      	orrs	r3, r2
 8004624:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004630:	2b00      	cmp	r3, #0
 8004632:	d015      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004634:	4b43      	ldr	r3, [pc, #268]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004636:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800463a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004642:	4940      	ldr	r1, [pc, #256]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004644:	4313      	orrs	r3, r2
 8004646:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800464e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004652:	d105      	bne.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004654:	4b3b      	ldr	r3, [pc, #236]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	4a3a      	ldr	r2, [pc, #232]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800465a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800465e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004668:	2b00      	cmp	r3, #0
 800466a:	d015      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800466c:	4b35      	ldr	r3, [pc, #212]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800466e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004672:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800467a:	4932      	ldr	r1, [pc, #200]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800467c:	4313      	orrs	r3, r2
 800467e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004686:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800468a:	d105      	bne.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800468c:	4b2d      	ldr	r3, [pc, #180]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	4a2c      	ldr	r2, [pc, #176]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004692:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004696:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d015      	beq.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80046a4:	4b27      	ldr	r3, [pc, #156]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046aa:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046b2:	4924      	ldr	r1, [pc, #144]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046b4:	4313      	orrs	r3, r2
 80046b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046be:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80046c2:	d105      	bne.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046c4:	4b1f      	ldr	r3, [pc, #124]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	4a1e      	ldr	r2, [pc, #120]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80046ce:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d015      	beq.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80046dc:	4b19      	ldr	r3, [pc, #100]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046e2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046ea:	4916      	ldr	r1, [pc, #88]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046ec:	4313      	orrs	r3, r2
 80046ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80046fa:	d105      	bne.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046fc:	4b11      	ldr	r3, [pc, #68]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	4a10      	ldr	r2, [pc, #64]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004702:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004706:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004710:	2b00      	cmp	r3, #0
 8004712:	d019      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004714:	4b0b      	ldr	r3, [pc, #44]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004716:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800471a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004722:	4908      	ldr	r1, [pc, #32]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004724:	4313      	orrs	r3, r2
 8004726:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800472e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004732:	d109      	bne.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004734:	4b03      	ldr	r3, [pc, #12]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	4a02      	ldr	r2, [pc, #8]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800473a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800473e:	60d3      	str	r3, [r2, #12]
 8004740:	e002      	b.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004742:	bf00      	nop
 8004744:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d015      	beq.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004754:	4b29      	ldr	r3, [pc, #164]	@ (80047fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004756:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800475a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004762:	4926      	ldr	r1, [pc, #152]	@ (80047fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004764:	4313      	orrs	r3, r2
 8004766:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800476e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004772:	d105      	bne.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004774:	4b21      	ldr	r3, [pc, #132]	@ (80047fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	4a20      	ldr	r2, [pc, #128]	@ (80047fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800477a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800477e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004788:	2b00      	cmp	r3, #0
 800478a:	d015      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800478c:	4b1b      	ldr	r3, [pc, #108]	@ (80047fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800478e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004792:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800479a:	4918      	ldr	r1, [pc, #96]	@ (80047fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800479c:	4313      	orrs	r3, r2
 800479e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047aa:	d105      	bne.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80047ac:	4b13      	ldr	r3, [pc, #76]	@ (80047fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	4a12      	ldr	r2, [pc, #72]	@ (80047fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80047b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047b6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d015      	beq.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80047c4:	4b0d      	ldr	r3, [pc, #52]	@ (80047fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80047c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80047ca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047d2:	490a      	ldr	r1, [pc, #40]	@ (80047fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80047d4:	4313      	orrs	r3, r2
 80047d6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047de:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80047e2:	d105      	bne.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047e4:	4b05      	ldr	r3, [pc, #20]	@ (80047fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	4a04      	ldr	r2, [pc, #16]	@ (80047fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80047ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80047ee:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80047f0:	7cbb      	ldrb	r3, [r7, #18]
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3718      	adds	r7, #24
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	40021000 	.word	0x40021000

08004800 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b084      	sub	sp, #16
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d101      	bne.n	8004812 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e09d      	b.n	800494e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004816:	2b00      	cmp	r3, #0
 8004818:	d108      	bne.n	800482c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004822:	d009      	beq.n	8004838 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2200      	movs	r2, #0
 8004828:	61da      	str	r2, [r3, #28]
 800482a:	e005      	b.n	8004838 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004844:	b2db      	uxtb	r3, r3
 8004846:	2b00      	cmp	r3, #0
 8004848:	d106      	bne.n	8004858 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f7fc fcaa 	bl	80011ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2202      	movs	r2, #2
 800485c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800486e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004878:	d902      	bls.n	8004880 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800487a:	2300      	movs	r3, #0
 800487c:	60fb      	str	r3, [r7, #12]
 800487e:	e002      	b.n	8004886 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004880:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004884:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800488e:	d007      	beq.n	80048a0 <HAL_SPI_Init+0xa0>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004898:	d002      	beq.n	80048a0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80048b0:	431a      	orrs	r2, r3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	691b      	ldr	r3, [r3, #16]
 80048b6:	f003 0302 	and.w	r3, r3, #2
 80048ba:	431a      	orrs	r2, r3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	695b      	ldr	r3, [r3, #20]
 80048c0:	f003 0301 	and.w	r3, r3, #1
 80048c4:	431a      	orrs	r2, r3
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	699b      	ldr	r3, [r3, #24]
 80048ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048ce:	431a      	orrs	r2, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	69db      	ldr	r3, [r3, #28]
 80048d4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80048d8:	431a      	orrs	r2, r3
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a1b      	ldr	r3, [r3, #32]
 80048de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048e2:	ea42 0103 	orr.w	r1, r2, r3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048ea:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	430a      	orrs	r2, r1
 80048f4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	699b      	ldr	r3, [r3, #24]
 80048fa:	0c1b      	lsrs	r3, r3, #16
 80048fc:	f003 0204 	and.w	r2, r3, #4
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004904:	f003 0310 	and.w	r3, r3, #16
 8004908:	431a      	orrs	r2, r3
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800490e:	f003 0308 	and.w	r3, r3, #8
 8004912:	431a      	orrs	r2, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800491c:	ea42 0103 	orr.w	r1, r2, r3
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	430a      	orrs	r2, r1
 800492c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	69da      	ldr	r2, [r3, #28]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800493c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800494c:	2300      	movs	r3, #0
}
 800494e:	4618      	mov	r0, r3
 8004950:	3710      	adds	r7, #16
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
	...

08004958 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8004958:	b480      	push	{r7}
 800495a:	b087      	sub	sp, #28
 800495c:	af00      	add	r7, sp, #0
 800495e:	60f8      	str	r0, [r7, #12]
 8004960:	60b9      	str	r1, [r7, #8]
 8004962:	607a      	str	r2, [r7, #4]
 8004964:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004966:	2300      	movs	r3, #0
 8004968:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004970:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004978:	7dbb      	ldrb	r3, [r7, #22]
 800497a:	2b01      	cmp	r3, #1
 800497c:	d00d      	beq.n	800499a <HAL_SPI_TransmitReceive_IT+0x42>
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004984:	d106      	bne.n	8004994 <HAL_SPI_TransmitReceive_IT+0x3c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d102      	bne.n	8004994 <HAL_SPI_TransmitReceive_IT+0x3c>
 800498e:	7dbb      	ldrb	r3, [r7, #22]
 8004990:	2b04      	cmp	r3, #4
 8004992:	d002      	beq.n	800499a <HAL_SPI_TransmitReceive_IT+0x42>
  {
    errorcode = HAL_BUSY;
 8004994:	2302      	movs	r3, #2
 8004996:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004998:	e07d      	b.n	8004a96 <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d005      	beq.n	80049ac <HAL_SPI_TransmitReceive_IT+0x54>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d002      	beq.n	80049ac <HAL_SPI_TransmitReceive_IT+0x54>
 80049a6:	887b      	ldrh	r3, [r7, #2]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d102      	bne.n	80049b2 <HAL_SPI_TransmitReceive_IT+0x5a>
  {
    errorcode = HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	75fb      	strb	r3, [r7, #23]
    goto error;
 80049b0:	e071      	b.n	8004a96 <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d101      	bne.n	80049c0 <HAL_SPI_TransmitReceive_IT+0x68>
 80049bc:	2302      	movs	r3, #2
 80049be:	e06b      	b.n	8004a98 <HAL_SPI_TransmitReceive_IT+0x140>
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	2b04      	cmp	r3, #4
 80049d2:	d003      	beq.n	80049dc <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2205      	movs	r2, #5
 80049d8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2200      	movs	r2, #0
 80049e0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	68ba      	ldr	r2, [r7, #8]
 80049e6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	887a      	ldrh	r2, [r7, #2]
 80049ec:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	887a      	ldrh	r2, [r7, #2]
 80049f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	887a      	ldrh	r2, [r7, #2]
 80049fe:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	887a      	ldrh	r2, [r7, #2]
 8004a06:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	68db      	ldr	r3, [r3, #12]
 8004a0e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004a12:	d906      	bls.n	8004a22 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	4a23      	ldr	r2, [pc, #140]	@ (8004aa4 <HAL_SPI_TransmitReceive_IT+0x14c>)
 8004a18:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	4a22      	ldr	r2, [pc, #136]	@ (8004aa8 <HAL_SPI_TransmitReceive_IT+0x150>)
 8004a1e:	651a      	str	r2, [r3, #80]	@ 0x50
 8004a20:	e005      	b.n	8004a2e <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	4a21      	ldr	r2, [pc, #132]	@ (8004aac <HAL_SPI_TransmitReceive_IT+0x154>)
 8004a26:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	4a21      	ldr	r2, [pc, #132]	@ (8004ab0 <HAL_SPI_TransmitReceive_IT+0x158>)
 8004a2c:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	68db      	ldr	r3, [r3, #12]
 8004a32:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004a36:	d802      	bhi.n	8004a3e <HAL_SPI_TransmitReceive_IT+0xe6>
 8004a38:	887b      	ldrh	r3, [r7, #2]
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d908      	bls.n	8004a50 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	685a      	ldr	r2, [r3, #4]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004a4c:	605a      	str	r2, [r3, #4]
 8004a4e:	e007      	b.n	8004a60 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	685a      	ldr	r2, [r3, #4]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004a5e:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a6a:	2b40      	cmp	r3, #64	@ 0x40
 8004a6c:	d007      	beq.n	8004a7e <HAL_SPI_TransmitReceive_IT+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004a7c:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2200      	movs	r2, #0
 8004a82:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	685a      	ldr	r2, [r3, #4]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 8004a94:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 8004a96:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	371c      	adds	r7, #28
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr
 8004aa4:	08004e3f 	.word	0x08004e3f
 8004aa8:	08004ea5 	.word	0x08004ea5
 8004aac:	08004cef 	.word	0x08004cef
 8004ab0:	08004dad 	.word	0x08004dad

08004ab4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b088      	sub	sp, #32
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004acc:	69bb      	ldr	r3, [r7, #24]
 8004ace:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d10e      	bne.n	8004af4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004ad6:	69bb      	ldr	r3, [r7, #24]
 8004ad8:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d009      	beq.n	8004af4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004ae0:	69fb      	ldr	r3, [r7, #28]
 8004ae2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d004      	beq.n	8004af4 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	4798      	blx	r3
    return;
 8004af2:	e0ce      	b.n	8004c92 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004af4:	69bb      	ldr	r3, [r7, #24]
 8004af6:	f003 0302 	and.w	r3, r3, #2
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d009      	beq.n	8004b12 <HAL_SPI_IRQHandler+0x5e>
 8004afe:	69fb      	ldr	r3, [r7, #28]
 8004b00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d004      	beq.n	8004b12 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	4798      	blx	r3
    return;
 8004b10:	e0bf      	b.n	8004c92 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004b12:	69bb      	ldr	r3, [r7, #24]
 8004b14:	f003 0320 	and.w	r3, r3, #32
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d10a      	bne.n	8004b32 <HAL_SPI_IRQHandler+0x7e>
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d105      	bne.n	8004b32 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004b26:	69bb      	ldr	r3, [r7, #24]
 8004b28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	f000 80b0 	beq.w	8004c92 <HAL_SPI_IRQHandler+0x1de>
 8004b32:	69fb      	ldr	r3, [r7, #28]
 8004b34:	f003 0320 	and.w	r3, r3, #32
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	f000 80aa 	beq.w	8004c92 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004b3e:	69bb      	ldr	r3, [r7, #24]
 8004b40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d023      	beq.n	8004b90 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	2b03      	cmp	r3, #3
 8004b52:	d011      	beq.n	8004b78 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b58:	f043 0204 	orr.w	r2, r3, #4
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b60:	2300      	movs	r3, #0
 8004b62:	617b      	str	r3, [r7, #20]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	617b      	str	r3, [r7, #20]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	617b      	str	r3, [r7, #20]
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	e00b      	b.n	8004b90 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b78:	2300      	movs	r3, #0
 8004b7a:	613b      	str	r3, [r7, #16]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	613b      	str	r3, [r7, #16]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	613b      	str	r3, [r7, #16]
 8004b8c:	693b      	ldr	r3, [r7, #16]
        return;
 8004b8e:	e080      	b.n	8004c92 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004b90:	69bb      	ldr	r3, [r7, #24]
 8004b92:	f003 0320 	and.w	r3, r3, #32
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d014      	beq.n	8004bc4 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b9e:	f043 0201 	orr.w	r2, r3, #1
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	60fb      	str	r3, [r7, #12]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	60fb      	str	r3, [r7, #12]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004bc0:	601a      	str	r2, [r3, #0]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004bc4:	69bb      	ldr	r3, [r7, #24]
 8004bc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d00c      	beq.n	8004be8 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bd2:	f043 0208 	orr.w	r2, r3, #8
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004bda:	2300      	movs	r3, #0
 8004bdc:	60bb      	str	r3, [r7, #8]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	60bb      	str	r3, [r7, #8]
 8004be6:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d04f      	beq.n	8004c90 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	685a      	ldr	r2, [r3, #4]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004bfe:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004c08:	69fb      	ldr	r3, [r7, #28]
 8004c0a:	f003 0302 	and.w	r3, r3, #2
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d104      	bne.n	8004c1c <HAL_SPI_IRQHandler+0x168>
 8004c12:	69fb      	ldr	r3, [r7, #28]
 8004c14:	f003 0301 	and.w	r3, r3, #1
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d034      	beq.n	8004c86 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	685a      	ldr	r2, [r3, #4]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f022 0203 	bic.w	r2, r2, #3
 8004c2a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d011      	beq.n	8004c58 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c38:	4a17      	ldr	r2, [pc, #92]	@ (8004c98 <HAL_SPI_IRQHandler+0x1e4>)
 8004c3a:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c40:	4618      	mov	r0, r3
 8004c42:	f7fe fa5f 	bl	8003104 <HAL_DMA_Abort_IT>
 8004c46:	4603      	mov	r3, r0
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d005      	beq.n	8004c58 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c50:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d016      	beq.n	8004c8e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c64:	4a0c      	ldr	r2, [pc, #48]	@ (8004c98 <HAL_SPI_IRQHandler+0x1e4>)
 8004c66:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f7fe fa49 	bl	8003104 <HAL_DMA_Abort_IT>
 8004c72:	4603      	mov	r3, r0
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d00a      	beq.n	8004c8e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c7c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8004c84:	e003      	b.n	8004c8e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 f812 	bl	8004cb0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004c8c:	e000      	b.n	8004c90 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8004c8e:	bf00      	nop
    return;
 8004c90:	bf00      	nop
  }
}
 8004c92:	3720      	adds	r7, #32
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}
 8004c98:	08004cc5 	.word	0x08004cc5

08004c9c <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b083      	sub	sp, #12
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8004ca4:	bf00      	nop
 8004ca6:	370c      	adds	r7, #12
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr

08004cb0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b083      	sub	sp, #12
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004cb8:	bf00      	nop
 8004cba:	370c      	adds	r7, #12
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc2:	4770      	bx	lr

08004cc4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b084      	sub	sp, #16
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cd0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004ce0:	68f8      	ldr	r0, [r7, #12]
 8004ce2:	f7ff ffe5 	bl	8004cb0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004ce6:	bf00      	nop
 8004ce8:	3710      	adds	r7, #16
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}

08004cee <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004cee:	b580      	push	{r7, lr}
 8004cf0:	b082      	sub	sp, #8
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d923      	bls.n	8004d4a <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	68da      	ldr	r2, [r3, #12]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d0c:	b292      	uxth	r2, r2
 8004d0e:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d14:	1c9a      	adds	r2, r3, #2
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount -= 2U;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	3b02      	subs	r3, #2
 8004d24:	b29a      	uxth	r2, r3
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    if (hspi->RxXferCount == 1U)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d11f      	bne.n	8004d78 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	685a      	ldr	r2, [r3, #4]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004d46:	605a      	str	r2, [r3, #4]
 8004d48:	e016      	b.n	8004d78 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f103 020c 	add.w	r2, r3, #12
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d56:	7812      	ldrb	r2, [r2, #0]
 8004d58:	b2d2      	uxtb	r2, r2
 8004d5a:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d60:	1c5a      	adds	r2, r3, #1
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount--;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	3b01      	subs	r3, #1
 8004d70:	b29a      	uxth	r2, r3
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d10f      	bne.n	8004da4 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	685a      	ldr	r2, [r3, #4]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004d92:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d102      	bne.n	8004da4 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f000 fa14 	bl	80051cc <SPI_CloseRxTx_ISR>
    }
  }
}
 8004da4:	bf00      	nop
 8004da6:	3708      	adds	r7, #8
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}

08004dac <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b082      	sub	sp, #8
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d912      	bls.n	8004de4 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dc2:	881a      	ldrh	r2, [r3, #0]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dce:	1c9a      	adds	r2, r3, #2
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount -= 2U;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	3b02      	subs	r3, #2
 8004ddc:	b29a      	uxth	r2, r3
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004de2:	e012      	b.n	8004e0a <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	330c      	adds	r3, #12
 8004dee:	7812      	ldrb	r2, [r2, #0]
 8004df0:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004df6:	1c5a      	adds	r2, r3, #1
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount--;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	3b01      	subs	r3, #1
 8004e04:	b29a      	uxth	r2, r3
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	87da      	strh	r2, [r3, #62]	@ 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d110      	bne.n	8004e36 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	685a      	ldr	r2, [r3, #4]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004e22:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d102      	bne.n	8004e36 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f000 f9cb 	bl	80051cc <SPI_CloseRxTx_ISR>
    }
  }
}
 8004e36:	bf00      	nop
 8004e38:	3708      	adds	r7, #8
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}

08004e3e <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004e3e:	b580      	push	{r7, lr}
 8004e40:	b082      	sub	sp, #8
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	68da      	ldr	r2, [r3, #12]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e50:	b292      	uxth	r2, r2
 8004e52:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e58:	1c9a      	adds	r2, r3, #2
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004e64:	b29b      	uxth	r3, r3
 8004e66:	3b01      	subs	r3, #1
 8004e68:	b29a      	uxth	r2, r3
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  if (hspi->RxXferCount == 0U)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d10f      	bne.n	8004e9c <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	685a      	ldr	r2, [r3, #4]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e8a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d102      	bne.n	8004e9c <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f000 f998 	bl	80051cc <SPI_CloseRxTx_ISR>
    }
  }
}
 8004e9c:	bf00      	nop
 8004e9e:	3708      	adds	r7, #8
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}

08004ea4 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b082      	sub	sp, #8
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eb0:	881a      	ldrh	r2, [r3, #0]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ebc:	1c9a      	adds	r2, r3, #2
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	3b01      	subs	r3, #1
 8004eca:	b29a      	uxth	r2, r3
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d110      	bne.n	8004efc <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	685a      	ldr	r2, [r3, #4]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004ee8:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d102      	bne.n	8004efc <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f000 f968 	bl	80051cc <SPI_CloseRxTx_ISR>
    }
  }
}
 8004efc:	bf00      	nop
 8004efe:	3708      	adds	r7, #8
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}

08004f04 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b088      	sub	sp, #32
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	60f8      	str	r0, [r7, #12]
 8004f0c:	60b9      	str	r1, [r7, #8]
 8004f0e:	603b      	str	r3, [r7, #0]
 8004f10:	4613      	mov	r3, r2
 8004f12:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004f14:	f7fc fabc 	bl	8001490 <HAL_GetTick>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f1c:	1a9b      	subs	r3, r3, r2
 8004f1e:	683a      	ldr	r2, [r7, #0]
 8004f20:	4413      	add	r3, r2
 8004f22:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004f24:	f7fc fab4 	bl	8001490 <HAL_GetTick>
 8004f28:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004f2a:	4b39      	ldr	r3, [pc, #228]	@ (8005010 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	015b      	lsls	r3, r3, #5
 8004f30:	0d1b      	lsrs	r3, r3, #20
 8004f32:	69fa      	ldr	r2, [r7, #28]
 8004f34:	fb02 f303 	mul.w	r3, r2, r3
 8004f38:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f3a:	e054      	b.n	8004fe6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f42:	d050      	beq.n	8004fe6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f44:	f7fc faa4 	bl	8001490 <HAL_GetTick>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	69bb      	ldr	r3, [r7, #24]
 8004f4c:	1ad3      	subs	r3, r2, r3
 8004f4e:	69fa      	ldr	r2, [r7, #28]
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d902      	bls.n	8004f5a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004f54:	69fb      	ldr	r3, [r7, #28]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d13d      	bne.n	8004fd6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	685a      	ldr	r2, [r3, #4]
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004f68:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f72:	d111      	bne.n	8004f98 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f7c:	d004      	beq.n	8004f88 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f86:	d107      	bne.n	8004f98 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f96:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004fa0:	d10f      	bne.n	8004fc2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004fb0:	601a      	str	r2, [r3, #0]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004fc0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e017      	b.n	8005006 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d101      	bne.n	8004fe0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	3b01      	subs	r3, #1
 8004fe4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	689a      	ldr	r2, [r3, #8]
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	4013      	ands	r3, r2
 8004ff0:	68ba      	ldr	r2, [r7, #8]
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	bf0c      	ite	eq
 8004ff6:	2301      	moveq	r3, #1
 8004ff8:	2300      	movne	r3, #0
 8004ffa:	b2db      	uxtb	r3, r3
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	79fb      	ldrb	r3, [r7, #7]
 8005000:	429a      	cmp	r2, r3
 8005002:	d19b      	bne.n	8004f3c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005004:	2300      	movs	r3, #0
}
 8005006:	4618      	mov	r0, r3
 8005008:	3720      	adds	r7, #32
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
 800500e:	bf00      	nop
 8005010:	20000000 	.word	0x20000000

08005014 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b08a      	sub	sp, #40	@ 0x28
 8005018:	af00      	add	r7, sp, #0
 800501a:	60f8      	str	r0, [r7, #12]
 800501c:	60b9      	str	r1, [r7, #8]
 800501e:	607a      	str	r2, [r7, #4]
 8005020:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005022:	2300      	movs	r3, #0
 8005024:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005026:	f7fc fa33 	bl	8001490 <HAL_GetTick>
 800502a:	4602      	mov	r2, r0
 800502c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800502e:	1a9b      	subs	r3, r3, r2
 8005030:	683a      	ldr	r2, [r7, #0]
 8005032:	4413      	add	r3, r2
 8005034:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005036:	f7fc fa2b 	bl	8001490 <HAL_GetTick>
 800503a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	330c      	adds	r3, #12
 8005042:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005044:	4b3d      	ldr	r3, [pc, #244]	@ (800513c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	4613      	mov	r3, r2
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	4413      	add	r3, r2
 800504e:	00da      	lsls	r2, r3, #3
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	0d1b      	lsrs	r3, r3, #20
 8005054:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005056:	fb02 f303 	mul.w	r3, r2, r3
 800505a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800505c:	e060      	b.n	8005120 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005064:	d107      	bne.n	8005076 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d104      	bne.n	8005076 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	b2db      	uxtb	r3, r3
 8005072:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005074:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800507c:	d050      	beq.n	8005120 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800507e:	f7fc fa07 	bl	8001490 <HAL_GetTick>
 8005082:	4602      	mov	r2, r0
 8005084:	6a3b      	ldr	r3, [r7, #32]
 8005086:	1ad3      	subs	r3, r2, r3
 8005088:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800508a:	429a      	cmp	r2, r3
 800508c:	d902      	bls.n	8005094 <SPI_WaitFifoStateUntilTimeout+0x80>
 800508e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005090:	2b00      	cmp	r3, #0
 8005092:	d13d      	bne.n	8005110 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	685a      	ldr	r2, [r3, #4]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80050a2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80050ac:	d111      	bne.n	80050d2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050b6:	d004      	beq.n	80050c2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050c0:	d107      	bne.n	80050d2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80050d0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050da:	d10f      	bne.n	80050fc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80050ea:	601a      	str	r2, [r3, #0]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80050fa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2201      	movs	r2, #1
 8005100:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2200      	movs	r2, #0
 8005108:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800510c:	2303      	movs	r3, #3
 800510e:	e010      	b.n	8005132 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005110:	69bb      	ldr	r3, [r7, #24]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d101      	bne.n	800511a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005116:	2300      	movs	r3, #0
 8005118:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800511a:	69bb      	ldr	r3, [r7, #24]
 800511c:	3b01      	subs	r3, #1
 800511e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	689a      	ldr	r2, [r3, #8]
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	4013      	ands	r3, r2
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	429a      	cmp	r2, r3
 800512e:	d196      	bne.n	800505e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005130:	2300      	movs	r3, #0
}
 8005132:	4618      	mov	r0, r3
 8005134:	3728      	adds	r7, #40	@ 0x28
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
 800513a:	bf00      	nop
 800513c:	20000000 	.word	0x20000000

08005140 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b086      	sub	sp, #24
 8005144:	af02      	add	r7, sp, #8
 8005146:	60f8      	str	r0, [r7, #12]
 8005148:	60b9      	str	r1, [r7, #8]
 800514a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	9300      	str	r3, [sp, #0]
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	2200      	movs	r2, #0
 8005154:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005158:	68f8      	ldr	r0, [r7, #12]
 800515a:	f7ff ff5b 	bl	8005014 <SPI_WaitFifoStateUntilTimeout>
 800515e:	4603      	mov	r3, r0
 8005160:	2b00      	cmp	r3, #0
 8005162:	d007      	beq.n	8005174 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005168:	f043 0220 	orr.w	r2, r3, #32
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005170:	2303      	movs	r3, #3
 8005172:	e027      	b.n	80051c4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	9300      	str	r3, [sp, #0]
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	2200      	movs	r2, #0
 800517c:	2180      	movs	r1, #128	@ 0x80
 800517e:	68f8      	ldr	r0, [r7, #12]
 8005180:	f7ff fec0 	bl	8004f04 <SPI_WaitFlagStateUntilTimeout>
 8005184:	4603      	mov	r3, r0
 8005186:	2b00      	cmp	r3, #0
 8005188:	d007      	beq.n	800519a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800518e:	f043 0220 	orr.w	r2, r3, #32
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005196:	2303      	movs	r3, #3
 8005198:	e014      	b.n	80051c4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	9300      	str	r3, [sp, #0]
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80051a6:	68f8      	ldr	r0, [r7, #12]
 80051a8:	f7ff ff34 	bl	8005014 <SPI_WaitFifoStateUntilTimeout>
 80051ac:	4603      	mov	r3, r0
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d007      	beq.n	80051c2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051b6:	f043 0220 	orr.w	r2, r3, #32
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80051be:	2303      	movs	r3, #3
 80051c0:	e000      	b.n	80051c4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80051c2:	2300      	movs	r3, #0
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3710      	adds	r7, #16
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}

080051cc <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b084      	sub	sp, #16
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80051d4:	f7fc f95c 	bl	8001490 <HAL_GetTick>
 80051d8:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	685a      	ldr	r2, [r3, #4]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f022 0220 	bic.w	r2, r2, #32
 80051e8:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80051ea:	68fa      	ldr	r2, [r7, #12]
 80051ec:	2164      	movs	r1, #100	@ 0x64
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f7ff ffa6 	bl	8005140 <SPI_EndRxTxTransaction>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d005      	beq.n	8005206 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051fe:	f043 0220 	orr.w	r2, r3, #32
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	661a      	str	r2, [r3, #96]	@ 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800520a:	2b00      	cmp	r3, #0
 800520c:	d115      	bne.n	800523a <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005214:	b2db      	uxtb	r3, r3
 8005216:	2b04      	cmp	r3, #4
 8005218:	d107      	bne.n	800522a <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2201      	movs	r2, #1
 800521e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f7ff fd3a 	bl	8004c9c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8005228:	e00e      	b.n	8005248 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2201      	movs	r2, #1
 800522e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f7fb fe5e 	bl	8000ef4 <HAL_SPI_TxRxCpltCallback>
}
 8005238:	e006      	b.n	8005248 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2201      	movs	r2, #1
 800523e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f7ff fd34 	bl	8004cb0 <HAL_SPI_ErrorCallback>
}
 8005248:	bf00      	nop
 800524a:	3710      	adds	r7, #16
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}

08005250 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b082      	sub	sp, #8
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d101      	bne.n	8005262 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e054      	b.n	800530c <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005268:	b2db      	uxtb	r3, r3
 800526a:	2b00      	cmp	r3, #0
 800526c:	d111      	bne.n	8005292 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2200      	movs	r2, #0
 8005272:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 fb48 	bl	800590c <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005280:	2b00      	cmp	r3, #0
 8005282:	d102      	bne.n	800528a <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	4a23      	ldr	r2, [pc, #140]	@ (8005314 <HAL_TIM_Base_Init+0xc4>)
 8005288:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2202      	movs	r2, #2
 8005296:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	3304      	adds	r3, #4
 80052a2:	4619      	mov	r1, r3
 80052a4:	4610      	mov	r0, r2
 80052a6:	f000 fa7d 	bl	80057a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2201      	movs	r2, #1
 80052ae:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2201      	movs	r2, #1
 80052b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2201      	movs	r2, #1
 80052be:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2201      	movs	r2, #1
 80052c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2201      	movs	r2, #1
 80052ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2201      	movs	r2, #1
 80052d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2201      	movs	r2, #1
 80052de:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2201      	movs	r2, #1
 80052e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2201      	movs	r2, #1
 80052ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2201      	movs	r2, #1
 80052f6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2201      	movs	r2, #1
 80052fe:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2201      	movs	r2, #1
 8005306:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800530a:	2300      	movs	r3, #0
}
 800530c:	4618      	mov	r0, r3
 800530e:	3708      	adds	r7, #8
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}
 8005314:	08001245 	.word	0x08001245

08005318 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b082      	sub	sp, #8
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d101      	bne.n	800532c <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	e04c      	b.n	80053c6 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005332:	b2db      	uxtb	r3, r3
 8005334:	2b00      	cmp	r3, #0
 8005336:	d111      	bne.n	800535c <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2200      	movs	r2, #0
 800533c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f000 fae3 	bl	800590c <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800534a:	2b00      	cmp	r3, #0
 800534c:	d102      	bne.n	8005354 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a1f      	ldr	r2, [pc, #124]	@ (80053d0 <HAL_TIM_OnePulse_Init+0xb8>)
 8005352:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2202      	movs	r2, #2
 8005360:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	3304      	adds	r3, #4
 800536c:	4619      	mov	r1, r3
 800536e:	4610      	mov	r0, r2
 8005370:	f000 fa18 	bl	80057a4 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f022 0208 	bic.w	r2, r2, #8
 8005382:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	6819      	ldr	r1, [r3, #0]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	683a      	ldr	r2, [r7, #0]
 8005390:	430a      	orrs	r2, r1
 8005392:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2201      	movs	r2, #1
 80053a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2201      	movs	r2, #1
 80053b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80053c4:	2300      	movs	r3, #0
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3708      	adds	r7, #8
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}
 80053ce:	bf00      	nop
 80053d0:	080053d5 	.word	0x080053d5

080053d4 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b083      	sub	sp, #12
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80053dc:	bf00      	nop
 80053de:	370c      	adds	r7, #12
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr

080053e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b084      	sub	sp, #16
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	691b      	ldr	r3, [r3, #16]
 80053fe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	f003 0302 	and.w	r3, r3, #2
 8005406:	2b00      	cmp	r3, #0
 8005408:	d026      	beq.n	8005458 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	f003 0302 	and.w	r3, r3, #2
 8005410:	2b00      	cmp	r3, #0
 8005412:	d021      	beq.n	8005458 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f06f 0202 	mvn.w	r2, #2
 800541c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2201      	movs	r2, #1
 8005422:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	699b      	ldr	r3, [r3, #24]
 800542a:	f003 0303 	and.w	r3, r3, #3
 800542e:	2b00      	cmp	r3, #0
 8005430:	d005      	beq.n	800543e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	4798      	blx	r3
 800543c:	e009      	b.n	8005452 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2200      	movs	r2, #0
 8005456:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	f003 0304 	and.w	r3, r3, #4
 800545e:	2b00      	cmp	r3, #0
 8005460:	d026      	beq.n	80054b0 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	f003 0304 	and.w	r3, r3, #4
 8005468:	2b00      	cmp	r3, #0
 800546a:	d021      	beq.n	80054b0 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f06f 0204 	mvn.w	r2, #4
 8005474:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2202      	movs	r2, #2
 800547a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	699b      	ldr	r3, [r3, #24]
 8005482:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005486:	2b00      	cmp	r3, #0
 8005488:	d005      	beq.n	8005496 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	4798      	blx	r3
 8005494:	e009      	b.n	80054aa <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2200      	movs	r2, #0
 80054ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	f003 0308 	and.w	r3, r3, #8
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d026      	beq.n	8005508 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	f003 0308 	and.w	r3, r3, #8
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d021      	beq.n	8005508 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f06f 0208 	mvn.w	r2, #8
 80054cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2204      	movs	r2, #4
 80054d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	69db      	ldr	r3, [r3, #28]
 80054da:	f003 0303 	and.w	r3, r3, #3
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d005      	beq.n	80054ee <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	4798      	blx	r3
 80054ec:	e009      	b.n	8005502 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	f003 0310 	and.w	r3, r3, #16
 800550e:	2b00      	cmp	r3, #0
 8005510:	d026      	beq.n	8005560 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f003 0310 	and.w	r3, r3, #16
 8005518:	2b00      	cmp	r3, #0
 800551a:	d021      	beq.n	8005560 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f06f 0210 	mvn.w	r2, #16
 8005524:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2208      	movs	r2, #8
 800552a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	69db      	ldr	r3, [r3, #28]
 8005532:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005536:	2b00      	cmp	r3, #0
 8005538:	d005      	beq.n	8005546 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	4798      	blx	r3
 8005544:	e009      	b.n	800555a <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2200      	movs	r2, #0
 800555e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	f003 0301 	and.w	r3, r3, #1
 8005566:	2b00      	cmp	r3, #0
 8005568:	d00e      	beq.n	8005588 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	f003 0301 	and.w	r3, r3, #1
 8005570:	2b00      	cmp	r3, #0
 8005572:	d009      	beq.n	8005588 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f06f 0201 	mvn.w	r2, #1
 800557c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800558e:	2b00      	cmp	r3, #0
 8005590:	d104      	bne.n	800559c <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005598:	2b00      	cmp	r3, #0
 800559a:	d00e      	beq.n	80055ba <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d009      	beq.n	80055ba <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80055ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d00e      	beq.n	80055e2 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d009      	beq.n	80055e2 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80055d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d00e      	beq.n	800560a <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d009      	beq.n	800560a <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80055fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	f003 0320 	and.w	r3, r3, #32
 8005610:	2b00      	cmp	r3, #0
 8005612:	d00e      	beq.n	8005632 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f003 0320 	and.w	r3, r3, #32
 800561a:	2b00      	cmp	r3, #0
 800561c:	d009      	beq.n	8005632 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f06f 0220 	mvn.w	r2, #32
 8005626:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005638:	2b00      	cmp	r3, #0
 800563a:	d00e      	beq.n	800565a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005642:	2b00      	cmp	r3, #0
 8005644:	d009      	beq.n	800565a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800564e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005660:	2b00      	cmp	r3, #0
 8005662:	d00e      	beq.n	8005682 <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800566a:	2b00      	cmp	r3, #0
 800566c:	d009      	beq.n	8005682 <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8005676:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005688:	2b00      	cmp	r3, #0
 800568a:	d00e      	beq.n	80056aa <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005692:	2b00      	cmp	r3, #0
 8005694:	d009      	beq.n	80056aa <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800569e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d00e      	beq.n	80056d2 <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d009      	beq.n	80056d2 <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80056c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80056d2:	bf00      	nop
 80056d4:	3710      	adds	r7, #16
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}

080056da <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80056da:	b480      	push	{r7}
 80056dc:	b083      	sub	sp, #12
 80056de:	af00      	add	r7, sp, #0
 80056e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80056e2:	bf00      	nop
 80056e4:	370c      	adds	r7, #12
 80056e6:	46bd      	mov	sp, r7
 80056e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ec:	4770      	bx	lr

080056ee <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80056ee:	b480      	push	{r7}
 80056f0:	b083      	sub	sp, #12
 80056f2:	af00      	add	r7, sp, #0
 80056f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 80056f6:	bf00      	nop
 80056f8:	370c      	adds	r7, #12
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr

08005702 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005702:	b480      	push	{r7}
 8005704:	b083      	sub	sp, #12
 8005706:	af00      	add	r7, sp, #0
 8005708:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800570a:	bf00      	nop
 800570c:	370c      	adds	r7, #12
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr

08005716 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005716:	b480      	push	{r7}
 8005718:	b083      	sub	sp, #12
 800571a:	af00      	add	r7, sp, #0
 800571c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800571e:	bf00      	nop
 8005720:	370c      	adds	r7, #12
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr

0800572a <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800572a:	b480      	push	{r7}
 800572c:	b083      	sub	sp, #12
 800572e:	af00      	add	r7, sp, #0
 8005730:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8005732:	bf00      	nop
 8005734:	370c      	adds	r7, #12
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr

0800573e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800573e:	b480      	push	{r7}
 8005740:	b083      	sub	sp, #12
 8005742:	af00      	add	r7, sp, #0
 8005744:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005746:	bf00      	nop
 8005748:	370c      	adds	r7, #12
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr

08005752 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005752:	b480      	push	{r7}
 8005754:	b083      	sub	sp, #12
 8005756:	af00      	add	r7, sp, #0
 8005758:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800575a:	bf00      	nop
 800575c:	370c      	adds	r7, #12
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr

08005766 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005766:	b480      	push	{r7}
 8005768:	b083      	sub	sp, #12
 800576a:	af00      	add	r7, sp, #0
 800576c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800576e:	bf00      	nop
 8005770:	370c      	adds	r7, #12
 8005772:	46bd      	mov	sp, r7
 8005774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005778:	4770      	bx	lr

0800577a <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800577a:	b480      	push	{r7}
 800577c:	b083      	sub	sp, #12
 800577e:	af00      	add	r7, sp, #0
 8005780:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8005782:	bf00      	nop
 8005784:	370c      	adds	r7, #12
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr

0800578e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800578e:	b480      	push	{r7}
 8005790:	b083      	sub	sp, #12
 8005792:	af00      	add	r7, sp, #0
 8005794:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005796:	bf00      	nop
 8005798:	370c      	adds	r7, #12
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr
	...

080057a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b085      	sub	sp, #20
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	4a4c      	ldr	r2, [pc, #304]	@ (80058e8 <TIM_Base_SetConfig+0x144>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d017      	beq.n	80057ec <TIM_Base_SetConfig+0x48>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057c2:	d013      	beq.n	80057ec <TIM_Base_SetConfig+0x48>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	4a49      	ldr	r2, [pc, #292]	@ (80058ec <TIM_Base_SetConfig+0x148>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d00f      	beq.n	80057ec <TIM_Base_SetConfig+0x48>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	4a48      	ldr	r2, [pc, #288]	@ (80058f0 <TIM_Base_SetConfig+0x14c>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d00b      	beq.n	80057ec <TIM_Base_SetConfig+0x48>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	4a47      	ldr	r2, [pc, #284]	@ (80058f4 <TIM_Base_SetConfig+0x150>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d007      	beq.n	80057ec <TIM_Base_SetConfig+0x48>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	4a46      	ldr	r2, [pc, #280]	@ (80058f8 <TIM_Base_SetConfig+0x154>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d003      	beq.n	80057ec <TIM_Base_SetConfig+0x48>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4a45      	ldr	r2, [pc, #276]	@ (80058fc <TIM_Base_SetConfig+0x158>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d108      	bne.n	80057fe <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	68fa      	ldr	r2, [r7, #12]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4a39      	ldr	r2, [pc, #228]	@ (80058e8 <TIM_Base_SetConfig+0x144>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d023      	beq.n	800584e <TIM_Base_SetConfig+0xaa>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800580c:	d01f      	beq.n	800584e <TIM_Base_SetConfig+0xaa>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	4a36      	ldr	r2, [pc, #216]	@ (80058ec <TIM_Base_SetConfig+0x148>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d01b      	beq.n	800584e <TIM_Base_SetConfig+0xaa>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	4a35      	ldr	r2, [pc, #212]	@ (80058f0 <TIM_Base_SetConfig+0x14c>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d017      	beq.n	800584e <TIM_Base_SetConfig+0xaa>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	4a34      	ldr	r2, [pc, #208]	@ (80058f4 <TIM_Base_SetConfig+0x150>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d013      	beq.n	800584e <TIM_Base_SetConfig+0xaa>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4a33      	ldr	r2, [pc, #204]	@ (80058f8 <TIM_Base_SetConfig+0x154>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d00f      	beq.n	800584e <TIM_Base_SetConfig+0xaa>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4a33      	ldr	r2, [pc, #204]	@ (8005900 <TIM_Base_SetConfig+0x15c>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d00b      	beq.n	800584e <TIM_Base_SetConfig+0xaa>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4a32      	ldr	r2, [pc, #200]	@ (8005904 <TIM_Base_SetConfig+0x160>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d007      	beq.n	800584e <TIM_Base_SetConfig+0xaa>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	4a31      	ldr	r2, [pc, #196]	@ (8005908 <TIM_Base_SetConfig+0x164>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d003      	beq.n	800584e <TIM_Base_SetConfig+0xaa>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	4a2c      	ldr	r2, [pc, #176]	@ (80058fc <TIM_Base_SetConfig+0x158>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d108      	bne.n	8005860 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005854:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	68db      	ldr	r3, [r3, #12]
 800585a:	68fa      	ldr	r2, [r7, #12]
 800585c:	4313      	orrs	r3, r2
 800585e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	695b      	ldr	r3, [r3, #20]
 800586a:	4313      	orrs	r3, r2
 800586c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	68fa      	ldr	r2, [r7, #12]
 8005872:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	689a      	ldr	r2, [r3, #8]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	4a18      	ldr	r2, [pc, #96]	@ (80058e8 <TIM_Base_SetConfig+0x144>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d013      	beq.n	80058b4 <TIM_Base_SetConfig+0x110>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	4a1a      	ldr	r2, [pc, #104]	@ (80058f8 <TIM_Base_SetConfig+0x154>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d00f      	beq.n	80058b4 <TIM_Base_SetConfig+0x110>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	4a1a      	ldr	r2, [pc, #104]	@ (8005900 <TIM_Base_SetConfig+0x15c>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d00b      	beq.n	80058b4 <TIM_Base_SetConfig+0x110>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	4a19      	ldr	r2, [pc, #100]	@ (8005904 <TIM_Base_SetConfig+0x160>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d007      	beq.n	80058b4 <TIM_Base_SetConfig+0x110>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	4a18      	ldr	r2, [pc, #96]	@ (8005908 <TIM_Base_SetConfig+0x164>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d003      	beq.n	80058b4 <TIM_Base_SetConfig+0x110>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	4a13      	ldr	r2, [pc, #76]	@ (80058fc <TIM_Base_SetConfig+0x158>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d103      	bne.n	80058bc <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	691a      	ldr	r2, [r3, #16]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2201      	movs	r2, #1
 80058c0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	691b      	ldr	r3, [r3, #16]
 80058c6:	f003 0301 	and.w	r3, r3, #1
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d105      	bne.n	80058da <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	691b      	ldr	r3, [r3, #16]
 80058d2:	f023 0201 	bic.w	r2, r3, #1
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	611a      	str	r2, [r3, #16]
  }
}
 80058da:	bf00      	nop
 80058dc:	3714      	adds	r7, #20
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr
 80058e6:	bf00      	nop
 80058e8:	40012c00 	.word	0x40012c00
 80058ec:	40000400 	.word	0x40000400
 80058f0:	40000800 	.word	0x40000800
 80058f4:	40000c00 	.word	0x40000c00
 80058f8:	40013400 	.word	0x40013400
 80058fc:	40015000 	.word	0x40015000
 8005900:	40014000 	.word	0x40014000
 8005904:	40014400 	.word	0x40014400
 8005908:	40014800 	.word	0x40014800

0800590c <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800590c:	b480      	push	{r7}
 800590e:	b083      	sub	sp, #12
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	4a26      	ldr	r2, [pc, #152]	@ (80059b0 <TIM_ResetCallback+0xa4>)
 8005918:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	4a25      	ldr	r2, [pc, #148]	@ (80059b4 <TIM_ResetCallback+0xa8>)
 8005920:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	4a24      	ldr	r2, [pc, #144]	@ (80059b8 <TIM_ResetCallback+0xac>)
 8005928:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	4a23      	ldr	r2, [pc, #140]	@ (80059bc <TIM_ResetCallback+0xb0>)
 8005930:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	4a22      	ldr	r2, [pc, #136]	@ (80059c0 <TIM_ResetCallback+0xb4>)
 8005938:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	4a21      	ldr	r2, [pc, #132]	@ (80059c4 <TIM_ResetCallback+0xb8>)
 8005940:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	4a20      	ldr	r2, [pc, #128]	@ (80059c8 <TIM_ResetCallback+0xbc>)
 8005948:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	4a1f      	ldr	r2, [pc, #124]	@ (80059cc <TIM_ResetCallback+0xc0>)
 8005950:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	4a1e      	ldr	r2, [pc, #120]	@ (80059d0 <TIM_ResetCallback+0xc4>)
 8005958:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	4a1d      	ldr	r2, [pc, #116]	@ (80059d4 <TIM_ResetCallback+0xc8>)
 8005960:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	4a1c      	ldr	r2, [pc, #112]	@ (80059d8 <TIM_ResetCallback+0xcc>)
 8005968:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	4a1b      	ldr	r2, [pc, #108]	@ (80059dc <TIM_ResetCallback+0xd0>)
 8005970:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	4a1a      	ldr	r2, [pc, #104]	@ (80059e0 <TIM_ResetCallback+0xd4>)
 8005978:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	4a19      	ldr	r2, [pc, #100]	@ (80059e4 <TIM_ResetCallback+0xd8>)
 8005980:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	4a18      	ldr	r2, [pc, #96]	@ (80059e8 <TIM_ResetCallback+0xdc>)
 8005988:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	4a17      	ldr	r2, [pc, #92]	@ (80059ec <TIM_ResetCallback+0xe0>)
 8005990:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	4a16      	ldr	r2, [pc, #88]	@ (80059f0 <TIM_ResetCallback+0xe4>)
 8005998:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	4a15      	ldr	r2, [pc, #84]	@ (80059f4 <TIM_ResetCallback+0xe8>)
 80059a0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 80059a4:	bf00      	nop
 80059a6:	370c      	adds	r7, #12
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr
 80059b0:	080056db 	.word	0x080056db
 80059b4:	080056ef 	.word	0x080056ef
 80059b8:	08005767 	.word	0x08005767
 80059bc:	0800577b 	.word	0x0800577b
 80059c0:	08005717 	.word	0x08005717
 80059c4:	0800572b 	.word	0x0800572b
 80059c8:	08005703 	.word	0x08005703
 80059cc:	0800573f 	.word	0x0800573f
 80059d0:	08005753 	.word	0x08005753
 80059d4:	0800578f 	.word	0x0800578f
 80059d8:	080059f9 	.word	0x080059f9
 80059dc:	08005a0d 	.word	0x08005a0d
 80059e0:	08005a21 	.word	0x08005a21
 80059e4:	08005a35 	.word	0x08005a35
 80059e8:	08005a49 	.word	0x08005a49
 80059ec:	08005a5d 	.word	0x08005a5d
 80059f0:	08005a71 	.word	0x08005a71
 80059f4:	08005a85 	.word	0x08005a85

080059f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b083      	sub	sp, #12
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a00:	bf00      	nop
 8005a02:	370c      	adds	r7, #12
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr

08005a0c <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b083      	sub	sp, #12
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8005a14:	bf00      	nop
 8005a16:	370c      	adds	r7, #12
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr

08005a20 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b083      	sub	sp, #12
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a28:	bf00      	nop
 8005a2a:	370c      	adds	r7, #12
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr

08005a34 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b083      	sub	sp, #12
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005a3c:	bf00      	nop
 8005a3e:	370c      	adds	r7, #12
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr

08005a48 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b083      	sub	sp, #12
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005a50:	bf00      	nop
 8005a52:	370c      	adds	r7, #12
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr

08005a5c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005a64:	bf00      	nop
 8005a66:	370c      	adds	r7, #12
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr

08005a70 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b083      	sub	sp, #12
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005a78:	bf00      	nop
 8005a7a:	370c      	adds	r7, #12
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr

08005a84 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b083      	sub	sp, #12
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005a8c:	bf00      	nop
 8005a8e:	370c      	adds	r7, #12
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr

08005a98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b082      	sub	sp, #8
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d101      	bne.n	8005aaa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e050      	b.n	8005b4c <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d114      	bne.n	8005ade <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f000 f8a7 	bl	8005c10 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d103      	bne.n	8005ad4 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	4a21      	ldr	r2, [pc, #132]	@ (8005b54 <HAL_UART_Init+0xbc>)
 8005ad0:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2224      	movs	r2, #36	@ 0x24
 8005ae2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f022 0201 	bic.w	r2, r2, #1
 8005af4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d002      	beq.n	8005b04 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f000 fbd4 	bl	80062ac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f000 f8d5 	bl	8005cb4 <UART_SetConfig>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d101      	bne.n	8005b14 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	e01b      	b.n	8005b4c <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	685a      	ldr	r2, [r3, #4]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005b22:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	689a      	ldr	r2, [r3, #8]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005b32:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f042 0201 	orr.w	r2, r2, #1
 8005b42:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f000 fc53 	bl	80063f0 <UART_CheckIdleState>
 8005b4a:	4603      	mov	r3, r0
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3708      	adds	r7, #8
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}
 8005b54:	0800107d 	.word	0x0800107d

08005b58 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b083      	sub	sp, #12
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005b60:	bf00      	nop
 8005b62:	370c      	adds	r7, #12
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr

08005b6c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b083      	sub	sp, #12
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8005b74:	bf00      	nop
 8005b76:	370c      	adds	r7, #12
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr

08005b80 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b083      	sub	sp, #12
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8005b88:	bf00      	nop
 8005b8a:	370c      	adds	r7, #12
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr

08005b94 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b083      	sub	sp, #12
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005b9c:	bf00      	nop
 8005b9e:	370c      	adds	r7, #12
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr

08005ba8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b083      	sub	sp, #12
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005bb0:	bf00      	nop
 8005bb2:	370c      	adds	r7, #12
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bba:	4770      	bx	lr

08005bbc <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b083      	sub	sp, #12
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8005bc4:	bf00      	nop
 8005bc6:	370c      	adds	r7, #12
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr

08005bd0 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8005bd8:	bf00      	nop
 8005bda:	370c      	adds	r7, #12
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr

08005be4 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b083      	sub	sp, #12
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8005bec:	bf00      	nop
 8005bee:	370c      	adds	r7, #12
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr

08005bf8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b083      	sub	sp, #12
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	460b      	mov	r3, r1
 8005c02:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005c04:	bf00      	nop
 8005c06:	370c      	adds	r7, #12
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr

08005c10 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b083      	sub	sp, #12
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	4a1a      	ldr	r2, [pc, #104]	@ (8005c84 <UART_InitCallbacksToDefault+0x74>)
 8005c1c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	4a19      	ldr	r2, [pc, #100]	@ (8005c88 <UART_InitCallbacksToDefault+0x78>)
 8005c24:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	4a18      	ldr	r2, [pc, #96]	@ (8005c8c <UART_InitCallbacksToDefault+0x7c>)
 8005c2c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	4a17      	ldr	r2, [pc, #92]	@ (8005c90 <UART_InitCallbacksToDefault+0x80>)
 8005c34:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	4a16      	ldr	r2, [pc, #88]	@ (8005c94 <UART_InitCallbacksToDefault+0x84>)
 8005c3c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	4a15      	ldr	r2, [pc, #84]	@ (8005c98 <UART_InitCallbacksToDefault+0x88>)
 8005c44:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	4a14      	ldr	r2, [pc, #80]	@ (8005c9c <UART_InitCallbacksToDefault+0x8c>)
 8005c4c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	4a13      	ldr	r2, [pc, #76]	@ (8005ca0 <UART_InitCallbacksToDefault+0x90>)
 8005c54:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	4a12      	ldr	r2, [pc, #72]	@ (8005ca4 <UART_InitCallbacksToDefault+0x94>)
 8005c5c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	4a11      	ldr	r2, [pc, #68]	@ (8005ca8 <UART_InitCallbacksToDefault+0x98>)
 8005c64:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	4a10      	ldr	r2, [pc, #64]	@ (8005cac <UART_InitCallbacksToDefault+0x9c>)
 8005c6c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	4a0f      	ldr	r2, [pc, #60]	@ (8005cb0 <UART_InitCallbacksToDefault+0xa0>)
 8005c74:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 8005c78:	bf00      	nop
 8005c7a:	370c      	adds	r7, #12
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c82:	4770      	bx	lr
 8005c84:	08005b6d 	.word	0x08005b6d
 8005c88:	08005b59 	.word	0x08005b59
 8005c8c:	08005b95 	.word	0x08005b95
 8005c90:	08005b81 	.word	0x08005b81
 8005c94:	08005ba9 	.word	0x08005ba9
 8005c98:	08005bbd 	.word	0x08005bbd
 8005c9c:	08005bd1 	.word	0x08005bd1
 8005ca0:	08005be5 	.word	0x08005be5
 8005ca4:	080066eb 	.word	0x080066eb
 8005ca8:	080066ff 	.word	0x080066ff
 8005cac:	08006713 	.word	0x08006713
 8005cb0:	08005bf9 	.word	0x08005bf9

08005cb4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005cb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005cb8:	b08c      	sub	sp, #48	@ 0x30
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	689a      	ldr	r2, [r3, #8]
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	691b      	ldr	r3, [r3, #16]
 8005ccc:	431a      	orrs	r2, r3
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	695b      	ldr	r3, [r3, #20]
 8005cd2:	431a      	orrs	r2, r3
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	69db      	ldr	r3, [r3, #28]
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	4baa      	ldr	r3, [pc, #680]	@ (8005f8c <UART_SetConfig+0x2d8>)
 8005ce4:	4013      	ands	r3, r2
 8005ce6:	697a      	ldr	r2, [r7, #20]
 8005ce8:	6812      	ldr	r2, [r2, #0]
 8005cea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005cec:	430b      	orrs	r3, r1
 8005cee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	68da      	ldr	r2, [r3, #12]
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	430a      	orrs	r2, r1
 8005d04:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	699b      	ldr	r3, [r3, #24]
 8005d0a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a9f      	ldr	r2, [pc, #636]	@ (8005f90 <UART_SetConfig+0x2dc>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d004      	beq.n	8005d20 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	6a1b      	ldr	r3, [r3, #32]
 8005d1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005d2a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005d2e:	697a      	ldr	r2, [r7, #20]
 8005d30:	6812      	ldr	r2, [r2, #0]
 8005d32:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005d34:	430b      	orrs	r3, r1
 8005d36:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d3e:	f023 010f 	bic.w	r1, r3, #15
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	430a      	orrs	r2, r1
 8005d4c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a90      	ldr	r2, [pc, #576]	@ (8005f94 <UART_SetConfig+0x2e0>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d125      	bne.n	8005da4 <UART_SetConfig+0xf0>
 8005d58:	4b8f      	ldr	r3, [pc, #572]	@ (8005f98 <UART_SetConfig+0x2e4>)
 8005d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d5e:	f003 0303 	and.w	r3, r3, #3
 8005d62:	2b03      	cmp	r3, #3
 8005d64:	d81a      	bhi.n	8005d9c <UART_SetConfig+0xe8>
 8005d66:	a201      	add	r2, pc, #4	@ (adr r2, 8005d6c <UART_SetConfig+0xb8>)
 8005d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d6c:	08005d7d 	.word	0x08005d7d
 8005d70:	08005d8d 	.word	0x08005d8d
 8005d74:	08005d85 	.word	0x08005d85
 8005d78:	08005d95 	.word	0x08005d95
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d82:	e116      	b.n	8005fb2 <UART_SetConfig+0x2fe>
 8005d84:	2302      	movs	r3, #2
 8005d86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d8a:	e112      	b.n	8005fb2 <UART_SetConfig+0x2fe>
 8005d8c:	2304      	movs	r3, #4
 8005d8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d92:	e10e      	b.n	8005fb2 <UART_SetConfig+0x2fe>
 8005d94:	2308      	movs	r3, #8
 8005d96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d9a:	e10a      	b.n	8005fb2 <UART_SetConfig+0x2fe>
 8005d9c:	2310      	movs	r3, #16
 8005d9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005da2:	e106      	b.n	8005fb2 <UART_SetConfig+0x2fe>
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a7c      	ldr	r2, [pc, #496]	@ (8005f9c <UART_SetConfig+0x2e8>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d138      	bne.n	8005e20 <UART_SetConfig+0x16c>
 8005dae:	4b7a      	ldr	r3, [pc, #488]	@ (8005f98 <UART_SetConfig+0x2e4>)
 8005db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005db4:	f003 030c 	and.w	r3, r3, #12
 8005db8:	2b0c      	cmp	r3, #12
 8005dba:	d82d      	bhi.n	8005e18 <UART_SetConfig+0x164>
 8005dbc:	a201      	add	r2, pc, #4	@ (adr r2, 8005dc4 <UART_SetConfig+0x110>)
 8005dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dc2:	bf00      	nop
 8005dc4:	08005df9 	.word	0x08005df9
 8005dc8:	08005e19 	.word	0x08005e19
 8005dcc:	08005e19 	.word	0x08005e19
 8005dd0:	08005e19 	.word	0x08005e19
 8005dd4:	08005e09 	.word	0x08005e09
 8005dd8:	08005e19 	.word	0x08005e19
 8005ddc:	08005e19 	.word	0x08005e19
 8005de0:	08005e19 	.word	0x08005e19
 8005de4:	08005e01 	.word	0x08005e01
 8005de8:	08005e19 	.word	0x08005e19
 8005dec:	08005e19 	.word	0x08005e19
 8005df0:	08005e19 	.word	0x08005e19
 8005df4:	08005e11 	.word	0x08005e11
 8005df8:	2300      	movs	r3, #0
 8005dfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005dfe:	e0d8      	b.n	8005fb2 <UART_SetConfig+0x2fe>
 8005e00:	2302      	movs	r3, #2
 8005e02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e06:	e0d4      	b.n	8005fb2 <UART_SetConfig+0x2fe>
 8005e08:	2304      	movs	r3, #4
 8005e0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e0e:	e0d0      	b.n	8005fb2 <UART_SetConfig+0x2fe>
 8005e10:	2308      	movs	r3, #8
 8005e12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e16:	e0cc      	b.n	8005fb2 <UART_SetConfig+0x2fe>
 8005e18:	2310      	movs	r3, #16
 8005e1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e1e:	e0c8      	b.n	8005fb2 <UART_SetConfig+0x2fe>
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a5e      	ldr	r2, [pc, #376]	@ (8005fa0 <UART_SetConfig+0x2ec>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d125      	bne.n	8005e76 <UART_SetConfig+0x1c2>
 8005e2a:	4b5b      	ldr	r3, [pc, #364]	@ (8005f98 <UART_SetConfig+0x2e4>)
 8005e2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e30:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005e34:	2b30      	cmp	r3, #48	@ 0x30
 8005e36:	d016      	beq.n	8005e66 <UART_SetConfig+0x1b2>
 8005e38:	2b30      	cmp	r3, #48	@ 0x30
 8005e3a:	d818      	bhi.n	8005e6e <UART_SetConfig+0x1ba>
 8005e3c:	2b20      	cmp	r3, #32
 8005e3e:	d00a      	beq.n	8005e56 <UART_SetConfig+0x1a2>
 8005e40:	2b20      	cmp	r3, #32
 8005e42:	d814      	bhi.n	8005e6e <UART_SetConfig+0x1ba>
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d002      	beq.n	8005e4e <UART_SetConfig+0x19a>
 8005e48:	2b10      	cmp	r3, #16
 8005e4a:	d008      	beq.n	8005e5e <UART_SetConfig+0x1aa>
 8005e4c:	e00f      	b.n	8005e6e <UART_SetConfig+0x1ba>
 8005e4e:	2300      	movs	r3, #0
 8005e50:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e54:	e0ad      	b.n	8005fb2 <UART_SetConfig+0x2fe>
 8005e56:	2302      	movs	r3, #2
 8005e58:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e5c:	e0a9      	b.n	8005fb2 <UART_SetConfig+0x2fe>
 8005e5e:	2304      	movs	r3, #4
 8005e60:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e64:	e0a5      	b.n	8005fb2 <UART_SetConfig+0x2fe>
 8005e66:	2308      	movs	r3, #8
 8005e68:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e6c:	e0a1      	b.n	8005fb2 <UART_SetConfig+0x2fe>
 8005e6e:	2310      	movs	r3, #16
 8005e70:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e74:	e09d      	b.n	8005fb2 <UART_SetConfig+0x2fe>
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a4a      	ldr	r2, [pc, #296]	@ (8005fa4 <UART_SetConfig+0x2f0>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d125      	bne.n	8005ecc <UART_SetConfig+0x218>
 8005e80:	4b45      	ldr	r3, [pc, #276]	@ (8005f98 <UART_SetConfig+0x2e4>)
 8005e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e86:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005e8a:	2bc0      	cmp	r3, #192	@ 0xc0
 8005e8c:	d016      	beq.n	8005ebc <UART_SetConfig+0x208>
 8005e8e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005e90:	d818      	bhi.n	8005ec4 <UART_SetConfig+0x210>
 8005e92:	2b80      	cmp	r3, #128	@ 0x80
 8005e94:	d00a      	beq.n	8005eac <UART_SetConfig+0x1f8>
 8005e96:	2b80      	cmp	r3, #128	@ 0x80
 8005e98:	d814      	bhi.n	8005ec4 <UART_SetConfig+0x210>
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d002      	beq.n	8005ea4 <UART_SetConfig+0x1f0>
 8005e9e:	2b40      	cmp	r3, #64	@ 0x40
 8005ea0:	d008      	beq.n	8005eb4 <UART_SetConfig+0x200>
 8005ea2:	e00f      	b.n	8005ec4 <UART_SetConfig+0x210>
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005eaa:	e082      	b.n	8005fb2 <UART_SetConfig+0x2fe>
 8005eac:	2302      	movs	r3, #2
 8005eae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005eb2:	e07e      	b.n	8005fb2 <UART_SetConfig+0x2fe>
 8005eb4:	2304      	movs	r3, #4
 8005eb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005eba:	e07a      	b.n	8005fb2 <UART_SetConfig+0x2fe>
 8005ebc:	2308      	movs	r3, #8
 8005ebe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ec2:	e076      	b.n	8005fb2 <UART_SetConfig+0x2fe>
 8005ec4:	2310      	movs	r3, #16
 8005ec6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005eca:	e072      	b.n	8005fb2 <UART_SetConfig+0x2fe>
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a35      	ldr	r2, [pc, #212]	@ (8005fa8 <UART_SetConfig+0x2f4>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d12a      	bne.n	8005f2c <UART_SetConfig+0x278>
 8005ed6:	4b30      	ldr	r3, [pc, #192]	@ (8005f98 <UART_SetConfig+0x2e4>)
 8005ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005edc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ee0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ee4:	d01a      	beq.n	8005f1c <UART_SetConfig+0x268>
 8005ee6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005eea:	d81b      	bhi.n	8005f24 <UART_SetConfig+0x270>
 8005eec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ef0:	d00c      	beq.n	8005f0c <UART_SetConfig+0x258>
 8005ef2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ef6:	d815      	bhi.n	8005f24 <UART_SetConfig+0x270>
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d003      	beq.n	8005f04 <UART_SetConfig+0x250>
 8005efc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f00:	d008      	beq.n	8005f14 <UART_SetConfig+0x260>
 8005f02:	e00f      	b.n	8005f24 <UART_SetConfig+0x270>
 8005f04:	2300      	movs	r3, #0
 8005f06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f0a:	e052      	b.n	8005fb2 <UART_SetConfig+0x2fe>
 8005f0c:	2302      	movs	r3, #2
 8005f0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f12:	e04e      	b.n	8005fb2 <UART_SetConfig+0x2fe>
 8005f14:	2304      	movs	r3, #4
 8005f16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f1a:	e04a      	b.n	8005fb2 <UART_SetConfig+0x2fe>
 8005f1c:	2308      	movs	r3, #8
 8005f1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f22:	e046      	b.n	8005fb2 <UART_SetConfig+0x2fe>
 8005f24:	2310      	movs	r3, #16
 8005f26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f2a:	e042      	b.n	8005fb2 <UART_SetConfig+0x2fe>
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a17      	ldr	r2, [pc, #92]	@ (8005f90 <UART_SetConfig+0x2dc>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d13a      	bne.n	8005fac <UART_SetConfig+0x2f8>
 8005f36:	4b18      	ldr	r3, [pc, #96]	@ (8005f98 <UART_SetConfig+0x2e4>)
 8005f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f3c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005f40:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005f44:	d01a      	beq.n	8005f7c <UART_SetConfig+0x2c8>
 8005f46:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005f4a:	d81b      	bhi.n	8005f84 <UART_SetConfig+0x2d0>
 8005f4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f50:	d00c      	beq.n	8005f6c <UART_SetConfig+0x2b8>
 8005f52:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f56:	d815      	bhi.n	8005f84 <UART_SetConfig+0x2d0>
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d003      	beq.n	8005f64 <UART_SetConfig+0x2b0>
 8005f5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f60:	d008      	beq.n	8005f74 <UART_SetConfig+0x2c0>
 8005f62:	e00f      	b.n	8005f84 <UART_SetConfig+0x2d0>
 8005f64:	2300      	movs	r3, #0
 8005f66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f6a:	e022      	b.n	8005fb2 <UART_SetConfig+0x2fe>
 8005f6c:	2302      	movs	r3, #2
 8005f6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f72:	e01e      	b.n	8005fb2 <UART_SetConfig+0x2fe>
 8005f74:	2304      	movs	r3, #4
 8005f76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f7a:	e01a      	b.n	8005fb2 <UART_SetConfig+0x2fe>
 8005f7c:	2308      	movs	r3, #8
 8005f7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f82:	e016      	b.n	8005fb2 <UART_SetConfig+0x2fe>
 8005f84:	2310      	movs	r3, #16
 8005f86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f8a:	e012      	b.n	8005fb2 <UART_SetConfig+0x2fe>
 8005f8c:	cfff69f3 	.word	0xcfff69f3
 8005f90:	40008000 	.word	0x40008000
 8005f94:	40013800 	.word	0x40013800
 8005f98:	40021000 	.word	0x40021000
 8005f9c:	40004400 	.word	0x40004400
 8005fa0:	40004800 	.word	0x40004800
 8005fa4:	40004c00 	.word	0x40004c00
 8005fa8:	40005000 	.word	0x40005000
 8005fac:	2310      	movs	r3, #16
 8005fae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4aae      	ldr	r2, [pc, #696]	@ (8006270 <UART_SetConfig+0x5bc>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	f040 8097 	bne.w	80060ec <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005fbe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005fc2:	2b08      	cmp	r3, #8
 8005fc4:	d823      	bhi.n	800600e <UART_SetConfig+0x35a>
 8005fc6:	a201      	add	r2, pc, #4	@ (adr r2, 8005fcc <UART_SetConfig+0x318>)
 8005fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fcc:	08005ff1 	.word	0x08005ff1
 8005fd0:	0800600f 	.word	0x0800600f
 8005fd4:	08005ff9 	.word	0x08005ff9
 8005fd8:	0800600f 	.word	0x0800600f
 8005fdc:	08005fff 	.word	0x08005fff
 8005fe0:	0800600f 	.word	0x0800600f
 8005fe4:	0800600f 	.word	0x0800600f
 8005fe8:	0800600f 	.word	0x0800600f
 8005fec:	08006007 	.word	0x08006007
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ff0:	f7fe f946 	bl	8004280 <HAL_RCC_GetPCLK1Freq>
 8005ff4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005ff6:	e010      	b.n	800601a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ff8:	4b9e      	ldr	r3, [pc, #632]	@ (8006274 <UART_SetConfig+0x5c0>)
 8005ffa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005ffc:	e00d      	b.n	800601a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ffe:	f7fe f8d1 	bl	80041a4 <HAL_RCC_GetSysClockFreq>
 8006002:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006004:	e009      	b.n	800601a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006006:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800600a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800600c:	e005      	b.n	800601a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800600e:	2300      	movs	r3, #0
 8006010:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006018:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800601a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800601c:	2b00      	cmp	r3, #0
 800601e:	f000 8130 	beq.w	8006282 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006026:	4a94      	ldr	r2, [pc, #592]	@ (8006278 <UART_SetConfig+0x5c4>)
 8006028:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800602c:	461a      	mov	r2, r3
 800602e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006030:	fbb3 f3f2 	udiv	r3, r3, r2
 8006034:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	685a      	ldr	r2, [r3, #4]
 800603a:	4613      	mov	r3, r2
 800603c:	005b      	lsls	r3, r3, #1
 800603e:	4413      	add	r3, r2
 8006040:	69ba      	ldr	r2, [r7, #24]
 8006042:	429a      	cmp	r2, r3
 8006044:	d305      	bcc.n	8006052 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800604c:	69ba      	ldr	r2, [r7, #24]
 800604e:	429a      	cmp	r2, r3
 8006050:	d903      	bls.n	800605a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006052:	2301      	movs	r3, #1
 8006054:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006058:	e113      	b.n	8006282 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800605a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800605c:	2200      	movs	r2, #0
 800605e:	60bb      	str	r3, [r7, #8]
 8006060:	60fa      	str	r2, [r7, #12]
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006066:	4a84      	ldr	r2, [pc, #528]	@ (8006278 <UART_SetConfig+0x5c4>)
 8006068:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800606c:	b29b      	uxth	r3, r3
 800606e:	2200      	movs	r2, #0
 8006070:	603b      	str	r3, [r7, #0]
 8006072:	607a      	str	r2, [r7, #4]
 8006074:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006078:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800607c:	f7fa f8cc 	bl	8000218 <__aeabi_uldivmod>
 8006080:	4602      	mov	r2, r0
 8006082:	460b      	mov	r3, r1
 8006084:	4610      	mov	r0, r2
 8006086:	4619      	mov	r1, r3
 8006088:	f04f 0200 	mov.w	r2, #0
 800608c:	f04f 0300 	mov.w	r3, #0
 8006090:	020b      	lsls	r3, r1, #8
 8006092:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006096:	0202      	lsls	r2, r0, #8
 8006098:	6979      	ldr	r1, [r7, #20]
 800609a:	6849      	ldr	r1, [r1, #4]
 800609c:	0849      	lsrs	r1, r1, #1
 800609e:	2000      	movs	r0, #0
 80060a0:	460c      	mov	r4, r1
 80060a2:	4605      	mov	r5, r0
 80060a4:	eb12 0804 	adds.w	r8, r2, r4
 80060a8:	eb43 0905 	adc.w	r9, r3, r5
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	2200      	movs	r2, #0
 80060b2:	469a      	mov	sl, r3
 80060b4:	4693      	mov	fp, r2
 80060b6:	4652      	mov	r2, sl
 80060b8:	465b      	mov	r3, fp
 80060ba:	4640      	mov	r0, r8
 80060bc:	4649      	mov	r1, r9
 80060be:	f7fa f8ab 	bl	8000218 <__aeabi_uldivmod>
 80060c2:	4602      	mov	r2, r0
 80060c4:	460b      	mov	r3, r1
 80060c6:	4613      	mov	r3, r2
 80060c8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80060ca:	6a3b      	ldr	r3, [r7, #32]
 80060cc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80060d0:	d308      	bcc.n	80060e4 <UART_SetConfig+0x430>
 80060d2:	6a3b      	ldr	r3, [r7, #32]
 80060d4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80060d8:	d204      	bcs.n	80060e4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	6a3a      	ldr	r2, [r7, #32]
 80060e0:	60da      	str	r2, [r3, #12]
 80060e2:	e0ce      	b.n	8006282 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80060e4:	2301      	movs	r3, #1
 80060e6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80060ea:	e0ca      	b.n	8006282 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	69db      	ldr	r3, [r3, #28]
 80060f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80060f4:	d166      	bne.n	80061c4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80060f6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80060fa:	2b08      	cmp	r3, #8
 80060fc:	d827      	bhi.n	800614e <UART_SetConfig+0x49a>
 80060fe:	a201      	add	r2, pc, #4	@ (adr r2, 8006104 <UART_SetConfig+0x450>)
 8006100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006104:	08006129 	.word	0x08006129
 8006108:	08006131 	.word	0x08006131
 800610c:	08006139 	.word	0x08006139
 8006110:	0800614f 	.word	0x0800614f
 8006114:	0800613f 	.word	0x0800613f
 8006118:	0800614f 	.word	0x0800614f
 800611c:	0800614f 	.word	0x0800614f
 8006120:	0800614f 	.word	0x0800614f
 8006124:	08006147 	.word	0x08006147
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006128:	f7fe f8aa 	bl	8004280 <HAL_RCC_GetPCLK1Freq>
 800612c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800612e:	e014      	b.n	800615a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006130:	f7fe f8bc 	bl	80042ac <HAL_RCC_GetPCLK2Freq>
 8006134:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006136:	e010      	b.n	800615a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006138:	4b4e      	ldr	r3, [pc, #312]	@ (8006274 <UART_SetConfig+0x5c0>)
 800613a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800613c:	e00d      	b.n	800615a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800613e:	f7fe f831 	bl	80041a4 <HAL_RCC_GetSysClockFreq>
 8006142:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006144:	e009      	b.n	800615a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006146:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800614a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800614c:	e005      	b.n	800615a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800614e:	2300      	movs	r3, #0
 8006150:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006158:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800615a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800615c:	2b00      	cmp	r3, #0
 800615e:	f000 8090 	beq.w	8006282 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006166:	4a44      	ldr	r2, [pc, #272]	@ (8006278 <UART_SetConfig+0x5c4>)
 8006168:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800616c:	461a      	mov	r2, r3
 800616e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006170:	fbb3 f3f2 	udiv	r3, r3, r2
 8006174:	005a      	lsls	r2, r3, #1
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	085b      	lsrs	r3, r3, #1
 800617c:	441a      	add	r2, r3
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	fbb2 f3f3 	udiv	r3, r2, r3
 8006186:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006188:	6a3b      	ldr	r3, [r7, #32]
 800618a:	2b0f      	cmp	r3, #15
 800618c:	d916      	bls.n	80061bc <UART_SetConfig+0x508>
 800618e:	6a3b      	ldr	r3, [r7, #32]
 8006190:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006194:	d212      	bcs.n	80061bc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006196:	6a3b      	ldr	r3, [r7, #32]
 8006198:	b29b      	uxth	r3, r3
 800619a:	f023 030f 	bic.w	r3, r3, #15
 800619e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80061a0:	6a3b      	ldr	r3, [r7, #32]
 80061a2:	085b      	lsrs	r3, r3, #1
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	f003 0307 	and.w	r3, r3, #7
 80061aa:	b29a      	uxth	r2, r3
 80061ac:	8bfb      	ldrh	r3, [r7, #30]
 80061ae:	4313      	orrs	r3, r2
 80061b0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	8bfa      	ldrh	r2, [r7, #30]
 80061b8:	60da      	str	r2, [r3, #12]
 80061ba:	e062      	b.n	8006282 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80061bc:	2301      	movs	r3, #1
 80061be:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80061c2:	e05e      	b.n	8006282 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80061c4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80061c8:	2b08      	cmp	r3, #8
 80061ca:	d828      	bhi.n	800621e <UART_SetConfig+0x56a>
 80061cc:	a201      	add	r2, pc, #4	@ (adr r2, 80061d4 <UART_SetConfig+0x520>)
 80061ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061d2:	bf00      	nop
 80061d4:	080061f9 	.word	0x080061f9
 80061d8:	08006201 	.word	0x08006201
 80061dc:	08006209 	.word	0x08006209
 80061e0:	0800621f 	.word	0x0800621f
 80061e4:	0800620f 	.word	0x0800620f
 80061e8:	0800621f 	.word	0x0800621f
 80061ec:	0800621f 	.word	0x0800621f
 80061f0:	0800621f 	.word	0x0800621f
 80061f4:	08006217 	.word	0x08006217
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061f8:	f7fe f842 	bl	8004280 <HAL_RCC_GetPCLK1Freq>
 80061fc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80061fe:	e014      	b.n	800622a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006200:	f7fe f854 	bl	80042ac <HAL_RCC_GetPCLK2Freq>
 8006204:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006206:	e010      	b.n	800622a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006208:	4b1a      	ldr	r3, [pc, #104]	@ (8006274 <UART_SetConfig+0x5c0>)
 800620a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800620c:	e00d      	b.n	800622a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800620e:	f7fd ffc9 	bl	80041a4 <HAL_RCC_GetSysClockFreq>
 8006212:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006214:	e009      	b.n	800622a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006216:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800621a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800621c:	e005      	b.n	800622a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800621e:	2300      	movs	r3, #0
 8006220:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006222:	2301      	movs	r3, #1
 8006224:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006228:	bf00      	nop
    }

    if (pclk != 0U)
 800622a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800622c:	2b00      	cmp	r3, #0
 800622e:	d028      	beq.n	8006282 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006234:	4a10      	ldr	r2, [pc, #64]	@ (8006278 <UART_SetConfig+0x5c4>)
 8006236:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800623a:	461a      	mov	r2, r3
 800623c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800623e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	085b      	lsrs	r3, r3, #1
 8006248:	441a      	add	r2, r3
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006252:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006254:	6a3b      	ldr	r3, [r7, #32]
 8006256:	2b0f      	cmp	r3, #15
 8006258:	d910      	bls.n	800627c <UART_SetConfig+0x5c8>
 800625a:	6a3b      	ldr	r3, [r7, #32]
 800625c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006260:	d20c      	bcs.n	800627c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006262:	6a3b      	ldr	r3, [r7, #32]
 8006264:	b29a      	uxth	r2, r3
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	60da      	str	r2, [r3, #12]
 800626c:	e009      	b.n	8006282 <UART_SetConfig+0x5ce>
 800626e:	bf00      	nop
 8006270:	40008000 	.word	0x40008000
 8006274:	00f42400 	.word	0x00f42400
 8006278:	080069b4 	.word	0x080069b4
      }
      else
      {
        ret = HAL_ERROR;
 800627c:	2301      	movs	r3, #1
 800627e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	2201      	movs	r2, #1
 8006286:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	2201      	movs	r2, #1
 800628e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	2200      	movs	r2, #0
 8006296:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	2200      	movs	r2, #0
 800629c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800629e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3730      	adds	r7, #48	@ 0x30
 80062a6:	46bd      	mov	sp, r7
 80062a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080062ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b083      	sub	sp, #12
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062b8:	f003 0308 	and.w	r3, r3, #8
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d00a      	beq.n	80062d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	430a      	orrs	r2, r1
 80062d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062da:	f003 0301 	and.w	r3, r3, #1
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d00a      	beq.n	80062f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	430a      	orrs	r2, r1
 80062f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062fc:	f003 0302 	and.w	r3, r3, #2
 8006300:	2b00      	cmp	r3, #0
 8006302:	d00a      	beq.n	800631a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	430a      	orrs	r2, r1
 8006318:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800631e:	f003 0304 	and.w	r3, r3, #4
 8006322:	2b00      	cmp	r3, #0
 8006324:	d00a      	beq.n	800633c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	430a      	orrs	r2, r1
 800633a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006340:	f003 0310 	and.w	r3, r3, #16
 8006344:	2b00      	cmp	r3, #0
 8006346:	d00a      	beq.n	800635e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	430a      	orrs	r2, r1
 800635c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006362:	f003 0320 	and.w	r3, r3, #32
 8006366:	2b00      	cmp	r3, #0
 8006368:	d00a      	beq.n	8006380 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	430a      	orrs	r2, r1
 800637e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006384:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006388:	2b00      	cmp	r3, #0
 800638a:	d01a      	beq.n	80063c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	430a      	orrs	r2, r1
 80063a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80063aa:	d10a      	bne.n	80063c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	430a      	orrs	r2, r1
 80063c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d00a      	beq.n	80063e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	430a      	orrs	r2, r1
 80063e2:	605a      	str	r2, [r3, #4]
  }
}
 80063e4:	bf00      	nop
 80063e6:	370c      	adds	r7, #12
 80063e8:	46bd      	mov	sp, r7
 80063ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ee:	4770      	bx	lr

080063f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b098      	sub	sp, #96	@ 0x60
 80063f4:	af02      	add	r7, sp, #8
 80063f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2200      	movs	r2, #0
 80063fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006400:	f7fb f846 	bl	8001490 <HAL_GetTick>
 8006404:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f003 0308 	and.w	r3, r3, #8
 8006410:	2b08      	cmp	r3, #8
 8006412:	d12f      	bne.n	8006474 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006414:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006418:	9300      	str	r3, [sp, #0]
 800641a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800641c:	2200      	movs	r2, #0
 800641e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f000 f88e 	bl	8006544 <UART_WaitOnFlagUntilTimeout>
 8006428:	4603      	mov	r3, r0
 800642a:	2b00      	cmp	r3, #0
 800642c:	d022      	beq.n	8006474 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006434:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006436:	e853 3f00 	ldrex	r3, [r3]
 800643a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800643c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800643e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006442:	653b      	str	r3, [r7, #80]	@ 0x50
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	461a      	mov	r2, r3
 800644a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800644c:	647b      	str	r3, [r7, #68]	@ 0x44
 800644e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006450:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006452:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006454:	e841 2300 	strex	r3, r2, [r1]
 8006458:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800645a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800645c:	2b00      	cmp	r3, #0
 800645e:	d1e6      	bne.n	800642e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2220      	movs	r2, #32
 8006464:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2200      	movs	r2, #0
 800646c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006470:	2303      	movs	r3, #3
 8006472:	e063      	b.n	800653c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f003 0304 	and.w	r3, r3, #4
 800647e:	2b04      	cmp	r3, #4
 8006480:	d149      	bne.n	8006516 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006482:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006486:	9300      	str	r3, [sp, #0]
 8006488:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800648a:	2200      	movs	r2, #0
 800648c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f000 f857 	bl	8006544 <UART_WaitOnFlagUntilTimeout>
 8006496:	4603      	mov	r3, r0
 8006498:	2b00      	cmp	r3, #0
 800649a:	d03c      	beq.n	8006516 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064a4:	e853 3f00 	ldrex	r3, [r3]
 80064a8:	623b      	str	r3, [r7, #32]
   return(result);
 80064aa:	6a3b      	ldr	r3, [r7, #32]
 80064ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80064b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	461a      	mov	r2, r3
 80064b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80064ba:	633b      	str	r3, [r7, #48]	@ 0x30
 80064bc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80064c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80064c2:	e841 2300 	strex	r3, r2, [r1]
 80064c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80064c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d1e6      	bne.n	800649c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	3308      	adds	r3, #8
 80064d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	e853 3f00 	ldrex	r3, [r3]
 80064dc:	60fb      	str	r3, [r7, #12]
   return(result);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	f023 0301 	bic.w	r3, r3, #1
 80064e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	3308      	adds	r3, #8
 80064ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80064ee:	61fa      	str	r2, [r7, #28]
 80064f0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064f2:	69b9      	ldr	r1, [r7, #24]
 80064f4:	69fa      	ldr	r2, [r7, #28]
 80064f6:	e841 2300 	strex	r3, r2, [r1]
 80064fa:	617b      	str	r3, [r7, #20]
   return(result);
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d1e5      	bne.n	80064ce <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2220      	movs	r2, #32
 8006506:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2200      	movs	r2, #0
 800650e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006512:	2303      	movs	r3, #3
 8006514:	e012      	b.n	800653c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2220      	movs	r2, #32
 800651a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2220      	movs	r2, #32
 8006522:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2200      	movs	r2, #0
 800652a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2200      	movs	r2, #0
 8006530:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2200      	movs	r2, #0
 8006536:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800653a:	2300      	movs	r3, #0
}
 800653c:	4618      	mov	r0, r3
 800653e:	3758      	adds	r7, #88	@ 0x58
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}

08006544 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b084      	sub	sp, #16
 8006548:	af00      	add	r7, sp, #0
 800654a:	60f8      	str	r0, [r7, #12]
 800654c:	60b9      	str	r1, [r7, #8]
 800654e:	603b      	str	r3, [r7, #0]
 8006550:	4613      	mov	r3, r2
 8006552:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006554:	e04f      	b.n	80065f6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006556:	69bb      	ldr	r3, [r7, #24]
 8006558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800655c:	d04b      	beq.n	80065f6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800655e:	f7fa ff97 	bl	8001490 <HAL_GetTick>
 8006562:	4602      	mov	r2, r0
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	1ad3      	subs	r3, r2, r3
 8006568:	69ba      	ldr	r2, [r7, #24]
 800656a:	429a      	cmp	r2, r3
 800656c:	d302      	bcc.n	8006574 <UART_WaitOnFlagUntilTimeout+0x30>
 800656e:	69bb      	ldr	r3, [r7, #24]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d101      	bne.n	8006578 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006574:	2303      	movs	r3, #3
 8006576:	e04e      	b.n	8006616 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f003 0304 	and.w	r3, r3, #4
 8006582:	2b00      	cmp	r3, #0
 8006584:	d037      	beq.n	80065f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	2b80      	cmp	r3, #128	@ 0x80
 800658a:	d034      	beq.n	80065f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	2b40      	cmp	r3, #64	@ 0x40
 8006590:	d031      	beq.n	80065f6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	69db      	ldr	r3, [r3, #28]
 8006598:	f003 0308 	and.w	r3, r3, #8
 800659c:	2b08      	cmp	r3, #8
 800659e:	d110      	bne.n	80065c2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	2208      	movs	r2, #8
 80065a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80065a8:	68f8      	ldr	r0, [r7, #12]
 80065aa:	f000 f838 	bl	800661e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2208      	movs	r2, #8
 80065b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2200      	movs	r2, #0
 80065ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80065be:	2301      	movs	r3, #1
 80065c0:	e029      	b.n	8006616 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	69db      	ldr	r3, [r3, #28]
 80065c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80065cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80065d0:	d111      	bne.n	80065f6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80065da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80065dc:	68f8      	ldr	r0, [r7, #12]
 80065de:	f000 f81e 	bl	800661e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2220      	movs	r2, #32
 80065e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2200      	movs	r2, #0
 80065ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80065f2:	2303      	movs	r3, #3
 80065f4:	e00f      	b.n	8006616 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	69da      	ldr	r2, [r3, #28]
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	4013      	ands	r3, r2
 8006600:	68ba      	ldr	r2, [r7, #8]
 8006602:	429a      	cmp	r2, r3
 8006604:	bf0c      	ite	eq
 8006606:	2301      	moveq	r3, #1
 8006608:	2300      	movne	r3, #0
 800660a:	b2db      	uxtb	r3, r3
 800660c:	461a      	mov	r2, r3
 800660e:	79fb      	ldrb	r3, [r7, #7]
 8006610:	429a      	cmp	r2, r3
 8006612:	d0a0      	beq.n	8006556 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006614:	2300      	movs	r3, #0
}
 8006616:	4618      	mov	r0, r3
 8006618:	3710      	adds	r7, #16
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}

0800661e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800661e:	b480      	push	{r7}
 8006620:	b095      	sub	sp, #84	@ 0x54
 8006622:	af00      	add	r7, sp, #0
 8006624:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800662c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800662e:	e853 3f00 	ldrex	r3, [r3]
 8006632:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006636:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800663a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	461a      	mov	r2, r3
 8006642:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006644:	643b      	str	r3, [r7, #64]	@ 0x40
 8006646:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006648:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800664a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800664c:	e841 2300 	strex	r3, r2, [r1]
 8006650:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006652:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006654:	2b00      	cmp	r3, #0
 8006656:	d1e6      	bne.n	8006626 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	3308      	adds	r3, #8
 800665e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006660:	6a3b      	ldr	r3, [r7, #32]
 8006662:	e853 3f00 	ldrex	r3, [r3]
 8006666:	61fb      	str	r3, [r7, #28]
   return(result);
 8006668:	69fb      	ldr	r3, [r7, #28]
 800666a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800666e:	f023 0301 	bic.w	r3, r3, #1
 8006672:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	3308      	adds	r3, #8
 800667a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800667c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800667e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006680:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006682:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006684:	e841 2300 	strex	r3, r2, [r1]
 8006688:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800668a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800668c:	2b00      	cmp	r3, #0
 800668e:	d1e3      	bne.n	8006658 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006694:	2b01      	cmp	r3, #1
 8006696:	d118      	bne.n	80066ca <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	e853 3f00 	ldrex	r3, [r3]
 80066a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	f023 0310 	bic.w	r3, r3, #16
 80066ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	461a      	mov	r2, r3
 80066b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80066b6:	61bb      	str	r3, [r7, #24]
 80066b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ba:	6979      	ldr	r1, [r7, #20]
 80066bc:	69ba      	ldr	r2, [r7, #24]
 80066be:	e841 2300 	strex	r3, r2, [r1]
 80066c2:	613b      	str	r3, [r7, #16]
   return(result);
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d1e6      	bne.n	8006698 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2220      	movs	r2, #32
 80066ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2200      	movs	r2, #0
 80066d6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2200      	movs	r2, #0
 80066dc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80066de:	bf00      	nop
 80066e0:	3754      	adds	r7, #84	@ 0x54
 80066e2:	46bd      	mov	sp, r7
 80066e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e8:	4770      	bx	lr

080066ea <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80066ea:	b480      	push	{r7}
 80066ec:	b083      	sub	sp, #12
 80066ee:	af00      	add	r7, sp, #0
 80066f0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80066f2:	bf00      	nop
 80066f4:	370c      	adds	r7, #12
 80066f6:	46bd      	mov	sp, r7
 80066f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fc:	4770      	bx	lr

080066fe <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80066fe:	b480      	push	{r7}
 8006700:	b083      	sub	sp, #12
 8006702:	af00      	add	r7, sp, #0
 8006704:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006706:	bf00      	nop
 8006708:	370c      	adds	r7, #12
 800670a:	46bd      	mov	sp, r7
 800670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006710:	4770      	bx	lr

08006712 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006712:	b480      	push	{r7}
 8006714:	b083      	sub	sp, #12
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800671a:	bf00      	nop
 800671c:	370c      	adds	r7, #12
 800671e:	46bd      	mov	sp, r7
 8006720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006724:	4770      	bx	lr

08006726 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006726:	b480      	push	{r7}
 8006728:	b085      	sub	sp, #20
 800672a:	af00      	add	r7, sp, #0
 800672c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006734:	2b01      	cmp	r3, #1
 8006736:	d101      	bne.n	800673c <HAL_UARTEx_DisableFifoMode+0x16>
 8006738:	2302      	movs	r3, #2
 800673a:	e027      	b.n	800678c <HAL_UARTEx_DisableFifoMode+0x66>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2201      	movs	r2, #1
 8006740:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2224      	movs	r2, #36	@ 0x24
 8006748:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f022 0201 	bic.w	r2, r2, #1
 8006762:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800676a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2200      	movs	r2, #0
 8006770:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	68fa      	ldr	r2, [r7, #12]
 8006778:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2220      	movs	r2, #32
 800677e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2200      	movs	r2, #0
 8006786:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800678a:	2300      	movs	r3, #0
}
 800678c:	4618      	mov	r0, r3
 800678e:	3714      	adds	r7, #20
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr

08006798 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b084      	sub	sp, #16
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d101      	bne.n	80067b0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80067ac:	2302      	movs	r3, #2
 80067ae:	e02d      	b.n	800680c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2201      	movs	r2, #1
 80067b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2224      	movs	r2, #36	@ 0x24
 80067bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	681a      	ldr	r2, [r3, #0]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f022 0201 	bic.w	r2, r2, #1
 80067d6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	683a      	ldr	r2, [r7, #0]
 80067e8:	430a      	orrs	r2, r1
 80067ea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f000 f84f 	bl	8006890 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	68fa      	ldr	r2, [r7, #12]
 80067f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2220      	movs	r2, #32
 80067fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2200      	movs	r2, #0
 8006806:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800680a:	2300      	movs	r3, #0
}
 800680c:	4618      	mov	r0, r3
 800680e:	3710      	adds	r7, #16
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}

08006814 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b084      	sub	sp, #16
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006824:	2b01      	cmp	r3, #1
 8006826:	d101      	bne.n	800682c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006828:	2302      	movs	r3, #2
 800682a:	e02d      	b.n	8006888 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2201      	movs	r2, #1
 8006830:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2224      	movs	r2, #36	@ 0x24
 8006838:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	681a      	ldr	r2, [r3, #0]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f022 0201 	bic.w	r2, r2, #1
 8006852:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	689b      	ldr	r3, [r3, #8]
 800685a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	683a      	ldr	r2, [r7, #0]
 8006864:	430a      	orrs	r2, r1
 8006866:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f000 f811 	bl	8006890 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	68fa      	ldr	r2, [r7, #12]
 8006874:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2220      	movs	r2, #32
 800687a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2200      	movs	r2, #0
 8006882:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006886:	2300      	movs	r3, #0
}
 8006888:	4618      	mov	r0, r3
 800688a:	3710      	adds	r7, #16
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}

08006890 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006890:	b480      	push	{r7}
 8006892:	b085      	sub	sp, #20
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800689c:	2b00      	cmp	r3, #0
 800689e:	d108      	bne.n	80068b2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2201      	movs	r2, #1
 80068a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2201      	movs	r2, #1
 80068ac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80068b0:	e031      	b.n	8006916 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80068b2:	2308      	movs	r3, #8
 80068b4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80068b6:	2308      	movs	r3, #8
 80068b8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	689b      	ldr	r3, [r3, #8]
 80068c0:	0e5b      	lsrs	r3, r3, #25
 80068c2:	b2db      	uxtb	r3, r3
 80068c4:	f003 0307 	and.w	r3, r3, #7
 80068c8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	689b      	ldr	r3, [r3, #8]
 80068d0:	0f5b      	lsrs	r3, r3, #29
 80068d2:	b2db      	uxtb	r3, r3
 80068d4:	f003 0307 	and.w	r3, r3, #7
 80068d8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80068da:	7bbb      	ldrb	r3, [r7, #14]
 80068dc:	7b3a      	ldrb	r2, [r7, #12]
 80068de:	4911      	ldr	r1, [pc, #68]	@ (8006924 <UARTEx_SetNbDataToProcess+0x94>)
 80068e0:	5c8a      	ldrb	r2, [r1, r2]
 80068e2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80068e6:	7b3a      	ldrb	r2, [r7, #12]
 80068e8:	490f      	ldr	r1, [pc, #60]	@ (8006928 <UARTEx_SetNbDataToProcess+0x98>)
 80068ea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80068ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80068f0:	b29a      	uxth	r2, r3
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80068f8:	7bfb      	ldrb	r3, [r7, #15]
 80068fa:	7b7a      	ldrb	r2, [r7, #13]
 80068fc:	4909      	ldr	r1, [pc, #36]	@ (8006924 <UARTEx_SetNbDataToProcess+0x94>)
 80068fe:	5c8a      	ldrb	r2, [r1, r2]
 8006900:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006904:	7b7a      	ldrb	r2, [r7, #13]
 8006906:	4908      	ldr	r1, [pc, #32]	@ (8006928 <UARTEx_SetNbDataToProcess+0x98>)
 8006908:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800690a:	fb93 f3f2 	sdiv	r3, r3, r2
 800690e:	b29a      	uxth	r2, r3
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006916:	bf00      	nop
 8006918:	3714      	adds	r7, #20
 800691a:	46bd      	mov	sp, r7
 800691c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006920:	4770      	bx	lr
 8006922:	bf00      	nop
 8006924:	080069cc 	.word	0x080069cc
 8006928:	080069d4 	.word	0x080069d4

0800692c <memset>:
 800692c:	4402      	add	r2, r0
 800692e:	4603      	mov	r3, r0
 8006930:	4293      	cmp	r3, r2
 8006932:	d100      	bne.n	8006936 <memset+0xa>
 8006934:	4770      	bx	lr
 8006936:	f803 1b01 	strb.w	r1, [r3], #1
 800693a:	e7f9      	b.n	8006930 <memset+0x4>

0800693c <__libc_init_array>:
 800693c:	b570      	push	{r4, r5, r6, lr}
 800693e:	4d0d      	ldr	r5, [pc, #52]	@ (8006974 <__libc_init_array+0x38>)
 8006940:	4c0d      	ldr	r4, [pc, #52]	@ (8006978 <__libc_init_array+0x3c>)
 8006942:	1b64      	subs	r4, r4, r5
 8006944:	10a4      	asrs	r4, r4, #2
 8006946:	2600      	movs	r6, #0
 8006948:	42a6      	cmp	r6, r4
 800694a:	d109      	bne.n	8006960 <__libc_init_array+0x24>
 800694c:	4d0b      	ldr	r5, [pc, #44]	@ (800697c <__libc_init_array+0x40>)
 800694e:	4c0c      	ldr	r4, [pc, #48]	@ (8006980 <__libc_init_array+0x44>)
 8006950:	f000 f818 	bl	8006984 <_init>
 8006954:	1b64      	subs	r4, r4, r5
 8006956:	10a4      	asrs	r4, r4, #2
 8006958:	2600      	movs	r6, #0
 800695a:	42a6      	cmp	r6, r4
 800695c:	d105      	bne.n	800696a <__libc_init_array+0x2e>
 800695e:	bd70      	pop	{r4, r5, r6, pc}
 8006960:	f855 3b04 	ldr.w	r3, [r5], #4
 8006964:	4798      	blx	r3
 8006966:	3601      	adds	r6, #1
 8006968:	e7ee      	b.n	8006948 <__libc_init_array+0xc>
 800696a:	f855 3b04 	ldr.w	r3, [r5], #4
 800696e:	4798      	blx	r3
 8006970:	3601      	adds	r6, #1
 8006972:	e7f2      	b.n	800695a <__libc_init_array+0x1e>
 8006974:	080069e4 	.word	0x080069e4
 8006978:	080069e4 	.word	0x080069e4
 800697c:	080069e4 	.word	0x080069e4
 8006980:	080069e8 	.word	0x080069e8

08006984 <_init>:
 8006984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006986:	bf00      	nop
 8006988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800698a:	bc08      	pop	{r3}
 800698c:	469e      	mov	lr, r3
 800698e:	4770      	bx	lr

08006990 <_fini>:
 8006990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006992:	bf00      	nop
 8006994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006996:	bc08      	pop	{r3}
 8006998:	469e      	mov	lr, r3
 800699a:	4770      	bx	lr
